# üìò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å –ò–ò

## üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
- Laravel 12+, Livewire
- TailwindCSS + Flux UI
- MySQL
- OpenRouter API –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ò–ò

---

## üìö –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–ª–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫–ª–∏–µ–Ω—Ç—ã) –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —Å –ò–ò –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º (—Ç–∏–ø–∞–º —Å–µ–∞–Ω—Å–æ–≤). –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—ë—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –ò–ò –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∏—á—å –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ —à–∞–≥–∞ –ò–ò —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ–∞–Ω—Å.

---

## üë• –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

- **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**
  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Ç–∏–ø–∞–º–∏ —Å–µ–∞–Ω—Å–æ–≤ –∏ —à–∞–≥–∞–º–∏
  - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ª–æ–≥–æ–≤
- **–¢–µ—Ä–∞–ø–µ–≤—Ç**
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–π —Å–µ—Å—Å–∏–π
- **–ö–ª–∏–µ–Ω—Ç**
  - –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–æ–≤
  - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  - –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π

---

## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- Email + –ø–∞—Ä–æ–ª—å
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–æ—Ü—Å–µ—Ç–∏ (Google, –≤–æ–∑–º–æ–∂–Ω–æ VK)

---

## üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

### User
- id, name, email, password
- role: admin / therapist / client

### SessionType
- id, title, description, image
- model_config (JSON): —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- system_prompt: –ø–µ—Ä–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –ò–ò

### SessionStep
- id, session_type_id, step_key
- title
- description (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- client_message (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- system_instruction: —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ò–ò
- is_final (bool): –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏

### Session
- id, user_id, session_type_id
- current_step_id
- status: in_progress / completed / failed

### SessionMessage
- session_id
- role: user / assistant / system
- content
- json_payload (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç —Å action/step_id)

### SessionResult
- session_id
- summary
- created_at

---

## üß† –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò

### –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ–∞–Ω—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ
2. –ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ —à–∞–≥ –≤ OpenRouter
3. –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç, –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –æ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥
4. –§–æ—Ä–º–∞—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞:
```json
{
  "action": "go_to_step",
  "step_id": "step_3"
}
```
–∏–ª–∏
```json
{
  "action": "end_session"
}
```

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
–ü–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç:
- –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
- –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
- –¢–µ–∫—É—â–∏–π —à–∞–≥
- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –ò–ò

**–û—Ç–≤–µ—Ç—ã –ò–ò –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å JSON –≤ Markdown-–±–ª–æ–∫–µ:**
````markdown
```json
{
  "summary": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ —Å—Ç—Ä–∞—Ö–∞–º–∏",
  "action": "go_to_step",
  "step_id": "step_3"
}
```
````

---

## üí¨ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞

- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ Livewire
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏ –ò–ò-—Å–æ–æ–±—â–µ–Ω–∏—è
- –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å–∫—Ä—ã—Ç—ã
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏

---

## üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å

- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —Å–µ–∞–Ω—Å–æ–≤
- –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —à–∞–≥–æ–≤ (–∫–Ω–æ–ø–∫–∏ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)
  - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞
  - –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  - –ü—Ä–∏–∑–Ω–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π OpenRouter –≤ JSON
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π (–≤–∫–ª—é—á–∞—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–º–ø—Ç—ã)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∞–Ω—Å–∞–º –∏ —à–∞–≥–∞–º

---

## ‚ö† –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

- –ï—Å–ª–∏ –ò–ò –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
- –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
- –í—Å–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è

---

## üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞

- –ö–æ–ª-–≤–æ —Å–µ–∞–Ω—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- –ß–∞—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º—ã–µ —à–∞–≥–∏
- –ö–æ–ª-–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π

---

## üß© –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º

- –û–∑–≤—É—á–∫–∞ —à–∞–≥–æ–≤ (TTS)
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-—Ä–µ–∑—é–º–µ
- –û—Ü–µ–Ω–∫–∞ –ò–ò-—Å–µ–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
---

## üîÑ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã

### üß≠ –û–±—â–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–≥–æ–≤. –ö–∞–∂–¥—ã–π —à–∞–≥ –∑–∞–¥–∞—ë—Ç —Ü–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ò–ò. –¢–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ò–ò –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ, –æ–Ω –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.

–ì–ª–∞–≤–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: **–ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ò–ò** –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

---

### üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)

1. **–ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è** –≤ —Å–∏—Å—Ç–µ–º–µ (email/—Å–æ—Ü—Å–µ—Ç–∏) –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.
2. –û–Ω –≤–∏–¥–∏—Ç **—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–µ–∞–Ω—Å–æ–≤** —Å –º–∏–Ω–∏-–æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏.
3. –ù–∞–∂–∏–º–∞–µ—Ç "–ù–∞—á–∞—Ç—å", –∏ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å `Session`, —Å–≤—è–∑–∞–≤ –µ—ë —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º `SessionType`.
4. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —à–∞–≥ (`SessionStep`) –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –ø–æ –ø–æ—Ä—è–¥–∫—É.

---

### üí¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞

5. –í Livewire-—á–∞—Ç–µ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è `client_message` –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ).
6. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ OpenRouter. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç:
   - —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ò–ò (–≤–∫–ª—é—á–∞—è —Ü–µ–ª—å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞);
   - –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è);
   - –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, —à–∞–≥–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏);
   - –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–¥–µ–ª–µ–π –∏–∑ `SessionType.model_config`.

7. –ò–ò –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥.

---

### üîÅ –î–∏–∞–ª–æ–≥ –∏ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤

8. –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ `SessionMessage`.
9. –û—Ç–≤–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –ò–ò —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
10. –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

11. –ö–æ–≥–¥–∞ –ò–ò —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Ü–µ–ª—å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –æ–Ω **–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç JSON-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é**:
    ```json
    {
      "summary": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏",
      "action": "go_to_step",
      "step_id": "step_3"
    }
    ```

12. –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏—Ç JSON, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–π —à–∞–≥, –æ–±–Ω–æ–≤–ª—è–µ—Ç `Session.current_step_id` –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –Ω–æ–≤–æ–º—É —à–∞–≥—É, –ø–æ–≤—Ç–æ—Ä—è—è –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å.

13. –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç:
    ```json
    { "action": "end_session" }
    ```
    ‚Äî —Å–µ—Å—Å–∏—è –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è (`status = completed`), —á–∞—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

---

### üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

- –ï—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –¥–µ–ª–∞–µ—Ç—Å—è 1 –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
- –ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –æ—à–∏–±–∫–∞ ‚Äî –∫–ª–∏–µ–Ω—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
- –í—Å–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤–∫–ª—é—á–∞—è –Ω–∞—à–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –æ—Ç–≤–µ—Ç—ã –ò–ò, —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ `SessionMessage`.

---

### üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ

- –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ `Session.status = in_progress`.
- –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞, —á–∞—Ç –∏ –∏—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è.
- –ò–ò –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ç –∂–µ —à–∞–≥, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.

---

### üß∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏

- –í –∞–¥–º–∏–Ω–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç —Å–æ–∑–¥–∞—ë—Ç `SessionType` –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à–∞–≥–∏ (`SessionStep`).
- –ö–∞–∂–¥—ã–π —à–∞–≥ –∑–∞–¥–∞—ë—Ç:
  - `system_instruction` ‚Äî —Ü–µ–ª—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ò–ò;
  - `client_message` ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç;
  - `is_final` ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
- –®–∞–≥–∏ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏, –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å.

---

### üìé –ò—Ç–æ–≥–∏

- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ ‚Äî –≤—Å—ë –¥–µ–ª–∞–µ—Ç –ò–ò.
- –ú—ã –ø–µ—Ä–µ–¥–∞—ë–º –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –ò–ò —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é.
- –ò–ò —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏.
- –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.


# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥

// routes/web.php
<?php

use App\Livewire\Settings\Profile;
use App\Livewire\Settings\Password;
use App\Livewire\Settings\Appearance;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Client\SessionController;
use App\Http\Controllers\Admin\SessionTypeController;

Route::get('/', function () {
    return view('welcome');
})->name('home');

Route::view('dashboard', 'dashboard')
    ->middleware(['auth', 'verified'])
    ->name('dashboard');

Route::middleware(['auth'])->group(function () {
    Route::redirect('settings', 'settings/profile');

    Route::get('settings/profile', Profile::class)->name('settings.profile');
    Route::get('settings/password', Password::class)->name('settings.password');
    Route::get('settings/appearance', Appearance::class)->name('settings.appearance');
});


Route::middleware(['auth'])->prefix('client')->name('client.')->group(function () {
    Route::get('/sessions', [SessionController::class, 'index'])->name('sessions');
    Route::get('/chat/{session}', [SessionController::class, 'chat'])->name('chat.session');
});

Route::middleware(['auth'])->prefix('admin')->name('admin.')->group(function () {
    Route::get('/session-types', [SessionTypeController::class, 'index'])->name('session-types.index');
    Route::get('/session-types/{sessionType}/edit', [SessionTypeController::class, 'edit'])->name('session-types.edit');
});

require __DIR__.'/auth.php';

// app/Http/Controllers/Admin/SessionTypeController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\SessionType;
use Illuminate\Http\Request;

class SessionTypeController extends Controller
{
    public function index()
    {
        $types = SessionType::all();
        return view('admin.session-types.index', compact('types'));
    }

    public function edit(SessionType $sessionType)
    {
        return view('admin.session-types.edit', compact('sessionType'));
    }
}

// app/Http/Controllers/Client/SessionController.php
<?php

namespace App\Http\Controllers\Client;

use Illuminate\Http\Request;

class SessionController extends \App\Http\Controllers\Controller
{
    public function index()
    {
        return view('client.sessions.index');
    }

    public function chat($sessionId)
    {
        return view('client.sessions.chat', [
            'sessionId' => $sessionId,
        ]);
    }
}

// app/Livewire/Admin/SessionStepsEditor.php
<?php

namespace App\Livewire\Admin;

use App\Models\SessionStep;
use App\Models\SessionType;
use Livewire\Component;
use Illuminate\Support\Collection;

class SessionStepsEditor extends Component
{
    public SessionType $sessionType;
    public Collection $steps;

    public function mount(SessionType $sessionType)
    {
        $this->sessionType = $sessionType;
        $this->steps = $sessionType->steps()->orderBy('id')->get()->collect();
    }

    public function moveUp($index)
    {
        if ($index > 0) {
            $this->steps->splice($index - 1, 2, [$this->steps[$index], $this->steps[$index - 1]]);
        }
    }

    public function moveDown($index)
    {
        if ($index < $this->steps->count() - 1) {
            $this->steps->splice($index, 2, [$this->steps[$index + 1], $this->steps[$index]]);
        }
    }

    public function save()
    {
        foreach ($this->steps as $index => $step) {
            SessionStep::find($step['id'])->update([
                'step_key' => 'step_' . ($index + 1),
            ]);
        }

        session()->flash('saved', '–®–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    }

    public function render()
    {
        return view('livewire.admin.session-steps-editor');
    }
}

// app/Livewire/Chat/SessionChat.php
<?php

namespace App\Livewire\Chat;

use App\Models\SessionMessage;
use App\Models\TherapySession;
use App\Models\SessionStep;
use Livewire\Component;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use App\Services\OpenRouterService;


class SessionChat extends Component
{
    public TherapySession $session;
    public string $message = '';
    public array $messages = [];

    public bool $isLoading = false;


    public function mount($sessionId)
    {
        $this->session = TherapySession::with(['messages', 'currentStep', 'type'])->findOrFail($sessionId);
        $this->messages = $this->session->messages()->orderBy('created_at')->get()->toArray();
    }

    public function send(OpenRouterService $api)
    {
        $this->validate(['message' => 'required|string']);

        $this->isLoading = true;

        $userMsg = SessionMessage::create([
            'therapy_session_id' => $this->session->id,
            'role' => 'user',
            'content' => $this->message,
        ]);

        $this->messages[] = $userMsg->toArray();
        $this->message = '';

        $response = $api->sendMessage($this->session, $userMsg->content);
        $content = $response['content'] ?? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò';
        $assistantMsg = SessionMessage::create([
            'therapy_session_id' => $this->session->id,
            'role' => 'assistant',
            'content' => $content,
        ]);
        $this->messages[] = $assistantMsg->toArray();

        if ($response['success']) {
            $payload = $api->extractJson($content);
            if ($payload) {
                $assistantMsg->update(['json_payload' => $payload]);

                match ($payload['action'] ?? null) {
                    'go_to_step' => $this->goToStep($payload['step_id'] ?? null),
                    'end_session' => $this->endSession($payload['summary'] ?? null),
                    default => null,
                };
            }
        }

        $this->isLoading = false;
        $this->dispatch('scroll-to-bottom');
    }

    protected function goToStep(?string $stepKey): void
    {
        if (!$stepKey) return;

        $step = $this->session->type
            ->steps()
            ->where('step_key', $stepKey)
            ->first();

        if (!$step) {
            SessionMessage::create([
                'therapy_session_id' => $this->session->id,
                'role' => 'system',
                'content' => "‚ö† –®–∞–≥ —Å –∫–ª—é—á–æ–º '{$stepKey}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            ]);
            return;
        }

        $this->session->update(['current_step_id' => $step->id]);

        if ($step->client_message) {
            $msg = SessionMessage::create([
                'therapy_session_id' => $this->session->id,
                'role' => 'user',
                'content' => $step->client_message,
            ]);

            $this->messages[] = $msg->toArray();
        }

        $this->session->refresh();
    }


    protected function endSession(?string $summary): void
    {
        $this->session->update(['status' => 'completed']);

        if ($summary) {
            $this->session->result()->create([
                'summary' => $summary,
            ]);
        }

        SessionMessage::create([
            'therapy_session_id' => $this->session->id,
            'role' => 'system',
            'content' => 'üü¢ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.',
        ]);
    }


    public function render()
    {
        return view('livewire.chat.session-chat');
    }
}

// app/Livewire/Client/SessionTypeList.php
<?php

namespace App\Livewire\Client;

use App\Models\SessionType;
use App\Models\TherapySession;
use Livewire\Component;
use Illuminate\Support\Facades\Auth;

class SessionTypeList extends Component
{
    public function startSession($typeId)
    {
        $type = SessionType::findOrFail($typeId);

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
        $firstStep = $type->steps()->orderBy('id')->first();

        // –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
        $session = TherapySession::create([
            'user_id' => Auth::id(),
            'session_type_id' => $type->id,
            'current_step_id' => $firstStep?->id,
            'status' => 'in_progress',
        ]);

        return redirect()->route('chat.session', $session->id);
    }

    public function render()
    {
        return view('livewire.client.session-type-list', [
            'types' => SessionType::all(),
        ]);
    }
}

// app/Models/User.php
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Str;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role', 
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    /**
     * Get the user's initials
     */
    public function initials(): string
    {
        return Str::of($this->name)
            ->explode(' ')
            ->take(2)
            ->map(fn ($word) => Str::substr($word, 0, 1))
            ->implode('');
    }

    public function isAdmin(): bool
    {
        return $this->role === 'admin';
    }

    public function isTherapist(): bool
    {
        return $this->role === 'therapist';
    }

    public function isClient(): bool
    {
        return $this->role === 'client';
    }

}

// app/Models/TherapySession.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class TherapySession extends Model
{

    use HasFactory;

    protected $fillable = [
        'user_id',
        'session_type_id',
        'current_step_id',
        'status',
    ];

    public function user() {
        return $this->belongsTo(User::class);
    }

    public function type() {
        return $this->belongsTo(SessionType::class, 'session_type_id');
    }

    public function currentStep() {
        return $this->belongsTo(SessionStep::class, 'current_step_id');
    }

    public function messages() {
        return $this->hasMany(SessionMessage::class);
    }

    public function result() {
        return $this->hasOne(SessionResult::class);
    }
}

// app/Models/SessionType.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class SessionType extends Model
{
    //
}

// app/Models/SessionStep.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class SessionStep extends Model
{
    //
}

// app/Models/SessionMessage.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class SessionMessage extends Model
{
    use HasFactory;

    protected $fillable = [
        'therapy_session_id',
        'role',
        'content',
        'json_payload',
    ];

    protected $casts = [
        'json_payload' => 'array',
    ];

    public function session() {
        return $this->belongsTo(Session::class);
    }
}

// app/Models/SessionResult.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class SessionResult extends Model
{
    use HasFactory;

    protected $fillable = [
        'therapy_session_id',
        'summary',
    ];

    public function session() {
        return $this->belongsTo(Session::class);
    }
}

// app/Services/OpenRouterService.php
<?php 

namespace App\Services;

use Illuminate\Support\Facades\Http;
use App\Models\TherapySession;

class OpenRouterService
{
    public function sendMessage(TherapySession $session, string $userMessage): array
    {
        $model = $session->type->model_config['model'] ?? 'deepseek/deepseek-chat-v3-0324:free';
        $systemPrompt = $session->type->system_prompt;
        $stepInstruction = $session->currentStep?->system_instruction;

        $history = $session->messages()
            ->orderBy('created_at')
            ->get()
            ->map(fn ($msg) => [
                'role' => $msg->role,
                'content' => $msg->content,
            ])
            ->toArray();

        $messages = array_merge(
            [['role' => 'system', 'content' => $systemPrompt]],
            [['role' => 'system', 'content' => $stepInstruction]],
            $history,
            [['role' => 'user', 'content' => $userMessage]]
        );

        $response = Http::withHeaders([
            'Authorization' => 'Bearer ' . config('services.openrouter.token'),
            'Content-Type' => 'application/json',
        ])->post('https://openrouter.ai/api/v1/chat/completions', [
            'model' => $model,
            'messages' => $messages,
        ]);

        if (!$response->successful()) {
            return [
                'success' => false,
                'error' => '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò: ' . $response->status(),
                'content' => null,
            ];
        }

        $content = $response->json()['choices'][0]['message']['content'] ?? null;

        return [
            'success' => true,
            'content' => $content,
        ];
    }

    public function extractJson(string $message): ?array
    {
        if (preg_match('/```json(.*?)```/s', $message, $match)) {
            try {
                return json_decode(trim($match[1]), true, 512, JSON_THROW_ON_ERROR);
            } catch (\Throwable) {
                return null;
            }
        }

        return null;
    }
}

// resources/views/admin/session-types/index.blade.php
<x-layouts.app :title="'–°—Ü–µ–Ω–∞—Ä–∏–∏ —Å–µ–∞–Ω—Å–æ–≤'">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 p-6">
        @foreach ($types as $type)
            <div class="border rounded-xl p-4 flex flex-col justify-between">
                <div>
                    <div class="font-semibold text-lg">{{ $type->title }}</div>
                    <p class="text-muted-foreground">{{ $type->description }}</p>
                </div>
                <x-button :href="route('admin.session-types.edit', $type)" class="mt-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥–∏</x-button>
            </div>
        @endforeach
    </div>
</x-layouts.app>

// resources/views/admin/session-types/edit.blade.php
<x-layouts.app :title="'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ' . $sessionType->title">
    <div class="flex flex-col gap-6 p-6">
        <livewire:admin.session-steps-editor :session-type="$sessionType" />
    </div>
</x-layouts.app>

// resources/views/client/sessions/chat.blade.php
<x-layouts.app :title="'–°–µ—Å—Å–∏—è #' . $sessionId">
    <div class="flex flex-col gap-4 p-4">
        <livewire:chat.session-chat :session-id="$sessionId" />
    </div>
    @push('scripts')
    <script>
        Livewire.on('scroll-to-bottom', () => {
            setTimeout(() => {
                const el = document.getElementById('chat-container');
                el?.scrollTo({ top: el.scrollHeight, behavior: 'smooth' });
            }, 100);
        });

        // –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
        window.addEventListener('load', () => {
            const el = document.getElementById('chat-container');
            el?.scrollTo({ top: el.scrollHeight });
        });
    </script>
    @endpush


</x-layouts.app>

// resources/views/client/sessions/index.blade.php
<x-layouts.app :title="__('–°—Ü–µ–Ω–∞—Ä–∏–∏')">
    <div class="flex h-full w-full flex-1 flex-col gap-4 rounded-xl">
        <livewire:client.session-type-list />
    </div>
</x-layouts.app>

// resources/views/livewire/admin/session-steps-editor.blade.php
<div class="space-y-4">
    @foreach ($steps as $index => $step)
        <div class="rounded-xl border p-4 flex justify-between items-center">
            <div>
                <div class="font-semibold">{{ $step['title'] }}</div>
                <div class="text-xs text-muted-foreground">{{ $step['step_key'] }}</div>
            </div>
            <div class="flex gap-2">
                <x-button size="icon" wire:click="moveUp({{ $index }})" title="–í–≤–µ—Ä—Ö">‚Üë</x-button>
                <x-button size="icon" wire:click="moveDown({{ $index }})" title="–í–Ω–∏–∑">‚Üì</x-button>
            </div>
        </div>
    @endforeach

    <x-button wire:click="save" class="mt-4">
        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
    </x-button>

    @if (session()->has('saved'))
        <div class="text-green-500 text-sm mt-2">
            {{ session('saved') }}
        </div>
    @endif
</div>

// resources/views/livewire/chat/session-chat.blade.php
<div>
<div class="flex flex-col gap-4 h-[70vh] overflow-y-auto p-4" id="chat-container">
    @foreach ($messages as $msg)
        <div class="max-w-[80%] rounded-2xl px-4 py-2 text-sm whitespace-pre-wrap {{ $msg['role'] === 'user' ? 'ml-auto bg-primary text-white' : 'mr-auto bg-muted' }}">
            {!! nl2br(e($msg['content'])) !!}
        </div>
    @endforeach

    @if ($isLoading)
        <div class="text-muted text-sm italic">–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...</div>
    @endif
</div>

<form wire:submit.prevent="send" class="flex gap-2 px-4 mt-4">
    <x-input class="flex-1" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." wire:model.defer="message" :disabled="$isLoading" />
    <x-button type="submit" :disabled="$isLoading">
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
    </x-button>
</form>


</div>

// resources/views/livewire/client/session-type-list.blade.php
<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
    @foreach ($types as $type)
        <div class="rounded-2xl border p-4 shadow-sm">
            @if ($type->image)
                <img src="{{ asset('storage/' . $type->image) }}" class="rounded-xl mb-4" alt="{{ $type->title }}">
            @endif
            <h2 class="text-xl font-semibold mb-2">{{ $type->title }}</h2>
            <p class="text-muted-foreground">{{ $type->description }}</p>
            <x-button class="mt-4 w-full" wire:click="startSession({{ $type->id }})">
                –ù–∞—á–∞—Ç—å
            </x-button>
        </div>
    @endforeach
</div>

