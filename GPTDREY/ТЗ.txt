1. Общее описание проекта

1.1. Название проекта  
(Указать рабочее название проекта)

1.2. Цель проекта  
Создать веб-сервис, позволяющий пользователям общаться с моделями искусственного интеллекта через API openrouter.ai, с возможностью настройки параметров чата. Административная часть должна предоставлять возможность управлять доступными моделями и тарифами.

1.3. Целевая аудитория  
- Зарегистрированные пользователи, которым доступны персональные чаты, группирующиеся в папках с возможностью настройки параметров.
- Гостевые пользователи – доступ к ограниченному функционалу (единственный чат, специальный тариф).
- Администраторы – управление моделями, тарифами и общим сервисом.

──────────────────────────────
2. Технологии и стек

2.1. Бэкенд:  
• PHP (Laravel последней стабильной версии)  
• MySQL – СУБД для хранения данных  
• Livewire – для создания динамичных интерактивных компонентов

2.2. Фронтенд:
• Tailwind CSS – для стилизации и адаптивного дизайна  
• Blade шаблоны Laravel в связке с Livewire и flux UI

2.3. Внешние API:  
• API openrouter.ai – для взаимодействия с моделями ИИ (обработка запросов и ответов)

──────────────────────────────
3. Функциональные требования

3.1. Модуль пользователей

3.1.1. Аутентификация и Авторизация:  
• Регистрация и вход пользователей.  
• Для гостевых пользователей автоматически создается учетная запись типа «гость» с единственным чатом, специальным тарифом для гостя и сохранением данных сессии в куках на год.

3.1.2. Интерфейс чата:  
• Пользователь может создавать несколько чатов.  
• Возможность группировки чатов в папки:  
 – Каждая папка имеет название и собственный системный промпт, который дополняет/влияет на системные промпты чатов, входящих в эту папку.
• Каждый чат содержит:  
 – Историю сообщений с возможностью очистки (с подтверждением).  
 – Возможность удаления чата.  
 – Возможность добавления текстовых вложений (форматы .txt, .md).  
  ∘ Вложение отображается, а при нажатии открывается в отдельном окне для просмотра текста.  
• Боковая панель:  
 – Список чатов, разделенных на папки (с возможностью сворачивания/разворачивания).  
 – Возможность переименования чатов и их перемещения между папками.

3.1.3. Настройка параметров чата:  
Пользователь может задавать/редактировать следующие параметры:
 • Системный промпт (роль ассистента).  
 • Температура (настройка случайности ответа от ИИ).  
 • Выбор модели ИИ (список доступных моделей определяется тарифом и настройками администратора).  
 • Количество последних сообщений из истории, которые учитываются при формировании запроса к API.  
• Дополнительно:  
 – Сохранять историю изменений настроек (системный промпт и выбранная модель) до 5 последних вариантов с возможностью восстановления предыдущих настроек.

Изменения параметров учитываются при следующем запросе к API.

3.1.4. Отправка сообщений:  
• При отправке сообщения формируется запрос к API openrouter.ai с учетом:
 – Текущего текста сообщения.
 – Параметров чата: системный промпт, температура, выбранная модель.
 – Последних N сообщений истории (где N – заданное количество сообщений).
 – Если чат находится в папке – дополнительно применяется настройка системного промпта из папки.
• Ответ от модели ИИ:
 – Обрабатывается с поддержкой markdown-разметки.
 – Отображается красиво с применением Tailwind CSS.
• Логирование:
 – Нужно логировать ответ от API, состояние (успех или ошибка) и хранить логи в течение суток.

──────────────────────────────
3.2. Модуль администратора

3.2.1. Управление моделями ИИ:  
• Админ может добавлять, редактировать и удалять модели, доступные пользователям.  
• Для каждой модели задаются два наименования:
 – Отображаемое (для пользователя).  
 – Название, используемое при запросе к API.  
• Модели могут быть привязаны к тарифам, определяющим, какие модели доступны для конкретного тарифа.

3.2.2. Управление тарифами:  
• Админ задает тарифы, определяющие:
 – Список доступных моделей для пользователей.  
 – Лимит количества сообщений в день (счетчик сообщений для каждого пользователя).
• Тарифы:
 – Бесплатный тариф устанавливается по умолчанию при регистрации.
 – Специальный тариф для гостевого пользователя (единственный чат, ограниченный функционал).
• Интеграция платежей оставляется на будущее.

3.2.3. Настройки дополнительных параметров:  
• В админке должна быть опция для переключения метода обработки запросов к API (синхронно или опционально – с использованием очередей/Job).

──────────────────────────────
3.3. Взаимодействие с API openrouter.ai

3.3.1. Формирование запроса:  
• Запрос формируется с учетом:  
 – Текста сообщения.  
 – Параметров чата (системный промпт, температура, модель).  
 – Последних N сообщений истории чата.
 – Если чат находится в папке – применяются дополнения системного промпта папки.
• Обработка ошибок и задержек:
 – Реализовать обработку ошибок, логирование ответа (успех/ошибка).
 – Логи запросов и ответов хранятся в течение суток.
 – Возможна реализация асинхронной обработки запросов с использованием очередей (опция, переключаемая в админ-панели).

3.3.2. Обработка ответа:  
• Ответ от модели обрабатывается, поддерживая markdown-разметку для красивого отображения.
• Возможно дополнительное форматирование (например, предварительный просмотр вложений).

──────────────────────────────
4. Нефункциональные требования

4.1. Производительность:  
• Сервис должен выдерживать большое количество одновременных обращений к API и обновлений через Livewire.

4.2. Масштабируемость:  
• Адаптивный интерфейс для различных устройств.  
• Проектирование базы данных с возможностью расширения (новые тарифы, чаты, настройки).

4.3. Безопасность:  
• Защита от CSRF и XSS.  
• Ограничение доступа к административной части.  
• Безопасное хранение пользовательских данных (шифрование при необходимости).

4.4. UX/UI:  
• Применение Tailwind CSS для современного и адаптивного дизайна.  
• Удобная навигация по чатам и папкам.  
• Редактор сообщений с поддержкой markdown и предпросмотром форматированного текста.

──────────────────────────────
5. Структура базы данных (предварительный вариант)

5.1. Таблица пользователей (users)  
- id, name, email, password, тариф_id, тип (пользователь/гость), и др.

5.2. Таблица тарифов (tariffs)  
- id, название тарифа, лимит сообщений в день, описание, дополнительные параметры (например, тип тарифа – стандартный, гость).

5.3. Таблица моделей (ai_models)  
- id, название для пользователя, название для API, статус (активна/неактивна).  
- Связь с тарифами (например, many-to-many, если модель доступна сразу для нескольких тарифов).

5.4. Таблица чатов (chats)  
- id, user_id (nullable, если чат у гостя прописан в отдельном поле), folder_id (nullable).  
- Параметры: системный промпт, температура, выбранная модель, число последних сообщений, и др.  
- Возможно хранение истории версий настроек (например, JSON-поле с последними 5 версиями).

5.5. Таблица папок (folders)  
- id, user_id, название, системный промпт, created_at, updated_at.

5.6. Таблица сообщений (messages)  
- id, chat_id, sender (user/AI), текст сообщения, тип (обычный, с вложением), путь к вложению, тип файла, created_at.

5.7. Таблица логирования API (api_logs)  
- id, chat_id, request_payload, response_payload, статус (успех/ошибка), created_at.  
 – Логи хранятся 24 часа.

5.8. Таблица/механизм лимитирования (например, daily_message_count)  
- Для контроля количества отправленных сообщений для каждого пользователя в день (можно реализовать через кэш/Redis либо отдельную таблицу).

──────────────────────────────
6. Архитектура приложения и компоненты

6.1. Frontend:  
• Основной layout для пользователей: боковая панель со списком чатов/папок, область с активным чатом, область ввода сообщения.  
• Livewire компоненты:
 – Список чатов и папок.  
 – Компонент чата с историей сообщений и отправкой запросов к API.  
 – Компонент настроек чата (модальное окно или боковая панель).  
• Подключение библиотеки для обработки markdown (например, Marked.js) для предпросмотра сообщений.

6.2. Back-end:  
• Контроллеры для управления чатами, сообщениями, пользователями, тарифами и моделями ИИ.  
• Сервисный слой для работы с API openrouter.ai:
 – Формирование запроса с учетом настроек, истории сообщений и папок.
 – Обработка ответа, логирование (состояние успех/ошибка) с хранением логов сроком 24 часа.
• Middleware для проверки лимитов сообщений (с учетом тарифов).  
• Возможность переключения обработки запросов (синхронно или асинхронно через jobs) – опция в админ-панели.

6.3. Административная панель:  
• Отдельный раздел с ограниченным доступом.  
• CRUD-интерфейс для управления моделями ИИ и тарифами.  
• Интерфейс для настройки переключения опций (например, переключение синхронной/асинхронной обработки запросов).  
• Отчеты по активности пользователей, лимитам сообщений и логам API.

──────────────────────────────
7. Требования к интеграции и развёртыванию

7.1. Разработка:  
• Использование Git для контроля версий.  
• Набор автоматических тестов (юнит-тесты для ключевых функций, тесты для Livewire компонентов).

7.2. Развёртывание:  
• Документация по сборке и развёртыванию (сборка assets при помощи Laravel Mix/Vite).  
• Возможное применение Docker для контейнеризации приложения.

──────────────────────────────
8. Дополнительные уточнения (на основе ответов)

8.1. Логирование:  
• Логирование запросов к API и ответов (состояние – успех или ошибка) обязательно.  
• Логи хранятся в течение 24 часов (можно реализовать через отдельную таблицу или систему логирования).

8.2. Платежная система:  
• Интеграция платежей отложена на будущее, в ТЗ включены только тарифные настройки.

8.3. Версионность настроек чата:  
• Системный промпт и выбранная модель сохраняются до 5 последних вариантов настроек с возможностью восстановления предыдущей конфигурации.

8.4. Обработка вложений:  
• Вложения типа txt и md отображаются в чате.
• При нажатии на вложение открывается окно для просмотра текста.

8.5. Режим обработки запросов к API:  
• Реализовать переключаемый режим обработки запросов (синхронно либо через очереди/Jobs).  
• Переключение осуществляется из административной панели.

8.6. Особенности гостевого доступа:  
• Гостевой пользователь автоматически создается с типом "гость", ему доступен только один чат и специальный тариф.  
• Данные гостевого пользователя сохраняются в куках на год для поддержки сессии.

──────────────────────────────
9. Итог

Данный документ ТЗ включает все первоначальные требования, а также уточнения по логированию, версионности настроек, способу обработки вложений, режиму работы с API и особенностям гостевого доступа.
