**Техническое задание (ТЗ) на разработку функционала создания психологических тестов**

---

### **Общая информация**

**Проект**: Веб-сайт для прохождения психологических тестов и получения результатов.

**Технологии**: PHP, Laravel, Livewire, Tailwind CSS.

**Цель разработки**: Создать гибкий функционал для создания и прохождения психологических тестов различных типов, включая квизы, с возможностью подсчета баллов, интерпретации результатов и предоставления рекомендаций.

---

### **1. Требования к функционалу**

#### **1.1. Типы тестов и вопросов**

- **Типы тестов**:
  - Линейные тесты (стандартная последовательность вопросов).
  - Тесты с условной логикой (ветвление в зависимости от ответов пользователя).
  - Тесты с подсчетом очков и интерпретацией результатов.
  
- **Типы вопросов**:
  - Выбор одного ответа.
  - Выбор нескольких ответов.
  - Вопросы с изображениями (вопрос содержит изображение или варианы ответов с изображениями).
  - Открытый ответ (при необходимости в будущем).

#### **1.2. Создание и управление тестами**

- **Создание тестов**:
  - Тесты создаются исключительно администратором (пользователь с `user_id = 1`).
  - Интерфейс создания тестов должен быть удобным, интуитивно понятным и поддерживать гибкую настройку.

- **Редактирование и обновление тестов**:
  - Администратор может редактировать и обновлять существующие тесты.
  - Изменения в тестах не должны влиять на ранее сохраненные результаты пользователей.

#### **1.3. Прохождение тестов пользователями**

- **Доступность тестов**:
  - Все зарегистрированные пользователи имеют доступ ко всем тестам.
  
- **Интерфейс прохождения тестов**:
  - Интуитивно понятный и адаптивный дизайн, поддерживающий устройства с различными разрешениями экранов.
  - Отображение прогресса прохождения теста (например, номер текущего вопроса из общего количества).
  - Возможность отображения изображений в вопросах и вариантах ответов.
  - Поддержка условной логики (переход к определенным вопросам в зависимости от ответов пользователя).

- **Результаты тестов**:
  - Отображение общего результата после прохождения теста.
  - Детальный анализ ответов пользователя.
  - Интерпретация результатов с учетом набранных баллов.
  - Предоставление рекомендаций на основе результатов теста.

#### **1.4. Административная панель**

- **Статистика и отчеты**:
  - Просмотр списка всех прохождений тестов пользователями.
  - Возможность просмотра ответов и результатов каждого пользователя.
  - Статистические данные по каждому тесту (количество прохождений, средний результат и т.д.).

- **Управление тестами**:
  - Создание, редактирование и удаление тестов.
  - Настройка SEO параметров для каждого теста (заголовки, мета-описания, ключевые слова).

- **Управление контентом**:
  - Возможность добавления и редактирования описаний тестов.
  - Управление изображениями, используемыми в тестах.

#### **1.5. Пользовательский интерфейс и опыт**

- **Каталог тестов**:
  - Отображение списка доступных тестов с кратким описанием каждого.
  - Возможность сортировки и фильтрации тестов по категориям или темам (при необходимости в будущем).

- **Страница теста**:
  - Подробное описание теста.
  - SEO-оптимизация страницы теста (заголовки, мета-данные).
  - Кнопка для начала прохождения теста.

- **Адаптивный дизайн**:
  - Обеспечить корректное отображение на компьютерах, планшетах и мобильных устройствах.
  - Использование Tailwind CSS для быстрой и эффективной стилизации.

- **Настройка интерфейса администратором**:
  - Администратор может настраивать элементы интерфейса (например, тексты приветствия, инструкции, оформление страниц).

#### **1.6. Будущие расширения**

- **Игровые элементы**:
  - Заложить возможность добавления в будущем игровых элементов (баллы, рейтинги, достижения).
  
- **Многоязычность**:
  - В текущем этапе многоязычность не требуется, но архитектура системы должна позволять ее внедрение в будущем при необходимости.

---

### **2. Нефункциональные требования**

#### **2.1. Безопасность и доступ**

- **Роли пользователей**:
  - Две роли: администратор (`user_id = 1`) и пользователи.
  - Разграничение доступа к административным функциям.

- **Конфиденциальность данных**:
  - Обеспечить безопасность хранения персональных данных пользователей и их результатов тестов.
  - Соответствие требованиям законодательства о защите персональных данных.

#### **2.2. Производительность**

- **Загрузка страниц**:
  - Оптимизация загрузки страниц для обеспечения быстрого отклика.
  
- **Масштабируемость**:
  - Возможность поддержки увеличения числа пользователей и тестов без существенной потери производительности.

#### **2.3. Технологические требования**

- **Фреймворки и библиотеки**:
  - Использовать Laravel для серверной части.
  - Использовать Livewire для реализации динамического интерфейса без перезагрузки страниц.
  - Tailwind CSS для стилизации и обеспечения адаптивного дизайна.

- **База данных**:
  - Проектирование структуры БД с учетом хранения тестов, вопросов, ответов пользователей и результатов.
  - Обеспечение целостности и оптимизации запросов к БД.

---

---

### **3. Технические детали реализации**

#### **3.3. Интерфейс и пользовательский опыт**

- **Каталог тестов**:
  - **Страница списка тестов**:
    - Отображение всех доступных тестов с краткими описаниями.
    - Использование карточной компоновки для визуальной привлекательности.
    - Для каждого теста отображать:
      - Название теста.
      - Краткое описание.
      - Изображение (если есть).
      - Кнопку "Начать тест".
    - Поиск (при необходимости в будущем) и сортировка тестов по различным критериям.

- **Страница теста**:
  - **Описание теста**:
    - Подробное описание целей и особенностей теста.
    - SEO оптимизация страницы с использованием предоставленных администратором мета-данных.
  - **Начало теста**:
    - Кнопка для начала прохождения теста.
    - При необходимости отображение инструкции или предупреждений перед началом.

- **Интерфейс прохождения теста**:
  - **Вопросы**:
    - Отображение вопроса и вариантов ответов в понятном и удобном формате.
    - Поддержка отображения изображений в вопросах и ответах.
    - Адаптация интерфейса под различные типы вопросов (одиночный выбор, множественный выбор).
    - Реализация прогресс-бара или индикатора прогресса.
  - **Навигация**:
    - Кнопки "Далее", "Назад" (если разрешено возвращаться к предыдущим вопросам).
    - Предотвращение возможности пропустить обязательный вопрос без ответа.
  - **Условная логика**:
    - Переход к конкретным вопросам в зависимости от выбранных ответов.
    - Обработка ветвления внутри теста без заметных задержек для пользователя.
  - **Отображение ошибок**:
    - Валидация ответов пользователей в реальном времени (при необходимости).
    - Понятные сообщения об ошибках или недопустимых действиях.

- **Результаты теста**:
  - **Отображение результатов**:
    - Общий балл, набранный пользователем.
    - Графическое отображение результатов (гистограммы, диаграммы).
    - Текстовая интерпретация результатов в зависимости от диапазона баллов.
    - Персональные рекомендации на основе результатов.
  - **Детальный отчет**:
    - Возможность для пользователя просмотреть свои ответы и сравнить их с правильными (если применимо).
    - Отображение баллов за каждый вопрос.
  - **Сохранение результатов**:
    - Автоматическое сохранение результатов в личном кабинете пользователя.
    - Возможность повторного просмотра результатов в любое время.

- **Личный кабинет пользователя**:
  - **Мои тесты**:
    - Список пройденных тестов с датами прохождения и набранными баллами.
    - Быстрый переход к детальному отчету по каждому тесту.
  - **Профиль пользователя**:
    - Возможность редактирования личных данных (имя, email).
    - Отображение общей статистики (количество пройденных тестов, средний балл и т.д.).
  
- **Адаптивный дизайн**:
  - **Мобильные устройства**:
    - Оптимизация интерфейса для корректного отображения на смартфонах и таблетах.
    - Удобная навигация и читабельность на небольших экранах.
  - **Десктопные устройства**:
    - Полноценный интерфейс с использованием большого экрана для отображения дополнительной информации.

- **Доступность**:
  - **UI/UX принципы**:
    - Использование контрастных цветов для лучшей видимости.
    - Размеры элементов интерфейса достаточные для удобного взаимодействия.
  - **Accessibility**:
    - Поддержка навигации с клавиатуры.
    - Семантическая разметка для поддержки экранных читалок.

#### **3.4. Технологии и инструменты**

- **Backend**:
  - **Laravel**:
    - Использование функционала фреймворка для разработки RESTful контроллеров.
    - Встроенные средства аутентификации и авторизации.
    - Использование ORM Eloquent для работы с базой данных.

- **Frontend**:
  - **Livewire**:
    - Реализация интерактивных компонентов без необходимости писать JavaScript.
    - Обеспечение динамического обновления интерфейса при взаимодействии пользователя.
  - **Tailwind CSS**:
    - Использование утилитарных классов для быстрой и адаптивной верстки.
    - Создание консистентного и современного дизайна.

- **База данных**:
  - **MySQL/PostgreSQL**:
    - Выбор реляционной базы данных для надежного хранения данных.
    - Оптимизация запросов для повышения производительности.

- **Дополнительные инструменты**:
  - **Composer**: управление зависимостями PHP проекта.
  - **NPM/Yarn**: управление пакетами JavaScript для сборки фронтенда.
  - **Git**: контроль версий и совместная работа над кодом.
  - **Testing Frameworks**:
    - **PHPUnit** для тестирования backend.
    - **Laravel Dusk** для автоматизированного тестирования интерфейса (при необходимости).

#### **3.5. Безопасность**

- **Аутентификация и авторизация**:
  - Использование встроенных средств Laravel для обеспечения безопасности.
  - Хеширование паролей пользователей.
  - Защита административных маршрутов через middleware.

- **Валидация данных**:
  - Серверная валидация входящих данных от пользователей.
  - Предотвращение SQL-инъекций и XSS-атак.

- **SSL/HTTPS**:
  - Использование защищенного протокола для передачи данных.

- **Защита персональных данных**:
  - Соблюдение требований законодательства о защите персональных данных.
  - Оповещение пользователей о сборе и использовании их данных (политика конфиденциальности).

#### **3.6. Производительность и оптимизация**

- **Кэширование**:
  - Использование встроенных механизмов кэширования Laravel для ускорения загрузки страниц.
  - Кэширование часто запрашиваемых данных (например, списков тестов).

- **Оптимизация загрузки файлов**:
  - Минификация CSS и JavaScript.
  - Использование отложенной загрузки изображений (lazy loading).

- **Оптимизация базы данных**:
  - Создание индексов для ускорения запросов.
  - Нормализация схемы базы данных.

#### **3.7. Развертывание и инфраструктура**

- **Сервер**:
  - Выбор надежного хостинга с поддержкой необходимых версий PHP и других технологий.
  
- **CI/CD**:
  - Настройка континуальной интеграции и деплоя для быстрого и безопасного развертывания обновлений.

- **Резервное копирование**:
  - Регулярное создание бэкапов базы данных и важных файлов.
  - План восстановления в случае сбоев.

---
Давай начнем разработку. Я понимаю в программировании, но не профессионально. Пиши что именно делать, куда что писать и как создавать. Сделаем весь функционал.
---

# Разработка уже начата

вот что сделано



---

### **Шаг 1: Проектирование базы данных**

Начнем с создания моделей и миграций для базы данных. Это позволит нам определить структуру данных, с которыми мы будем работать.

Мы создадим следующие модели и миграции:

1. `Test` – тесты.
2. `Question` – вопросы, связанные с тестами.
3. `AnswerOption` – варианты ответов на вопросы.
4. `UserTestResult` – результаты прохождения тестов пользователями.
5. `UserAnswer` – ответы пользователей на вопросы.

---

#### **1.1. Создание модели и миграции для `Test`**

Выполните в терминале команду:

```bash
php artisan make:model Test -m
```

Это создаст модель `Test` и миграцию для таблицы `tests`.

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_tests_table.php`

Замените содержимое метода `up()` на следующее:

```php
public function up()
{
    Schema::create('tests', function (Blueprint $table) {
        $table->id();
        $table->string('title');
        $table->text('description')->nullable();
        $table->string('seo_title')->nullable();
        $table->text('seo_description')->nullable();
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `title` – название теста.
- `description` – описание теста.
- `seo_title` и `seo_description` – для SEO оптимизации.

---

#### **1.2. Создание модели и миграции для `Question`**

Выполните команду:

```bash
php artisan make:model Question -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_questions_table.php`

Замените метод `up()`:

```php
public function up()
{
    Schema::create('questions', function (Blueprint $table) {
        $table->id();
        $table->foreignId('test_id')->constrained()->onDelete('cascade');
        $table->text('question_text');
        $table->string('question_image')->nullable();
        $table->enum('question_type', ['single_choice', 'multiple_choice']);
        $table->integer('order')->default(0);
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `test_id` – связь с тестом.
- `question_text` – текст вопроса.
- `question_image` – изображение вопроса (если есть).
- `question_type` – тип вопроса (одиночный или множественный выбор).
- `order` – порядок отображения вопросов.

---

#### **1.3. Создание модели и миграции для `AnswerOption`**

Выполните команду:

```bash
php artisan make:model AnswerOption -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_answer_options_table.php`

Метод `up()`:

```php
public function up()
{
    Schema::create('answer_options', function (Blueprint $table) {
        $table->id();
        $table->foreignId('question_id')->constrained()->onDelete('cascade');
        $table->text('option_text')->nullable();
        $table->string('option_image')->nullable();
        $table->integer('point_value')->default(0);
        $table->foreignId('next_question_id')->nullable()->constrained('questions')->onDelete('set null');
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `question_id` – связь с вопросом.
- `option_text` – текст варианта ответа.
- `option_image` – изображение варианта ответа (если есть).
- `point_value` – количество баллов за ответ.
- `next_question_id` – для условной логики (если после этого ответа нужно перейти к конкретному вопросу).

---

#### **1.4. Создание модели и миграции для `UserTestResult`**

Выполните команду:

```bash
php artisan make:model UserTestResult -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_user_test_results_table.php`

Метод `up()`:

```php
public function up()
{
    Schema::create('user_test_results', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->foreignId('test_id')->constrained()->onDelete('cascade');
        $table->integer('total_score')->default(0);
        $table->text('interpretation')->nullable();
        $table->text('recommendations')->nullable();
        $table->timestamp('completed_at')->nullable();
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `user_id` – связь с пользователем.
- `test_id` – связь с тестом.
- `total_score` – общий набранный балл.
- `interpretation` – интерпретация результата на основе общего балла.
- `recommendations` – рекомендации для пользователя.
- `completed_at` – время завершения теста.

#### **1.5. Создание модели и миграции для `UserAnswer`**

Выполните команду:

```bash
php artisan make:model UserAnswer -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_user_answers_table.php`

Метод `up()`:

```php
public function up()
{
    Schema::create('user_answers', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_test_result_id')->constrained()->onDelete('cascade');
        $table->foreignId('question_id')->constrained()->onDelete('cascade');
        $table->json('selected_option_ids')->nullable();
        $table->integer('points_earned')->default(0);
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `user_test_result_id` – связь с результатом теста пользователя.
- `question_id` – связь с вопросом.
- `selected_option_ids` – выбранные варианты ответов (может быть один или несколько, хранятся в формате JSON).
- `points_earned` – количество баллов, полученных за ответ на вопрос.

---

#### **1.6. Выполнение миграций**

После того как вы создали все модели и миграции, выполните миграции, чтобы создать таблицы в базе данных.

```bash
php artisan migrate
```

**Примечание:** Убедитесь, что настройки подключения к базе данных корректны в файле `.env`.

---

### **Шаг 2: Реализация моделей и связей**

Теперь, когда у нас есть структуры таблиц, необходимо настроить модели для работы с связями между ними.

#### **2.1. Модель `Test`**

Откройте файл `app/Models/Test.php` и добавьте следующие связи:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Test extends Model
{
    use HasFactory;

    protected $fillable = ['title', 'description', 'seo_title', 'seo_description'];

    public function questions()
    {
        return $this->hasMany(Question::class);
    }

    public function userTestResults()
    {
        return $this->hasMany(UserTestResult::class);
    }
}
```

#### **2.2. Модель `Question`**

Откройте файл `app/Models/Question.php`:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Question extends Model
{
    use HasFactory;

    protected $fillable = ['test_id', 'question_text', 'question_image', 'question_type', 'order'];

    public function test()
    {
        return $this->belongsTo(Test::class);
    }

    public function answerOptions()
    {
        return $this->hasMany(AnswerOption::class);
    }
}
```

#### **2.3. Модель `AnswerOption`**

Откройте файл `app/Models/AnswerOption.php`:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AnswerOption extends Model
{
    use HasFactory;

    protected $fillable = ['question_id', 'option_text', 'option_image', 'point_value', 'next_question_id'];

    public function question()
    {
        return $this->belongsTo(Question::class);
    }

    public function nextQuestion()
    {
        return $this->belongsTo(Question::class, 'next_question_id');
    }
}
```

#### **2.4. Модель `UserTestResult`**

Откройте файл `app/Models/UserTestResult.php`:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class UserTestResult extends Model
{
    use HasFactory;

    protected $fillable = ['user_id', 'test_id', 'total_score', 'interpretation', 'recommendations', 'completed_at'];

    protected $dates = ['completed_at'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function test()
    {
        return $this->belongsTo(Test::class);
    }

    public function userAnswers()
    {
        return $this->hasMany(UserAnswer::class);
    }
}
```

#### **2.5. Модель `UserAnswer`**

Откройте файл `app/Models/UserAnswer.php`:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class UserAnswer extends Model
{
    use HasFactory;

    protected $fillable = ['user_test_result_id', 'question_id', 'selected_option_ids', 'points_earned'];

    protected $casts = [
        'selected_option_ids' => 'array',
    ];

    public function userTestResult()
    {
        return $this->belongsTo(UserTestResult::class);
    }

    public function question()
    {
        return $this->belongsTo(Question::class);
    }
}
```

---

### **Шаг 3: Реализация административной панели для создания тестов**

Поскольку только администратор с `user_id = 1` может создавать тесты, нам нужно защитить соответствующие маршруты и контроллеры.

#### **3.1. Создание контроллера для администрирования тестов**

Выполните команду:

```bash
php artisan make:controller Admin/TestController --resource
```

Это создаст `TestController` с методами для CRUD операций.

#### **3.2. Настройка маршрутов**

В файле `routes/web.php` добавьте следующие маршруты внутри группы с middleware `auth`:

```php
use App\Http\Controllers\Admin\TestController;

Route::middleware(['auth', 'isAdmin'])->group(function () {
    Route::resource('admin/tests', TestController::class);
});
```

#### **3.3. Создание middleware `isAdmin`**

Выполните команду:

```bash
php artisan make:middleware IsAdmin
```

Откройте файл `app/Http/Middleware/IsAdmin.php` и реализуйте проверку:

```php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class IsAdmin
{
    public function handle(Request $request, Closure $next)
    {
        if (auth()->user() && auth()->user()->id == 1) {
            return $next($request);
        }

        abort(403, 'Access denied');
    }
}
```

Зарегистрируйте middleware в файле `app/Http/Kernel.php` в массиве `$routeMiddleware`:

```php
protected $routeMiddleware = [
    // ...
    'isAdmin' => \App\Http\Middleware\IsAdmin::class,
];
```

#### **3.4. Реализация методов в `TestController`**

Далее необходимо реализовать методы в `TestController` для отображения форм создания и редактирования тестов, а также сохранения данных в базе.

Пример реализации метода `create` для отображения формы создания теста:

```php
public function create()
{
    return view('admin.tests.create');
}
```

Метод `store` для сохранения нового теста:

public function store(Request $request)
{
    // Валидация входных данных
    $validatedData = $request->validate([
        'title' => 'required|string|max:255',
        'description' => 'nullable|string',
        'seo_title' => 'nullable|string|max:255',
        'seo_description' => 'nullable|string',
    ]);

    // Создание нового теста
    $test = Test::create($validatedData);

    // Перенаправление на страницу списка тестов с сообщением об успехе
    return redirect()->route('tests.index')->with('success', 'Тест успешно создан.');
}
```

Метод `index` для отображения списка тестов:

```php
public function index()
{
    $tests = Test::all();
    return view('admin.tests.index', compact('tests'));
}
```

Метод `edit` для отображения формы редактирования теста:

```php
public function edit(Test $test)
{
    return view('admin.tests.edit', compact('test'));
}
```

Метод `update` для сохранения изменений теста:

```php
public function update(Request $request, Test $test)
{
    // Валидация входных данных
    $validatedData = $request->validate([
        'title' => 'required|string|max:255',
        'description' => 'nullable|string',
        'seo_title' => 'nullable|string|max:255',
        'seo_description' => 'nullable|string',
    ]);

    // Обновление теста
    $test->update($validatedData);

    // Перенаправление на страницу списка тестов с сообщением об успехе
    return redirect()->route('tests.index')->with('success', 'Тест успешно обновлен.');
}
```

Метод `destroy` для удаления теста:

```php
public function destroy(Test $test)
{
    $test->delete();
    return redirect()->route('tests.index')->with('success', 'Тест успешно удален.');
}
```

---

#### **3.5. Создание представлений (views) для администратора**

Теперь нам нужно создать представления для отображения форм и списка тестов.

**Создайте каталог для административных представлений:**

Создайте папку `resources/views/admin/tests`.

---

### **3.5.1. Представление списка тестов `index.blade.php`**

Файл: `resources/views/admin/tests/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Список тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if(session('success'))
                <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
                    {{ session('success') }}
                </div>
            @endif

            <div class="mb-4">
                <a href="{{ route('tests.create') }}" class="bg-blue-500 text-white px-4 py-2 rounded">
                    Создать новый тест
                </a>
            </div>

            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Название</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($tests as $test)
                            <tr>
                                <td class="border px-6 py-4">{{ $test->id }}</td>
                                <td class="border px-6 py-4">{{ $test->title }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('tests.edit', $test) }}" class="text-blue-500">
                                        Редактировать
                                    </a>
                                    <form action="{{ route('tests.destroy', $test) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот тест?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">
                                            Удалить
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($tests->isEmpty())
                            <tr>
                                <td colspan="3" class="px-6 py-4 text-center">
                                    Тесты не найдены.
                                </td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>

        </div>
    </div>
</x-app-layout>
```


**3.5.2. Представление создания теста `create.blade.php`**

Файл: `resources/views/admin/tests/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Создать новый тест') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('tests.store') }}" method="POST" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Название теста</label>
                    <input type="text" name="title" value="{{ old('title') }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Описание</label>
                    <textarea name="description" class="w-full px-4 py-2 border rounded">{{ old('description') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Заголовок</label>
                    <input type="text" name="seo_title" value="{{ old('seo_title') }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Описание</label>
                    <textarea name="seo_description" class="w-full px-4 py-2 border rounded">{{ old('seo_description') }}</textarea>
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('tests.index') }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

---

### **3.5.3. Представление редактирования теста `edit.blade.php`**

Файл: `resources/views/admin/tests/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать тест') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('tests.update', $test) }}" method="POST" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Название теста</label>
                    <input type="text" name="title" value="{{ old('title', $test->title) }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Описание</label>
                    <textarea name="description" class="w-full px-4 py-2 border rounded">{{ old('description', $test->description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Заголовок</label>
                    <input type="text" name="seo_title" value="{{ old('seo_title', $test->seo_title) }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Описание</label>
                    <textarea name="seo_description" class="w-full px-4 py-2 border rounded">{{ old('seo_description', $test->seo_description) }}</textarea>
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить изменения</button>
                    <a href="{{ route('tests.index') }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

---

### **3.6. Создание форм для добавления вопросов и ответов**

Чтобы администратор мог добавлять вопросы и варианты ответов к тестам, необходимо реализовать соответствующие формы и функционал.

#### **3.6.1. Обновление контроллера `TestController`**

Добавим методы для управления вопросами и ответами внутри `TestController` или создадим отдельный контроллер для вопросов, например, `QuestionController`. Для ясности и лучшей организации кода рекомендуется создать отдельный контроллер.

**Создание контроллера `QuestionController`:**

```bash
php artisan make:controller Admin/QuestionController --resource
```

#### **3.6.2. Настройка маршрутов для вопросов**

В файле `routes/web.php` добавьте маршруты для управления вопросами:

```php
use App\Http\Controllers\Admin\QuestionController;

Route::middleware(['auth', 'isAdmin'])->group(function () {
    // Маршруты для тестов
    Route::resource('admin/tests', TestController::class);
    
    // Маршруты для вопросов, вложенные в тесты
    Route::resource('admin/tests.questions', QuestionController::class);
});
```

#### **3.6.3. Реализация методов в `QuestionController`**

**Метод `create` для добавления вопроса к тесту:**

```php
public function create(Test $test)
{
    return view('admin.questions.create', compact('test'));
}
```

**Метод `store` для сохранения нового вопроса:**

```php
public function store(Request $request, Test $test)
{
    // Валидация входных данных
    $validatedData = $request->validate([
        'question_text' => 'required|string',
        'question_image' => 'nullable|image',
        'question_type' => 'required|in:single_choice,multiple_choice',
        'order' => 'nullable|integer',
    ]);

    // Обработка загрузки изображения (если есть)
    if ($request->hasFile('question_image')) {
        $path = $request->file('question_image')->store('questions', 'public');
        $validatedData['question_image'] = $path;
    }

    // Создание вопроса
    $test->questions()->create($validatedData);

    return redirect()->route('tests.edit', $test)->with('success', 'Вопрос успешно добавлен.');
}
```

**Методы `edit`, `update`, `destroy` реализуются аналогично для редактирования и удаления вопросов.**

### **3.6.4. Создание представлений для вопросов**

**Создайте каталог:** `resources/views/admin/questions`

**Представление создания вопроса `create.blade.php`:**

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('tests.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить вопрос</button>
                    <a href="{{ route('tests.edit', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

---

### **3.6.4. Создание представлений для вопросов**

**Создайте каталог:** `resources/views/admin/questions`

#### **Представление списка вопросов `index.blade.php`**

Файл: `resources/views/admin/questions/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопросы теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if(session('success'))
                <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
                    {{ session('success') }}
                </div>
            @endif

            <div class="mb-4">
                <a href="{{ route('tests.questions.create', $test) }}" class="bg-blue-500 text-white px-4 py-2 rounded">
                    Добавить новый вопрос
                </a>
            </div>

            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Тип вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($questions as $question)
                            <tr>
                                <td class="border px-6 py-4">{{ $question->id }}</td>
                                <td class="border px-6 py-4">{{ $question->question_text }}</td>
                                <td class="border px-6 py-4">{{ $question->question_type == 'single_choice' ? 'Одиночный выбор' : 'Множественный выбор' }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('tests.questions.edit', [$test, $question]) }}" class="text-blue-500">
                                        Редактировать
                                    </a>
                                    <form action="{{ route('tests.questions.destroy', [$test, $question]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот вопрос?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">
                                            Удалить
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($questions->isEmpty())
                            <tr>
                                <td colspan="4" class="px-6 py-4 text-center">
                                    Вопросы не найдены.
                                </td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>

        </div>
    </div>
</x-app-layout>
```

#### **Представление редактирования вопроса `edit.blade.php`**

Файл: `resources/views/admin/questions/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вопрос для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('tests.questions.update', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text', $question->question_text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                    @if($question->question_image)
                        <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type', $question->question_type) == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type', $question->question_type) == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order', $question->order) }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить изменения</button>
                    <a href="{{ route('tests.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```


### **Шаг 4: Реализация пользовательского интерфейса для прохождения тестов**

Теперь, когда у нас есть административный функционал для создания и управления тестами, нам нужно создать интерфейс для пользователей, чтобы они могли проходить тесты.

#### **4.1. Настройка маршрутов для пользовательского интерфейса**

В файле `routes/web.php` добавьте маршруты для отображения списка тестов и прохождения тестов:

```php
use App\Http\Controllers\TestController;
use App\Http\Controllers\QuestionController;

Route::middleware('auth')->group(function () {
    Route::get('tests', [TestController::class, 'index'])->name('user.tests.index');
    Route::get('tests/{test}', [TestController::class, 'show'])->name('user.tests.show');
    Route::post('tests/{test}/start', [QuestionController::class, 'start'])->name('user.tests.start');
    Route::get('tests/{test}/questions/{question}', [QuestionController::class, 'show'])->name('user.questions.show');
    Route::post('tests/{test}/questions/{question}', [QuestionController::class, 'answer'])->name('user.questions.answer');
});
```

#### **4.2. Создание контроллеров для прохождения тестов**

Мы будем использовать те же контроллеры `TestController` и `QuestionController`, но добавим в них методы для отображения и обработки пользовательского интерфейса.

**Обновите `TestController`:**

```php
namespace App\Http\Controllers;

use App\Models\Test;
use Illuminate\Http\Request;

class TestController extends Controller
{
    public function index()
    {
        $tests = Test::all();
        return view('user.tests.index', compact('tests'));
    }

    public function show(Test $test)
    {
        return view('user.tests.show', compact('test'));
    }
}
```

**Добавьте методы в `QuestionController`:**

```php
namespace App\Http\Controllers;

use App\Models\Test;
use App\Models\Question;
use App\Models\UserTestResult;
use App\Models\UserAnswer;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function start(Request $request, Test $test)
    {
        // Создание записи о прохождении теста
        $userTestResult = UserTestResult::create([
            'user_id' => auth()->id(),
            'test_id' => $test->id,
        ]);

        // Перенаправление к первому вопросу
        return redirect()->route('user.questions.show', ['test' => $test->id, 'question' => $test->questions()->first()->id]);
    }

    public function show(Test $test, Question $question)
    {
        return view('user.questions.show', compact('test', 'question'));
    }

    public function answer(Request $request, Test $test, Question $question)
    {
        // Валидация ответа
        $validatedData = $request->validate([
            'selected_option_ids' => 'required|array',
        ]);

        // Сохранение ответа пользователя
        UserAnswer::create([
            'user_test_result_id' => $request->user_test_result_id,
            'question_id' => $question->id,
            'selected_option_ids' => $validatedData['selected_option_ids'],
            'points_earned' => $this->calculatePoints($question, $validatedData['selected_option_ids']),
        ]);

        // Перенаправление к следующему вопросу или завершение теста
        $nextQuestion = $this->getNextQuestion($test, $question, $validatedData['selected_option_ids']);
        if ($nextQuestion) {
            return redirect()->route('user.questions.show', ['test' => $test->id, 'question' => $nextQuestion->id]);
        } else {
            return redirect()->route('user.tests.result', ['test' => $test->id, 'result' => $request->user_test_result_id]);
        }
    }

    private function calculatePoints(Question $question, array $selectedOptionIds)
    {
        // Рассчитать количество баллов за ответ
        return AnswerOption::whereIn('id', $selectedOptionIds)->sum('point_value');
    }

    private function getNextQuestion(Test $test, Question $question, array $selectedOptionIds)
    {
        // Определить следующий вопрос на основе условной логики
        $nextQuestionId = AnswerOption::whereIn('id', $selectedOptionIds)->pluck('next_question_id')->first();
        if ($nextQuestionId) {
            return Question::find($nextQuestionId);
        }

        return $test->questions()->where('order', '>', $question->order)->first();
    }
}
```

#### **4.3. Создание представлений для пользовательского интерфейса**

**Создайте каталог для пользовательских представлений:**

Создайте папку `resources/views/user/tests`.

**4.3.1. Представление списка тестов `index.blade.php`:**

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Доступные тесты') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
                    @foreach($tests as $test)
                        <div class="bg-gray-100 p-4 rounded-lg shadow-md">
                            <h3 class="text-lg font-semibold">{{ $test->title }}</h3>
                            <p class="mt-2">{{ $test->description }}</p>
                            <a href="{{ route('user.tests.show', $test) }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                                Пройти тест
                            </a>
                        </div>
                    @endforeach
                    @if($tests->isEmpty())
                        <div class="col-span-full text-center text-gray-500">
                            Тесты не найдены.
                        </div>
                    @endif
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
```

**4.3.2. Представление страницы теста `show.blade.php`:**

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">{{ $test->title }}</h3>
                <p class="mt-2">{{ $test->description }}</p>
                <form action="{{ route('user.tests.start', $test) }}" method="POST" class="mt-4">
                    @csrf
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">
                        Начать тест
                    </button>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>
```

**4.3.3. Представление вопроса `show.blade.php`:**

Создайте каталог для пользовательских представлений вопросов: `resources/views/user/questions`.

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопрос') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">{{ $question->question_text }}</h3>
                @if($question->question_image)
                    <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-4">
                @endif
                <form action="{{ route('user.questions.answer', ['test' => $test, 'question' => $question]) }}" method="POST" class="mt-4">
                    @csrf
                    @foreach($question->answerOptions as $option)
                        <div class="mb-4">
                            <input type="{{ $question->question_type == 'single_choice' ? 'radio' : 'checkbox' }}" name="selected_option_ids[]" value="{{ $option->id }}" id="option_{{ $option->id }}">
                            <label for="option_{{ $option->id }}">{{ $option->option_text }}</label>
                            @if($option->option_image)
                                <img src="{{ asset('storage/' . $option->option_image) }}" class="mt-2">
                            @endif
                        </div>
                    @endforeach
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">
                        Далее
                    </button>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>
```

### **4.4. Отображение результатов теста**

Добавьте маршрут для отображения результатов теста:

```php
Route::get('tests/{test}/results/{result}', [TestController::class, 'result'])->name('user.tests.result');
```

Добавьте метод `result` в `TestController`:

```php
public function result(Test $test, UserTestResult $result)
{
    return view('user.tests.result', compact('test', 'result'));
}
```

#### **4.4.1. Создание представления результатов теста `result.blade.php`**

Файл: `resources/views/user/tests/result.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Результаты теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">Общий балл: {{ $result->total_score }}</h3>
                <p class="mt-2">Интерпретация: {{ $result->interpretation }}</p>
                <p class="mt-2">Рекомендации: {{ $result->recommendations }}</p>

                <h4 class="text-md font-semibold mt-4">Детальные ответы:</h4>
                <ul class="list-disc list-inside mt-2">
                    @foreach($result->userAnswers as $answer)
                        <li>
                            Вопрос: {{ $answer->question->question_text }}<br>
                            Ваши ответы:
                            <ul class="list-disc list-inside ml-4">
                                @foreach($answer->selected_option_ids as $optionId)
                                    <li>{{ \App\Models\AnswerOption::find($optionId)->option_text }}</li>
                                @endforeach
                            </ul>
                            Полученные баллы: {{ $answer->points_earned }}
                        </li>
                    @endforeach
                </ul>

                <a href="{{ route('user.tests.index') }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                    Вернуться к списку тестов
                </a>
            </div>
        </div>
    </div>
</x-app-layout>
```

### **Шаг 5: Реализация личного кабинета пользователя**

Для отображения списка пройденных тестов и профиля пользователя нам нужно создать дополнительные маршруты и контроллеры.


**У меня уже реализован ЛК пользователя, до этого я делал функционал диагностик. Надо встроить в этот ЛК**


Route::get('/dashboard', [DiagController::class, 'dashboard'])->middleware(VerifyTarif::class)->name('dashboard');


## Уже реализованный код

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Session;
use App\Models\SessionType;
use App\Models\UserSession;
use Illuminate\Support\Arr;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class DiagController extends Controller
{

    public function present(int $id)
    {
        if ($id == 0) {
            $list = [100, 99, 81, 109, 110, 111];

            $id = Arr::random($list); 
        }


        $data = Session::getPresent($id);
        $data['listsessions'] = Session::with('type')->where('present', 1)->get();
        $data['id'] = $id;

        return [
            'jslist'=> $data['lslist'],
            'html'=>view('diag.present', $data)->render()
        ];
        
    }

    public function user_data($id, $key)
    {
        $result = ['success'=>false];
        if (empty($id) || empty($key) || md5('dreycorp1'.$id) != $key) {
            return $result;
        }

        $user = User::find($id);
        if (empty($user)) {
            return $result;
        }
        
        $result = ['success'=>true];
        $result['data']['balls'] = $user->coin;
        return $result;
    }

    public function balls()
    {
        $is_guest = !Auth::check();
        $data['is_guest'] = $is_guest;
        $data['coin'] = 100;

        if (!$is_guest)
        {
            $user = Auth::user();
            $data['coin'] = $user->coin;
        }

        return view('about-balls', $data);
    }

    public function dashboard()
    {
        $is_guest = !Auth::check();
        $data['is_guest'] = $is_guest;

        $data['diag_cnt'] = 0;
        $data['reg_cnt'] = 0;
        $data['coin'] = 100;

        if (!$is_guest)
        {
            /** 
            * @var $user App\Models\User
            */
            $user = Auth::user();
            $data['reg_cnt'] = $user->dateDiff();
            $data['diag_cnt'] = Session::cnt()['diag'];
            $data['coin'] = $user->coin;
        }

        return view('dashboard', $data);
    }

    public function index()
    {
        $data = [];

        return view('diag.index', $data);
    }

    public function steps(Request $request, Session $session)
    {
        $data = [];

        if ($session->user_id != $request->user()->id) {
            return abort(403);      
        }

        $data['session'] = $session;

        return view('diag.steps', $data)->render();
    }

    public function tariffs()
    {
        return view('tariffs', []);
    }

    public function shared($id, $key)
    {

        if (empty($id) || empty($key) || md5('dreycorp'.$id) != $key) {
            return abort(403);
        }

        $dd = explode('-',$id, 3);

        if (count($dd) != 3) {
            return abort(403);
        }

        $id = (int)$dd[0];
        $user_id = (int)$dd[1];
        $step_id = (int)$dd[2];

        $user_session = UserSession::with('step')->findOrFail($id);
        $session = Session::with('type')->find($user_session->session_id);

        if ($user_session->user_id != $user_id || $user_session->step_id != $step_id){
            return abort(403);
        }

        $data['item'] = $user_session;
        $data['session_data'] = $session->data;
        $data['session'] = $session;

        $vdata = $user_session->step->data;

        $vdata['content'] = my_replace($user_session->step->getDataContentSavedVars($user_session->vars), $data['session_data'] , '', $session);
        $vdata['form'] = $user_session->data;
        $data['vdata'] = $vdata;

        return view('diag.shared', $data);
    }


    public function formasha() {
        $data = [];

        return view('diag.formasha', $data);
    }

}


## dashboard.blade.php

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            Доска
        </h2>
    </x-slot>
    
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="grid grid-cols-2 md:grid-cols-3 mb-3 gap-4">
                <div class=" p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        Пройдено
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            <a class="underline" href="{{ route('session_history') }}">@plural($diag_cnt , 'сессия')</a>
                        </p>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-cyan-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>  
                    </div>
                </div>
                <div class=" p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        В системе
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            @plural($reg_cnt , 'день')
                            
                        </p>
                        <svg class="h-10 w-10 text-amber-700" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path></svg> 
                    </div>
                </div>
                <div class="col-span-2 md:col-span-1 p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        Бонусы <a class="text-sm ml-3 underline decoration-dotted" href="{{ route('balls') }}">подробнее | куда протратить</a>
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            <span class="text-white rounded-xl bg-green-500 px-3">+ @plural($coin , 'балл')</span>
                        </p>
                        <svg class="h-10 w-10 text-red-700" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path></svg>
                    </div>
                </div>
            </div>
        </div>
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
            <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                Диагностики
            </h2>
        </div>
        @livewire('session-list',['group'=>2])
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
            <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                Проработки
            </h2>
        </div>
        @livewire('session-list',['group'=>1])
    </div>
    @include('layouts.footer')
</x-app-layout>

## shared.blade.php

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            Результаты "{{ $session->type->name }}"
        </h2>
    </x-slot>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <div>
                    @include('diag.part.shared', $vdata) 
                </div>
            </div>
        </div>
    </div>
    @include('layouts.footer')
</x-app-layout>

## steps.blade.php

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ $session->type->name }} "{{ $session->opis }}"
        </h2>
    </x-slot>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            @livewire('steps',['sessionid'=>$session->id])
            @livewire('step-form',['sessionid'=>$session->id]) 
        </div>
    </div>

    <script>
        scrollDown ();
    </script>
</x-app-layout>

## index.blade.php

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            Диагностики
        </h2>
    </x-slot>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                    Список диагностик
                </h2>
            </div>
                @livewire('session-list',['group'=>2])
        </div>
    </div>
</x-app-layout>

## part/present.blade.php

<div  class=" p-2 shadow-lg bg-white rounded-lg">
        <div class="mb-2 flex items-start">
            <div class="mt-1 mx-2">
                <svg fill="none" class="w-6 h-6 text-born-blue2" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"></path>
                  </svg>
            </div>
            <div>{!! $content !!}</div>
        </div>
    @isset($checks)
    <div class="my-3 mx-10">
        @if (isset($sitem->data['checks']))
            @foreach ($checks as $item)
            <div class="my-2 flex items-center">
                <input type="checkbox" id="ch-{{$loop->index}}" @checked(array_key_exists($loop->index,$sitem->data['checks'] ) )  />
                <label @class(['w-full', 'active-radio' => array_key_exists($loop->index,$sitem->data['checks'] ) ])  for="ch-{{$loop->index}}">{{ $item['name']}}</label>
            </div>
            @endforeach

        @else
        @foreach ($checks as $item)
            <div class="my-2 flex items-center">
                <input type="checkbox" id="ch-{{$loop->index}}"   />
                <label class="w-full" for="ch-{{$loop->index}}">{{ $item['name']}}</label>
            </div>
            @endforeach
        @endif

        <div id='types_str-{{$sitem->id}}'>
            <span>1231231 23123123 123123123</span> 
        </div>

        <div class="flex items-center p-2 flex-wrap bg-born-middle rounded overflow-hidden mt-4 hidden">
            <div class="flex-1">
                <div class="relative">
                    <div class="absolute flex items-center h-full">
                        <svg fill="none" class="pl-2 w-7 h-7 text-born-brown" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
                        </svg>
                    </div>
                    
                    <div class="bg-born-white border h-min h-7 rounded-sm pl-7 outline-none ring ring-born-white flex items-center overflow-hidden">
                    <span id='types_cont-{{$sitem->id}}'></span>
                    </div>
                </div>
            </div>
        </div> 

    </div>
    @endisset 
    @isset($radio)
    <div class="my-3 mx-10">
        @foreach ($radio as $item)
        <div class="my-2 flex items-center">
            <input type="radio" id="rad-{{$loop->index}}" name="radio" value="{{$loop->index + 1}}" @checked($sitem->data['radio'] == $loop->index + 1)    />
            <label @class(['w-full', 'active-radio' => $sitem->data['radio'] == $loop->index + 1])  for="rad-{{$loop->index}}">{{ $item['name']}}</label>
        </div>
        @endforeach

        <div id='types_str-{{$sitem->id}}'>
            <span>{{ $radio[$sitem->data['radio']-1]['name']}}</span>
        </div>

        <div class="flex items-center p-2 flex-wrap bg-born-middle rounded overflow-hidden mt-4 hidden">
            <div class="flex-1">
                <div class="relative">
                    <div class="absolute flex items-center h-full">
                        <svg fill="none" class="pl-2 w-7 h-7 text-born-brown" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
                        </svg>
                    </div>
                    
                    <div class="bg-born-white border h-min h-7 rounded-sm pl-7 outline-none ring ring-born-white flex items-center overflow-hidden">
                    <span id='types_cont-{{$sitem->id}}'></span>
                    </div>
                </div>
            </div>
        </div> 

    </div>
    @endisset
    @isset($btns)
    <div class="my-3 border-b">
        @foreach ($btns as $btn)
        <div class="ml-7 my-3 flex items-start justify-between">
            <div class="mx-2">
                <svg fill="none" class="w-5 h-5 text-born-brown" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <div class="flex items-start pb-2 flex-wrap flex-1">
                <div class="basis-full md:basis-1/2 text-born-brown text-sm">{{ $btn['label'] }}</div> 
                <a href="#" class="btn-add" >{{ $btn['name'] }}</a>
            </div>  
        </div>
        @endforeach

        <div id='types_str-{{$sitem->id}}'>
            <span>{{$btn['name']}}</span>
        </div>

        <div class="flex items-center p-2 flex-wrap bg-born-middle rounded overflow-hidden mt-4 hidden">
            <div class="flex-1">
                <div class="relative">
                    <div class="absolute flex items-center h-full">
                        <svg fill="none" class="pl-2 w-7 h-7 text-born-brown" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
                        </svg>
                    </div>
                    
                    <div class="bg-born-white border h-min h-7 rounded-sm pl-7 outline-none ring ring-born-white flex items-center overflow-hidden">
                    <span id='types_cont-{{$sitem->id}}'></span>
                    </div>
                </div>
            </div>
        </div> 
    </div>
    @endisset
    @if( isset($input))
    <div>    
        <div id='types_str-{{$sitem->id}}'>
            <span>{{$sitem->data['answer']}}</span>
        </div>
        <div class="flex items-center p-2 flex-wrap bg-born-middle rounded overflow-hidden mt-4">
            @isset($input['label'])
               <div class="basis-full mb-2 md:mb-0 md:basis-1/3 md:mr-2  text-born-white">{!! $input['label'] !!}</div> 
            @endisset
            
            <div class="flex-1">
                <div class="relative">
                    <div class="absolute flex items-center h-full">
                        <svg fill="none" class="pl-2 w-7 h-7 text-born-brown" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
                        </svg>
                    </div>
                    
                    <div class="bg-born-white border h-min h-7 rounded-sm pl-7 outline-none ring ring-born-white flex items-center overflow-hidden">
                    <span id='types_cont-{{$sitem->id}}'></span>
                    </div>
                </div>
            </div>
        </div> 
    </div>
    @else
    <div class="hidden">

    
    <div id='types_str-{{$sitem->id}}'>
        <span>123 123 123 123 123</span>
    </div>
    <span id='types_cont-{{$sitem->id}}'></span>
</div>
    @endif

</div>
@if ($is_ended) 

<div class="p-4 mt-4 bg-born-blue rounded">
    <h4 class="mb-3">Ссылка на результаты</h4>
    <p class="">Вы можете переслать ссылку перед индивидуальной консультацией.<br> Можете опубликовать ее в интернете и передать занокомым. 
        Данные по ссылке будут доступны всем у кого она есть. 
        <br> Ссылка не раскрывает вас, историю ваших ответов, содержит только результаты.</p>
    <div class="p-3 font-semibold bg-white text-base mt-3 rounded select-all hover:select-all">{{ $shared_link }}</div>

    <div class="text-sm font-medium mt-2">Перейти <a href="{{ $shared_link }}" target="_blank">по ссылке</a></div>
</div>

<div class="p-4 mt-4 bg-born-blue2 rounded">
    <h6 class="text-born-white">Все сессии с историей вопросов и ответов всегда находятся в разделе "<a style="color: rgb(247 249 251 / var(--tw-text-opacity))" class="text-born-white underline" href="{{ route('session_history') }}">История сессий</a>". Этот раздел доступен также в верхнем меню. В разделе историй можно увидеть все ваши сессии, просмотреть историю вопросов и ответов, а также продолжить сессии, которые не были завершены.</h6>
</div>
@endif

## part/step.blade.php

<form action="{{ route('session_step', ['session'=>$session->id]) }}" method="post">
    @if (isset($form['chuvstvo']))
       <input type="hidden" name="chuvstvo_before" id="" value="{{ $form['chuvstvo']}}"/> 
       <div class="p-2 bg-rose-200 rounded border-b-2 border-rose-800">
        Чувство / реакция: {{ $form['chuvstvo']}}
     </div>
    @endif
    <input type="hidden" name="step" id="" value="{{ $form['step']}}"/> 
    <div class="flex items-center p-2 flex-wrap bg-teal-100 rounded-b border-b-2 border-teal-900">
        <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Во сколько лет?</div>
        <div class="md:ml-2 flex-1"><input type="text" name="years" id=""/></div>
    </div>
    @if (false)
    <div class="flex items-start flex-col p-2 md:flex-row bg-blue-100">
        <div class="basis-full  mb-2 md:mb-0 md:basis-1/3">Чувство "{{ @$form['chuvstvo']}}" возникло после чего-то или перед чем-то?</div>
        <div class="md:ml-2 flex flex-col">
            <div class="flex items-center mb-4">
                <input checked type="radio" id="" name="trigger_is_before" class="radio-toggle" data-show="#trigger_is_after" data-hide="#trigger_is_before" value="0">
                <label for="dewey">После чего-то</label>
            </div> 
            <div class="flex items-center">
                <input type="radio" id="" name="trigger_is_before" class="radio-toggle" data-show="#trigger_is_before" data-hide="#trigger_is_after" value="1"
                    >
                <label for="huey">Перед чем-то</label>
            </div>
        </div>
    </div>
    <div id="trigger_is_before" class="hidden">
        <div class="flex items-center p-2 flex-wrap bg-blue-100 rounded-b border-b-2 border-blue-900">
            <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Перед чем возникло чувство</div>
            <div class="md:ml-2 flex-1"><input type="text" name="trigger_before" id=""/></div>
        </div> 
    </div>
    <div id="trigger_is_after">    
        <div class="flex items-center p-2 flex-wrap bg-blue-100 rounded-b border-b-2 border-blue-900">
            <div class="basis-full mb-2 md:mb-0 md:basis-1/3">После чего возникло чувство</div>
            <div class="md:ml-2 flex-1"><input type="text" name="trigger_after" id=""/></div>
        </div> 
    </div>

    @endif
    <div>    
        <div class="flex items-center p-2 flex-wrap bg-blue-100 rounded-b border-b-2 border-blue-900">
            <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Что произошло, раз вы решили чувствовать "{{ @$form['chuvstvo']}}"?</div>
            <div class="md:ml-2 flex-1"><input type="text" class="type_transfer" data-to="#trigger_after_text" name="trigger_after" id=""/></div>
        </div> 
    </div>

    <div class="flex items-center p-2 flex-wrap bg-teal-100 rounded-b border-b-2 border-teal-900">
        <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Какое чувство было в моменте "<span id="trigger_after_text"></span>"?</div>
        <div class="md:ml-2 flex-1"><input type="text" class="type_transfer" data-to=".chuvstvo_text" name="chuvstvo" id=""/></div>
    </div> 
    @if (false)

    <div class="bg-orange-100 rounded-b border-b-2 border-orange-900">
        <div class="flex items-start flex-col p-2 md:flex-row bg-orange-100">
            <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Чувство ощущается в теле?</div>
            <div class="md:ml-2 flex flex-col">
                <div class="flex items-center mb-4">
                    <input type="radio" id="" name="body_is_feel" class="radio-toggle" data-show="#body_is_feel_fied" data-hide="" value="1"
                        checked>
                    <label for="huey">Ощущается</label>
                </div>
                <div class="flex items-center">
                    <input type="radio" id="" name="body_is_feel" class="radio-toggle" data-show="" data-hide="#body_is_feel_fied" value="0">
                    <label for="dewey">Не ощущается</label>
                </div>
            </div>
        </div>
        <div id="body_is_feel_fied">
            <div class="flex items-center p-2 flex-wrap ">
                <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Где чувство "<span class="chuvstvo_text"></span>" ощущается в теле?</div>
                <div class="md:ml-2 flex-1"><input type="text" name="body" id=""/></div>
            </div>
        </div>
    </div>
    @endif
    <div class="flex items-center p-2 flex-wrap bg-teal-100 rounded-b border-b-2 border-teal-900">
        <div class="basis-full mb-2 md:mb-0 md:basis-1/3">К кому или к чему относится чувство "<span class="chuvstvo_text"></span>"?</div>
        <div class="md:ml-2 flex-1"><input type="text" name="chuvstvo_referer" id=""/></div>
    </div>
    <div class="flex items-center p-2 flex-wrap bg-orange-100 rounded-b border-b-2 border-orange-900">
        <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Где чувство "<span class="chuvstvo_text"></span>" ощущается в теле?</div>
        <div class="md:ml-2 flex-1"><input type="text" name="body" id=""/></div>
    </div>
    <div class="flex items-start flex-col p-2 md:flex-row bg-yellow-200 rounded-b border-b-2 border-yellow-900">
        <div class="basis-full mb-2 md:mb-0 md:basis-1/3">Чувство "<span class="chuvstvo_text"></span>" возникло впервые в этой ситуации?</div>
        <div class="md:ml-2 flex flex-col">
            <div class="flex items-center mb-4">
                <input type="radio" id="" name="chuvstvo_is_first" value="1"
                    >
                <label for="huey">Впервые</label>
            </div>
            <div class="flex items-center">
                <input type="radio" id="" name="chuvstvo_is_first" value="0" checked>
                <label for="dewey">Уже было</label>
            </div>
        </div>
    </div>
    <div class="flex items-center">
        <div><button data-cont="#cont"  class="btn-submit">Далее</button></div>
    </div>
</form>

## part/shared.blade


<div class="flex p-4 bg-white rounded mb-2 flex-wrap items-center">
    <div class="flex mb-2 sm:mb-0">
        <div class="self-start">
            <svg fill="none"  class="h-6 w-6 text-born-blue2 mx-2" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z"></path>
              </svg>
        </div>
        <div class="flex flex-col">
            <div class="text-base mb-2 text-slate-900">{!! $content !!}</div>
            @isset($input)
              <div class="px-2 py-1 rounded bg-born-brown text-born-white text-base">{{ $form['answer']}}</div>  
            @endisset
            @isset($checks)
            @if (!empty($form['checks']))

                @foreach ($form['checks'] as $num=>$item)
                    <div class="my-2 text-born-white flex items-center">
                        <svg fill="none" class="w-5 h-5 mr-2" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        {{$checks[$num]['name']}}
                    </div>
                @endforeach
                            
            @endif
            @if ($form['answer'] != 'empty')
                <div class="px-2 py-1 rounded bg-born-white text-sm">{{ $form['answer']}}</div> 
            @endif
            @endisset
        </div> 
    </div>
</div>

## layout/app.blade.php

<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">

        <title>@if (isset($title)){{ $title }} - Пахоруков Андрей@else
            Самодиагностика психологических проблем. Пахоруков Андрей@endif</title>
        <meta name="yandex-verification" content="26fb8448022f2add" />
        <meta name="description" content="@if (isset($description)){{ $description }} - @endif
        Dreycorp - бесплатная система для самодиогностики и самопроработки психологических проблем от Пахорукова Андрея"> 
        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap" rel="stylesheet">
        <!-- Favicon -->
        <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png">
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
        <link rel="manifest" href="/favicon/site.webmanifest">
        <link rel="mask-icon" href="/favicon/safari-pinned-tab.svg" color="#5bbad5">
        <meta name="msapplication-TileColor" content="#da532c">
        <meta name="theme-color" content="#ffffff">
        
        <link rel="icon" href="/favicon/favicon_big.png" type="image/png">
    
        <!-- Scripts -->
        @vite(['resources/js/app.js'])
        
        @livewireStyles
        <script src="/js/main.js"></script>
        <link rel="stylesheet" href="/css/style.css" />
        @stack('css')
    </head>
    <body class="font-sans antialiased">

        <div class="min-h-screen bg-born-white">
            @include('layouts.navigation')

            <!-- Page Heading -->
            @if (isset($header))
                <header class="bg-white shadow">
                    <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                        {{ $header }}
                    </div>
                </header>
            @endif

            <!-- Page Content -->
            <main>
                {{ $slot }}
            </main>
        </div>
        @livewireScripts
        @stack('scripts')
    </body>
</html>


## layout/navigation.blade.php

<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    <a href="{{ route('dashboard') }}">
                        <x-application-logo class="block h-10 w-auto fill-current text-gray-600" />
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ml-10 sm:flex">
                    <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                        Доска
                    </x-nav-link>
                    <x-nav-link :href="route('diag')" :active="request()->routeIs('diag')">
                        Диагностики
                    </x-nav-link>
                    <x-nav-link :href="route('session')" :active="request()->routeIs('session')">
                        Проработки
                    </x-nav-link>
                    <x-nav-link :href="route('session_history')" :active="request()->routeIs('session_history')">
                        История сессий
                    </x-nav-link>
                    @can('is_admin')    
                        <x-nav-link :href="route('admin')" :active="request()->routeIs('admin')">
                            Админка
                        </x-nav-link> 
                    @endcan

                    @guest
                        <x-nav-link class="bg-lime-100 px-6" :href="route('login')" :active="request()->routeIs('login')">
                            Войти
                        </x-nav-link>
                        <x-nav-link  class="bg-lime-200 px-6"  :href="route('register')" :active="request()->routeIs('register')">
                            Зарегистрироваться
                        </x-nav-link>
                    @endguest
                    
                </div>
            </div>

            <!-- Settings Dropdown -->
            <div class="hidden sm:flex sm:items-center sm:ml-6">
                @auth
                <x-dropdown align="right" width="48">
                    <x-slot name="trigger">
                        <button class="flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out">
                            <div>{{ Auth::user()->name }} </div> <span class="text-white rounded-xl bg-green-500 px-3 text-xs ml-2">+ @plural(Auth::user()->coin , 'балл')</span>

                            <div class="ml-1">
                                <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        </button>
                    </x-slot>

                    <x-slot name="content">
                        <!-- Authentication -->
                        <form method="POST" action="{{ route('logout') }}">
                            @csrf

                            <x-dropdown-link :href="route('logout')"
                                    onclick="event.preventDefault();
                                                this.closest('form').submit();">
                                Выйти
                            </x-dropdown-link>
                        </form>
                    </x-slot>
                </x-dropdown>
                @endauth
                
            </div>

            <!-- Hamburger -->
            <div class="-mr-2 flex items-center sm:hidden">
                <button @click="open = ! open" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{'hidden': open, 'inline-flex': ! open }" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Responsive Navigation Menu -->
    <div :class="{'block': open, 'hidden': ! open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                Доска
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('diag')" :active="request()->routeIs('diag')">
                Диагностики
            </x-responsive-nav-link>
        </div>
        
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('session')" :active="request()->routeIs('session')">
                Проработки
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('session_history')" :active="request()->routeIs('session_history')">
                История сессий
            </x-responsive-nav-link>
        </div>
        @can('is_admin')    
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('admin')" :active="request()->routeIs('admin')">
                Админка
            </x-responsive-nav-link>
        </div>
        @endcan

        @guest
        <div class="pt-2 pb-3 space-y-1 border-t-2">
            <x-responsive-nav-link :href="route('login')" :active="request()->routeIs('login')">
                Войти
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('register')" :active="request()->routeIs('register')">
                Зарегистрироваться
            </x-responsive-nav-link>
        </div>
        @endguest
        <!-- Responsive Settings Options -->
        <div class="pt-4 pb-1 border-t border-gray-200">
            


            @auth
            <div class="px-4">
                <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }} <span class="text-white rounded-xl bg-green-500 px-3 text-xs ml-2">+ @plural(Auth::user()->coin , 'балл')</span></div>
                
                <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
            </div>

            <div class="mt-3 space-y-1">
                <!-- Authentication -->
                <form method="POST" action="{{ route('logout') }}">
                    @csrf

                    <x-responsive-nav-link :href="route('logout')"
                            onclick="event.preventDefault();
                                        this.closest('form').submit();">
                        Выйти
                    </x-responsive-nav-link>
                </form>
            </div>
            @endauth
            
        </div>
    </div>
</nav>

### Встраивание функционала тестов в личный кабинет

Мы будем добавлять функционал тестов в уже существующий личный кабинет. Продолжая с учетом уже реализованного функционала, начнем с добавления необходимых маршрутов и представлений для отображения результатов тестов в личном кабинете.

### **Шаг 5: Встраивание функционала тестов в личный кабинет**

#### **5.1. Настройка маршрутов**

В файле `routes/web.php` добавьте маршруты для отображения списка пройденных тестов и результатов:

```php
use App\Http\Controllers\UserTestResultController;

// Маршруты для личного кабинета
Route::middleware(['auth'])->group(function () {
    Route::get('/dashboard', [DiagController::class, 'dashboard'])->middleware(VerifyTarif::class)->name('dashboard');

    // Маршруты для тестов
    Route::get('tests', [TestController::class, 'index'])->name('user.tests.index');
    Route::get('tests/{test}', [TestController::class, 'show'])->name('user.tests.show');
    Route::post('tests/{test}/start', [QuestionController::class, 'start'])->name('user.tests.start');
    Route::get('tests/{test}/questions/{question}', [QuestionController::class, 'show'])->name('user.questions.show');
    Route::post('tests/{test}/questions/{question}', [QuestionController::class, 'answer'])->name('user.questions.answer');
    Route::get('tests/{test}/results/{result}', [TestController::class, 'result'])->name('user.tests.result');

    // Маршруты для результатов тестов в личном кабинете
    Route::get('profile/tests', [UserTestResultController::class, 'index'])->name('user.tests.results');
    Route::get('profile/tests/{result}', [UserTestResultController::class, 'show'])->name('user.tests.result.show');
});
```

#### **5.2. Создание контроллера `UserTestResultController`**

Создадим контроллер для управления результатами тестов пользователей:

```bash
php artisan make:controller UserTestResultController
```

Добавьте методы `index` и `show` в `UserTestResultController`:

```php
namespace App\Http\Controllers;

use App\Models\UserTestResult;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class UserTestResultController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $testResults = UserTestResult::where('user_id', $user->id)->get();
        return view('profile.tests.index', compact('testResults'));
    }

    public function show(UserTestResult $result)
    {
        $this->authorize('view', $result);
        return view('profile.tests.show', compact('result'));
    }
}
```

#### **5.3. Создание представлений для результатов тестов**

Создайте каталог для представлений:

```sh
mkdir -p resources/views/profile/tests
```

##### **5.3.1. Представление списка результатов тестов `index.blade.php`**

Файл: `resources/views/profile/tests/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Мои результаты тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if($testResults->isEmpty())
                    <p>Вы еще не проходили тесты.</p>
                @else
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50">Название теста</th>
                                <th class="px-6 py-3 bg-gray-50">Общий балл</th>
                                <th class="px-6 py-3 bg-gray-50">Дата прохождения</th>
                                <th class="px-6 py-3 bg-gray-50">Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($testResults as $result)
                                <tr>
                                    <td class="border px-6 py-4">{{ $result->test->title }}</td>
                                    <td class="border px-6 py-4">{{ $result->total_score }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at->format('d.m.Y') }}</td>
                                    <td class="border px-6 py-4">
                                        <a href="{{ route('user.tests.result.show', $result) }}" class="text-blue-500">Просмотреть</a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>
```

##### **5.3.2. Представление результатов теста `show.blade.php`**

Файл: `resources/views/profile/tests/show.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Результаты теста: ') . $result->test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">Общий балл: {{ $result->total_score }}</h3>
                <p class="mt-2">Интерпретация: {{ $result->interpretation }}</p>
                <p class="mt-2">Рекомендации: {{ $result->recommendations }}</p>

                <h4 class="text-md font-semibold mt-4">Детальные ответы:</h4>
                <ul class="list-disc list-inside mt-2">
                    @foreach($result->userAnswers as $answer)
                        <li>
                            Вопрос: {{ $answer->question->question_text }}<br>
                            Ваши ответы:
                            <ul class="list-disc list-inside ml-4">
                                @foreach($answer->selected_option_ids as $optionId)
                                    <li>{{ \App\Models\AnswerOption::find($optionId)->option_text }}</li>
                                @endforeach
                            </ul>
                            Полученные баллы: {{ $answer->points_earned }}
                        </li>
                    @endforeach
                </ul>

                <a href="{{ route('user.tests.results') }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                    Вернуться к списку результатов
                </a>
            </div>
        </div>
    </div>
</x-app-layout>
```

### ### Улучшение меню админки и добавление новых ссылок для управления тестами

Мы модернизируем существующую страницу админки, чтобы сделать её более удобной и добавить новые ссылки для управления тестами.

#### **Обновление представления `index.blade.php`**

Мы создадим секцию с карточками для каждой категории административных функций, включая новые функции для управления тестами.

Файл: `resources/views/admin/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Админка
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Телеграм -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Телеграм</h3>
                    <a href="{{ route('admin_telegram_dashbord') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление Телеграм</a>
                </div>

                <!-- Список страниц -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Список страниц</h3>
                    <a href="{{ route('admin_pagelist') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление страницами</a>
                </div>

                <!-- Пользователи -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Пользователи</h3>
                    <a href="{{ route('admin_users') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление пользователями</a>
                </div>

                <!-- Тарифы -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Тарифы</h3>
                    <a href="{{ route('admin_tariffsession') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление тарифами</a>
                </div>

                <!-- Типы сессий -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Типы сессий</h3>
                    @livewire('admin.add-session-type')
                </div>

                <!-- Тесты -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Тесты</h3>
                    <a href="{{ route('admin.tests.index') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление тестами</a>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
```

#### **Создание маршрутов для админки тестов**

В файле `routes/web.php` добавьте маршруты для управления тестами:

```php
use App\Http\Controllers\Admin\TestController;
use App\Http\Controllers\Admin\QuestionController;

Route::middleware(['auth', 'isAdmin'])->group(function () {
    // Маршруты для тестов и вопросов
    Route::resource('admin/tests', TestController::class)->names([
        'index' => 'admin.tests.index',
        'create' => 'admin.tests.create',
        'store' => 'admin.tests.store',
        'show' => 'admin.tests.show',
        'edit' => 'admin.tests.edit',
        'update' => 'admin.tests.update',
        'destroy' => 'admin.tests.destroy'
    ]);
    
    // Маршруты для вопросов, вложенные в тесты
    Route::resource('admin/tests.questions', QuestionController::class)->names([
        'index' => 'admin.questions.index',
        'create' => 'admin.questions.create',
        'store' => 'admin.questions.store',
        'show' => 'admin.questions.show',
        'edit' => 'admin.questions.edit',
        'update' => 'admin.questions.update',
        'destroy' => 'admin.questions.destroy'
    ]);
});
```

### 1. Добавление ссылок для тестов в главное меню навигации

Откройте файл `resources/views/layouts/navigation.blade.php` и добавьте ссылки для тестов и результатов тестов в меню.

```blade
<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    <a href="{{ route('dashboard') }}">
                        <x-application-logo class="block h-10 w-auto fill-current text-gray-600" />
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ml-10 sm:flex">
                    <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                        Доска
                    </x-nav-link>
                    <x-nav-link :href="route('diag')" :active="request()->routeIs('diag')">
                        Диагностики
                    </x-nav-link>
                    <x-nav-link :href="route('session')" :active="request()->routeIs('session')">
                        Проработки
                    </x-nav-link>
                    <x-nav-link :href="route('session_history')" :active="request()->routeIs('session_history')">
                        История сессий
                    </x-nav-link>
                    <x-nav-link :href="route('user.tests.index')" :active="request()->routeIs('user.tests.index')">
                        Тесты
                    </x-nav-link>
                    <x-nav-link :href="route('user.tests.results')" :active="request()->routeIs('user.tests.results')">
                        Результаты тестов
                    </x-nav-link>
                    @can('is_admin')    
                        <x-nav-link :href="route('admin')" :active="request()->routeIs('admin')">
                            Админка
                        </x-nav-link> 
                    @endcan

                    @guest
                        <x-nav-link class="bg-lime-100 px-6" :href="route('login')" :active="request()->routeIs('login')">
                            Войти
                        </x-nav-link>
                        <x-nav-link  class="bg-lime-200 px-6"  :href="route('register')" :active="request()->routeIs('register')">
                            Зарегистрироваться
                        </x-nav-link>
                    @endguest
                    
                </div>
            </div>

            <!-- Settings Dropdown -->
            <div class="hidden sm:flex sm:items-center sm:ml-6">
                @auth
                <x-dropdown align="right" width="48">
                    <x-slot name="trigger">
                        <button class="flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out">
                            <div>{{ Auth::user()->name }} </div> <span class="text-white rounded-xl bg-green-500 px-3 text-xs ml-2">+ @plural(Auth::user()->coin , 'балл')</span>

                            <div class="ml-1">
                                <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        </button>
                    </x-slot>

                    <x-slot name="content">
                        <!-- Authentication -->
                        <form method="POST" action="{{ route('logout') }}">
                            @csrf

                            <x-dropdown-link :href="route('logout')"
                                    onclick="event.preventDefault();
                                                this.closest('form').submit();">
                                Выйти
                            </x-dropdown-link>
                        </form>
                    </x-slot>
                </x-dropdown>
                @endauth
                
            </div>

            <!-- Hamburger -->
            <div class="-mr-2 flex items-center sm:hidden">
                <button @click="open = ! open" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{'hidden': open, 'inline-flex': ! open }" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Responsive Navigation Menu -->
    <div :class="{'block': open, 'hidden': ! open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                Доска
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('diag')" :active="request()->routeIs('diag')">
                Диагностики
            </x-responsive-nav-link>
        </div>
        
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('session')" :active="request()->routeIs('session')">
                Проработки
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('session_history')" :active="request()->routeIs('session_history')">
                История сессий
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('user.tests.index')" :active="request()->routeIs('user.tests.index')">
                Тесты
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('user.tests.results')" :active="request()->routeIs('user.tests.results')">
                Результаты тестов
            </x-responsive-nav-link>
        </div>
        @can('is_admin')    
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('admin')" :active="request()->routeIs('admin')">
                Админка
            </x-responsive-nav-link>
        </div>
        @endcan

        @guest
        <div class="pt-2 pb-3 space-y-1 border-t-2">
            <x-responsive-nav-link :href="route('login')" :active="request()->routeIs('login')">
                Войти
            </x-responsive-nav-link>
        </div>
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('register')" :active="request()->routeIs('register')">
                Зарегистрироваться
            </x-responsive-nav-link>
        </div>
        @endguest
        <!-- Responsive Settings Options -->
        <div class="pt-4 pb-1 border-t border-gray-200">
            @auth
            <div class="px-4">
                <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }} <span class="text-white rounded-xl bg-green-500 px-3 text-xs ml-2">+ @plural(Auth::user()->coin , 'балл')</span></div>
                <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
            </div>

            <div class="mt-3 space-y-1">
                <!-- Authentication -->
                <form method="POST" action="{{ route('logout') }}">
                    @csrf

                    <x-responsive-nav-link :href="route('logout')"
                            onclick="event.preventDefault();
                                        this.closest('form').submit();">
                        Выйти
                    </x-responsive-nav-link>
                </form>
            </div>
            @endauth
        </div>
    </div>
</nav>
```
### 2. Добавление списка доступных тестов на дашборд

Откройте файл `resources/views/dashboard.blade.php` и добавьте секцию для отображения списка доступных тестов.

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            Доска
        </h2>
    </x-slot>
    
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="grid grid-cols-2 md:grid-cols-3 mb-3 gap-4">
                <div class=" p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        Пройдено
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            <a class="underline" href="{{ route('session_history') }}">@plural($diag_cnt , 'сессия')</a>
                        </p>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-cyan-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>  
                    </div>
                </div>
                <div class=" p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        В системе
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            @plural($reg_cnt , 'день')
                            
                        </p>
                        <svg class="h-10 w-10 text-amber-700" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path></svg> 
                    </div>
                </div>
                <div class="col-span-2 md:col-span-1 p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        Бонусы <a class="text-sm ml-3 underline decoration-dotted" href="{{ route('balls') }}">подробнее | куда протратить</a>
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            <span class="text-white rounded-xl bg-green-500 px-3">+ @plural($coin , 'балл')</span>
                        </p>
                        <svg class="h-10 w-10 text-red-700" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path></svg>
                    </div>
                </div>
            </div>

            <!-- Секция для отображения доступных тестов -->
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                    Доступные тесты
                </h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
                    @foreach($tests as $test)
                        <div class="bg-gray-100 p-4 rounded-lg shadow-md">
                            <h3 class="text-lg font-semibold">{{ $test->title }}</h3>
                            <p class="mt-2">{{ $test->description }}</p>
                            <a href="{{ route('user.tests.show', $test) }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                                Пройти тест
                            </a>
                        </div>
                    @endforeach
                    @if($tests->isEmpty())
                        <div class="col-span-full text-center text-gray-500">
                            Тесты не найдены.
                        </div>
                    @endif
                </div>
            </div>

            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                    Диагностики
                </h2>
            </div>
            @livewire('session-list',['group'=>2])
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                    Проработки
                </h2>
            </div>
            @livewire('session-list',['group'=>1])
        </div>
    </div>
    @include('layouts.footer')
</x-app-layout>
```

### 3. Раздел для отображения списка пройденных тестов и результатов

Создадим контроллер и представления для управления пройденными тестами и результатами.

#### **Создание контроллера `UserTestResultController`**

Создадим контроллер для управления результатами тестов пользователей:

```bash
php artisan make:controller UserTestResultController
```

Добавьте методы `index` и `show` в `UserTestResultController`:

```php
namespace App\Http\Controllers;

use App\Models\UserTestResult;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class UserTestResultController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $testResults = UserTestResult::where('user_id', $user->id)->get();
        return view('profile.tests.index', compact('testResults'));
    }

    public function show(UserTestResult $result)
    {
        $this->authorize('view', $result);
        return view('profile.tests.show', compact('result'));
    }
}
```

#### **Создание представлений для результатов тестов**

Создайте каталог для представлений:

```sh
mkdir -p resources/views/profile/tests
```

#### Обновление метода `dashboard` в `DiagController`

Файл: `app/Http/Controllers/DiagController.php`

```php
use App\Models\Test; // Убедитесь, что добавили это вверху файла

public function dashboard()
{
    $is_guest = !Auth::check();
    $data['is_guest'] = $is_guest;

    $data['diag_cnt'] = 0;
    $data['reg_cnt'] = 0;
    $data['coin'] = 100;

    if (!$is_guest)
    {
        /** 
        * @var $user App\Models\User
        */
        $user = Auth::user();
        $data['reg_cnt'] = $user->dateDiff();
        $data['diag_cnt'] = Session::cnt()['diag'];
        $data['coin'] = $user->coin;
    }

    // Получение списка доступных тестов
    $data['tests'] = Test::all();

    return view('dashboard', $data);
}
```

#### Обновление представления `dashboard.blade.php`

Файл: `resources/views/dashboard.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            Доска
        </h2>
    </x-slot>
    
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="grid grid-cols-2 md:grid-cols-3 mb-3 gap-4">
                <div class=" p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        Пройдено
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            <a class="underline" href="{{ route('session_history') }}">@plural($diag_cnt , 'сессия')</a>
                        </p>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-cyan-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>  
                    </div>
                </div>
                <div class=" p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        В системе
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            @plural($reg_cnt , 'день')
                            
                        </p>
                        <svg class="h-10 w-10 text-amber-700" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path></svg> 
                    </div>
                </div>
                <div class="col-span-2 md:col-span-1 p-5 bg-white shadow-sm rounded-lg">
                    <p class="font-medium">
                        Бонусы <a class="text-sm ml-3 underline decoration-dotted" href="{{ route('balls') }}">подробнее | куда протратить</a>
                    </p>
                    <div class="flex items-center justify-between pt-4">
                        <p class="text-sm sm:text-[2vw] font-semibold text-slate-700 dark:text-navy-100">
                            <span class="text-white rounded-xl bg-green-500 px-3">+ @plural($coin , 'балл')</span>
                        </p>
                        <svg class="h-10 w-10 text-red-700" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path></svg>
                    </div>
                </div>
            </div>

            <!-- Секция для отображения доступных тестов -->
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                    Доступные тесты
                </h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
                    @foreach($tests as $test)
                        <div class="bg-gray-100 p-4 rounded-lg shadow-md">
                            <h3 class="text-lg font-semibold">{{ $test->title }}</h3>
                            <p class="mt-2">{{ $test->description }}</p>
                            <a href="{{ route('user.tests.show', $test) }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                                Пройти тест
                            </a>
                        </div>
                    @endforeach
                    @if($tests->isEmpty())
                        <div class="col-span-full text-center text-gray-500">
                            Тесты не найдены.
                        </div>
                    @endif
                </div>
            </div>

            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                    Диагностики
                </h2>
            </div>
            @livewire('session-list',['group'=>2])
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2 my-6">
                <h2 class="font-semibold text-2xl text-gray-800 leading-tight">
                    Проработки
                </h2>
            </div>
            @livewire('session-list',['group'=>1])
        </div>
    </div>
    @include('layouts.footer')
</x-app-layout>
```

### 3. Раздел для отображения списка пройденных тестов и результатов

Так как вы уже создали раздел для отображения результатов тестов, добавим ссылку на этот раздел в главное меню навигации и проверим интеграцию.

#### Обновление главного меню навигации

Откройте файл `resources/views/layouts/navigation.blade.php` и убедитесь, что ссылки для тестов и результатов тестов добавлены.

```blade
<x-nav-link :href="route('user.tests.index')" :active="request()->routeIs('user.tests.index')">
    Тесты
</x-nav-link>
<x-nav-link :href="route('user.tests.results')" :active="request()->routeIs('user.tests.results')">
    Результаты тестов
</x-nav-link>
```

### Обновление представления списка тестов `index.blade.php`

Файл: `resources/views/admin/tests/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Тесты') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.tests.create') }}" class="bg-blue-500 text-white px-4 py-2 rounded">Создать новый тест</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Название</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($tests as $test)
                            <tr>
                                <td class="border px-6 py-4">{{ $test->id }}</td>
                                <td class="border px-6 py-4">{{ $test->title }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.tests.edit', $test) }}" class="text-blue-500">Редактировать</a>
                                    <a href="{{ route('admin.questions.index', $test) }}" class="text-blue-500 ml-4">Вопросы</a>
                                    <form action="{{ route('admin.tests.destroy', $test) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот тест?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($tests->isEmpty())
                            <tr>
                                <td colspan="3" class="px-6 py-4 text-center">Тесты не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>
```

### Создание представлений для управления вопросами

#### Представление списка вопросов `index.blade.php`

Файл: `resources/views/admin/questions/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопросы теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.questions.create', $test) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый вопрос</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Тип вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($questions as $question)
                            <tr>
                                <td class="border px-6 py-4">{{ $question->id }}</td>
                                <td class="border px-6 py-4">{{ $question->question_text }}</td>
                                <td class="border px-6 py-4">{{ $question->question_type == 'single_choice' ? 'Одиночный выбор' : 'Множественный выбор' }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.questions.edit', [$test, $question]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.questions.destroy', [$test, $question]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот вопрос?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($questions->isEmpty())
                            <tr>
                                <td colspan="4" class="px-6 py-4 text-center">Вопросы не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>
```

#### Представление создания вопроса `create.blade.php`

Файл: `resources/views/admin/questions/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить вопрос</button>
                    <a href="{{ route('admin.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```


### 1. Перенаправление на список вопросов после создания нового теста

Обновим метод `store` в `TestController`, чтобы он перенаправлял на список вопросов для созданного теста:

```php
public function store(Request $request)
{
    $request->validate([
        'title' => 'required|string|max:255',
        'description' => 'nullable|string',
        'seo_title' => 'nullable|string|max:255',
        'seo_description' => 'nullable|string',
        'call_to_action' => 'nullable|string',
        'full_description' => 'nullable|string',
        'introduction' => 'nullable|string',
        'test_image' => 'nullable|image|max:2048',
    ]);

    $data = $request->all();

    // Обработка загрузки изображения (если есть)
    if ($request->hasFile('test_image')) {
        $path = $request->file('test_image')->store('test_images', 'public');
        $data['test_image'] = $path;
    }

    $test = Test::create($data);

    return redirect()->route('admin.questions.index', $test)->with('success', 'Тест успешно создан.');
}
```

### 2. Перенаправление на список вопросов после создания вопроса

Обновим метод `store` в `QuestionController`, чтобы он перенаправлял на список вопросов для соответствующего теста:

```php
public function store(Request $request, Test $test)
{
    $request->validate([
        'question_text' => 'required|string',
        'question_image' => 'nullable|image',
        'question_type' => 'required|in:single_choice,multiple_choice',
        'order' => 'nullable|integer',
    ]);

    $data = $request->all();

    // Обработка загрузки изображения (если есть)
    if ($request->hasFile('question_image')) {
        $path = $request->file('question_image')->store('questions', 'public');
        $data['question_image'] = $path;
    }

    $test->questions()->create($data);

    return redirect()->route('admin.questions.index', $test)->with('success', 'Вопрос успешно добавлен.');
}
```

### 3. Добавление новых полей и возможность писать с использованием Markdown

Обновим миграцию, модель и формы для тестов и вопросов, чтобы поддерживать новые поля и Markdown.

#### Обновление миграции для `tests` таблицы

Создадим новую миграцию для добавления новых полей:

```bash
php artisan make:migration add_new_fields_to_tests_table --table=tests
```

В файле миграции добавим новые поля:

```php
public function up()
{
    Schema::table('tests', function (Blueprint $table) {
        $table->text('call_to_action')->nullable();
        $table->text('full_description')->nullable();
        $table->text('introduction')->nullable();
        $table->string('test_image')->nullable();
    });
}

public function down()
{
    Schema::table('tests', function (Blueprint $table) {
        $table->dropColumn(['call_to_action', 'full_description', 'introduction', 'test_image']);
    });
}
```

#### Обновление модели `Test`

Файл: `app/Models/Test.php`

```php
protected $fillable = [
    'title', 'description', 'seo_title', 'seo_description', 'call_to_action', 'full_description', 'introduction', 'test_image'
];
```

#### Обновление формы создания и редактирования теста

Файл: `resources/views/admin/tests/create.blade.php` и `resources/views/admin/tests/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ $test->exists ? __('Редактировать тест') : __('Создать новый тест') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ $test->exists ? route('admin.tests.update', $test) : route('admin.tests.store') }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @if($test->exists)
                    @method('PUT')
                @endif
                <div class="mb-4">
                    <label class="block text-gray-700">Название теста</label>
                    <input type="text" name="title" value="{{ old('title', $test->title) }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Описание</label>
                    <textarea name="description" class="w-full px-4 py-2 border rounded">{{ old('description', $test->description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Заголовок</label>
                    <input type="text" name="seo_title" value="{{ old('seo_title', $test->seo_title) }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Описание</label>
                    <textarea name="seo_description" class="w-full px-4 py-2 border rounded">{{ old('seo_description', $test->seo_description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Призыв к действию</label>
                    <textarea name="call_to_action" class="w-full px-4 py-2 border rounded">{{ old('call_to_action', $test->call_to_action) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Полное описание теста</label>
                    <textarea name="full_description" class="w-full px-4 py-2 border rounded">{{ old('full_description', $test->full_description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Вступление перед тестом</label>
                    <textarea name="introduction" class="w-full px-4 py-2 border rounded">{{ old('introduction', $test->introduction) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Картинка теста (необязательно)</label>
                    <input type="file" name="test_image" class="w-full px-4 py-2 border rounded">
                    @if($test->test_image)
                        <img src="{{ asset('storage/' . $test->test_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.index') }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

### 4. Вопросы теста с использованием Markdown

Для отображения текста с Markdown можно использовать пакет `Parsedown`.

#### Установка Parsedown

```bash
composer require erusev/parsedown
```
@php
    $Parsedown = new Parsedown();
@endphp

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопросы теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.questions.create', $test) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый вопрос</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Тип вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($questions as $question)
                            <tr>
                                <td class="border px-6 py-4">{{ $question->id }}</td>
                                <td class="border px-6 py-4">{!! $Parsedown->text($question->question_text) !!}</td>
                                <td class="border px-6 py-4">{{ $question->question_type == 'single_choice' ? 'Одиночный выбор' : 'Множественный выбор' }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.questions.edit', [$test, $question]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.questions.destroy', [$test, $question]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот вопрос?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($questions->isEmpty())
                            <tr>
                                <td colspan="4" class="px-6 py-4 text-center">Вопросы не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>

### Продолжение разработки

Теперь перейдем к следующему функционалу — задание ответов, обработка правильных ответов, интерпретация результатов и их выдача.

---

### **Шаг 6: Реализация функционала ответов и интерпретация результатов**

#### **6.1. Создание модели и миграции для `Answer`**

Выполните команду:

```bash
php artisan make:model Answer -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_answers_table.php`

Метод `up()`:

```php
public function up()
{
    Schema::create('answers', function (Blueprint $table) {
        $table->id();
        $table->foreignId('question_id')->constrained()->onDelete('cascade');
        $table->string('text');
        $table->boolean('is_correct')->default(false);
        $table->timestamps();
    });
}
```

**Поля:**
- `question_id` — связь с вопросом.
- `text` — текст ответа.
- `is_correct` — правильный ли ответ.

#### **6.2. Обновление модели `Question`**

Добавьте связь с ответами в модель `Question`.

Откройте файл `app/Models/Question.php`:

```php
public function answers()
{
    return $this->hasMany(Answer::class);
}
```

#### **6.3. Обновление контроллера `QuestionController` для управления ответами**

Добавьте методы для управления ответами в `QuestionController`.

##### **Метод `createAnswer` для добавления ответа к вопросу:**

```php
public function createAnswer(Test $test, Question $question)
{
    return view('admin.answers.create', compact('test', 'question'));
}
```

##### **Метод `storeAnswer` для сохранения нового ответа:**

```php
public function storeAnswer(Request $request, Test $test, Question $question)
{
    $request->validate([
        'text' => 'required|string',
        'is_correct' => 'nullable|boolean',
    ]);

    $question->answers()->create($request->all());

    return redirect()->route('admin.questions.show', [$test, $question])->with('success', 'Ответ успешно добавлен.');
}
```

##### **Метод `editAnswer` для редактирования ответа:**

```php
public function editAnswer(Test $test, Question $question, Answer $answer)
{
    return view('admin.answers.edit', compact('test', 'question', 'answer'));
}
```

##### **Метод `updateAnswer` для сохранения изменений в ответе:**

```php
public function updateAnswer(Request $request, Test $test, Question $question, Answer $answer)
{
    $request->validate([
        'text' => 'required|string',
        'is_correct' => 'nullable|boolean',
    ]);

    $answer->update($request->all());

    return redirect()->route('admin.questions.show', [$test, $question])->with('success', 'Ответ успешно обновлен.');
}
```

##### **Метод `destroyAnswer` для удаления ответа:**

```php
public function destroyAnswer(Test $test, Question $question, Answer $answer)
{
    $answer->delete();

    return redirect()->route('admin.questions.show', [$test, $question])->with('success', 'Ответ успешно удален.');
}
```

#### **6.4. Настройка маршрутов для управления ответами**

В файле `routes/web.php` добавьте маршруты для управления ответами внутри группы с middleware `auth` и `isAdmin`:

```php
use App\Http\Controllers\Admin\QuestionController;

Route::middleware(['auth', 'isAdmin'])->group(function () {
    Route::resource('admin/tests', TestController::class);
    Route::resource('admin/tests.questions', QuestionController::class);

    // Маршруты для управления ответами
    Route::get('admin/tests/{test}/questions/{question}/answers/create', [QuestionController::class, 'createAnswer'])->name('admin.questions.answers.create');
    Route::post('admin/tests/{test}/questions/{question}/answers', [QuestionController::class, 'storeAnswer'])->name('admin.questions.answers.store');
    Route::get('admin/tests/{test}/questions/{question}/answers/{answer}/edit', [QuestionController::class, 'editAnswer'])->name('admin.questions.answers.edit');
    Route::put('admin/tests/{test}/questions/{question}/answers/{answer}', [QuestionController::class, 'updateAnswer'])->name('admin.questions.answers.update');
    Route::delete('admin/tests/{test}/questions/{question}/answers/{answer}', [QuestionController::class, 'destroyAnswer'])->name('admin.questions.answers.destroy');
});
```

#### **6.5. Создание представлений для управления ответами**

**Создайте каталог для представлений:** `resources/views/admin/answers`

##### **6.5.1. Представление создания ответа `create.blade.php`**

Файл: `resources/views/admin/answers/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить ответ к вопросу') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.questions.answers.store', [$test, $question]) }}" method="POST" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст ответа</label>
                    <textarea name="text" class="w-full px-4 py-2 border rounded" required>{{ old('text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Правильный ответ</label>
                    <input type="checkbox" name="is_correct" value="1" {{ old('is_correct') ? 'checked' : '' }} class="rounded">
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.questions.show', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

##### **6.5.2. Представление редактирования ответа `edit.blade.php`**

Файл: `resources/views/admin/answers/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать ответ') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.questions.answers.update', [$test, $question, $answer]) }}" method="POST" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст ответа</label>
                    <textarea name="text" class="w-full px-4 py-2 border rounded" required>{{ old('text', $answer->text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Правильный ответ</label>
                    <input type="checkbox" name="is_correct" value="1" {{ old('is_correct', $answer->is_correct) ? 'checked' : '' }} class="rounded">
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.questions.show', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

#### **6.6. Обновление представления вопроса для отображения списка ответов**

Обновите файл `resources/views/admin/questions/show.blade.php`, чтобы он отображал список ответов к вопросу:

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопрос: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.tests.questions.answers.create', [$test, $question]) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый ответ</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст ответа</th>
                            <th class="px-6 py-3 bg-gray-50">Правильный</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($question->answers as $answer)
                            <tr>
                                <td class="border px-6 py-4">{{ $answer->id }}</td>
                                <td class="border px-6 py-4">{{ $answer->text }}</td>
                                <td class="border px-6 py-4">{{ $answer->is_correct ? 'Да' : 'Нет' }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.tests.questions.answers.edit', [$test, $question, $answer]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.tests.questions.answers.destroy', [$test, $question, $answer]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот ответ?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($question->answers->isEmpty())
                            <tr>
                                <td colspan="4" class="px-6 py-4 text-center">Ответы не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>

### **Шаг 7: Реализация функционала интерпретации результатов**

#### **7.1. Обновление модели `UserTestResult`**

Добавьте метод для интерпретации результатов в модель `UserTestResult`.

Откройте файл `app/Models/UserTestResult.php`:

```php
public function interpretResult()
{
    // Пример интерпретации на основе диапазона баллов
    if ($this->total_score > 80) {
        $this->interpretation = 'Вы набрали высокий балл, что означает...';
        $this->recommendations = 'Рекомендуется...';
    } elseif ($this->total_score > 50) {
        $this->interpretation = 'Вы набрали средний балл, что означает...';
        $this->recommendations = 'Рекомендуется...';
    } else {
        $this->interpretation = 'Вы набрали низкий балл, что означает...';
        $this->recommendations = 'Рекомендуется...';
    }

    $this->save();
}
```

#### **7.2. Обновление метода `answer` в `QuestionController`**

Обновите метод `answer`, чтобы он сохранял баллы пользователя и интерпретировал результат по завершении теста.

```php
public function answer(Request $request, Test $test, Question $question)
{
    // Валидация ответа
    $validatedData = $request->validate([
        'selected_option_ids' => 'required|array',
    ]);

    // Сохранение ответа пользователя
    $userTestResult = UserTestResult::find($request->user_test_result_id);

    $pointsEarned = $this->calculatePoints($question, $validatedData['selected_option_ids']);
    $userAnswer = UserAnswer::create([
        'user_test_result_id' => $userTestResult->id,
        'question_id' => $question->id,
        'selected_option_ids' => $validatedData['selected_option_ids'],
        'points_earned' => $pointsEarned,
    ]);

    // Обновление общего количества баллов
    $userTestResult->total_score += $pointsEarned;
    $userTestResult->save();

    // Перенаправление к следующему вопросу или завершение теста
    $nextQuestion = $this->getNextQuestion($test, $question, $validatedData['selected_option_ids']);
    if ($nextQuestion) {
        return redirect()->route('user.questions.show', ['test' => $test->id, 'question' => $nextQuestion->id]);
    } else {
        $userTestResult->completed_at = now();
        $userTestResult->interpretResult();
        return redirect()->route('user.tests.result', ['test' => $test->id, 'result' => $userTestResult->id]);
    }
}
```

#### **7.3. Создание представления для отображения интерпретации результатов**

Файл: `resources/views/user/tests/result.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Результаты теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">Общий балл: {{ $result->total_score }}</h3>
                <p class="mt-2">Интерпретация: {{ $result->interpretation }}</p>
                <p class="mt-2">Рекомендации: {{ $result->recommendations }}</p>

                <h4 class="text-md font-semibold mt-4">Детальные ответы:</h4>
                <ul class="list-disc list-inside mt-2">
                    @foreach($result->userAnswers as $answer)
                        <li>
                            Вопрос: {{ $answer->question->question_text }}<br>
                            Ваши ответы:
                            <ul class="list-disc list-inside ml-4">
                                @foreach($answer->selected_option_ids as $optionId)
                                    <li>{{ \App\Models\Answer::find($optionId)->text }}</li>
                                @endforeach
                            </ul>
                            Полученные баллы: {{ $answer->points_earned }}
                        </li>
                    @endforeach
                </ul>

                <a href="{{ route('user.tests.index') }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                    Вернуться к списку тестов
                </a>
            </div>
        </div>
    </div>
</x-app-layout>
```

### Продолжение разработки: Функционал AnswerOption

Для полной реализации функционала AnswerOption нужно добавить возможность администратору создавать, редактировать и удалять варианты ответов для вопросов теста.

---

### **Шаг 9: Реализация функционала AnswerOption**

#### **9.1. Создание модели и миграции для `AnswerOption`**

Эта модель и миграция уже были созданы на этапе проектирования базы данных. Убедитесь, что вы выполнили миграции командой:

```bash
php artisan migrate
```

#### **9.2. Обновление модели `Question`**

Убедитесь, что модель `Question` содержит связь с `AnswerOption`.

Откройте файл `app/Models/Question.php`:

```php
public function answerOptions()
{
    return $this->hasMany(AnswerOption::class);
}
```

#### **9.3. Создание контроллера `AnswerOptionController`**

Создайте новый контроллер для управления AnswerOption:

```bash
php artisan make:controller Admin/AnswerOptionController --resource
```

#### **9.4. Настройка маршрутов для AnswerOption**

В файле `routes/web.php` добавьте маршруты для управления AnswerOption внутри группы с middleware `auth` и `isAdmin`:

```php
use App\Http\Controllers\Admin\AnswerOptionController;

Route::middleware(['auth', 'isAdmin'])->group(function () {
    Route::resource('admin/tests', TestController::class);
    Route::resource('admin/tests.questions', QuestionController::class);

    // Маршруты для управления AnswerOption
    Route::resource('admin/tests.questions.answerOptions', AnswerOptionController::class)->except(['show'])->names([
        'index' => 'admin.tests.questions.answerOptions.index',
        'create' => 'admin.tests.questions.answerOptions.create',
        'store' => 'admin.tests.questions.answerOptions.store',
        'edit' => 'admin.tests.questions.answerOptions.edit',
        'update' => 'admin.tests.questions.answerOptions.update',
        'destroy' => 'admin.tests.questions.answerOptions.destroy'
    ]);
});
```

#### **9.5. Реализация методов в `AnswerOptionController`**

##### **Метод `index` для отображения списка вариантов ответов:**

```php
public function index(Test $test, Question $question)
{
    $answerOptions = $question->answerOptions;
    return view('admin.answerOptions.index', compact('test', 'question', 'answerOptions'));
}
```

##### **Метод `create` для отображения формы создания варианта ответа:**

```php
public function create(Test $test, Question $question)
{
    return view('admin.answerOptions.create', compact('test', 'question'));
}
```

##### **Метод `store` для сохранения нового варианта ответа:**

```php
public function store(Request $request, Test $test, Question $question)
{
    $request->validate([
        'option_text' => 'required|string',
        'option_image' => 'nullable|image',
        'point_value' => 'required|integer',
        'next_question_id' => 'nullable|exists:questions,id',
    ]);

    $data = $request->all();

    // Обработка загрузки изображения (если есть)
    if ($request->hasFile('option_image')) {
        $path = $request->file('option_image')->store('answer_options', 'public');
        $data['option_image'] = $path;
    }

    $question->answerOptions()->create($data);

    return redirect()->route('admin.tests.questions.answerOptions.index', [$test, $question])->with('success', 'Вариант ответа успешно добавлен.');
}
```

##### **Метод `edit` для отображения формы редактирования варианта ответа:**

```php
public function edit(Test $test, Question $question, AnswerOption $answerOption)
{
    return view('admin.answerOptions.edit', compact('test', 'question', 'answerOption'));
}
```

##### **Метод `update` для сохранения изменений в варианте ответа:**

```php
public function update(Request $request, Test $test, Question $question, AnswerOption $answerOption)
{
    $request->validate([
        'option_text' => 'required|string',
        'option_image' => 'nullable|image',
        'point_value' => 'required|integer',
        'next_question_id' => 'nullable|exists:questions,id',
    ]);

    $data = $request->all();

    // Обработка загрузки изображения (если есть)
    if ($request->hasFile('option_image')) {
        $path = $request->file('option_image')->store('answer_options', 'public');
        $data['option_image'] = $path;
    }

    $answerOption->update($data);

    return redirect()->route('admin.tests.questions.answerOptions.index', [$test, $question])->with('success', 'Вариант ответа успешно обновлен.');
}
```

##### **Метод `destroy` для удаления варианта ответа:**

```php
public function destroy(Test $test, Question $question, AnswerOption $answerOption)
{
    $answerOption->delete();

    return redirect()->route('admin.tests.questions.answerOptions.index', [$test, $question])->with('success', 'Вариант ответа успешно удален.');
}
```

#### **9.6. Создание представлений для AnswerOption**

**Создайте каталог для представлений:** `resources/views/admin/answerOptions`

##### **9.6.1. Представление списка вариантов ответов `index.blade.php`**

Файл: `resources/views/admin/answerOptions/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Варианты ответов для вопроса: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.tests.questions.answerOptions.create', [$test, $question]) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый вариант ответа</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст варианта ответа</th>
                            <th class="px-6 py-3 bg-gray-50">Баллы</th>
                            <th class="px-6 py-3 bg-gray-50">Следующий вопрос</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($answerOptions as $option)
                            <tr>
                                <td class="border px-6 py-4">{{ $option->id }}</td>
                                <td class="border px-6 py-4">{{ $option->option_text }}</td>
                                <td class="border px-6 py-4">{{ $option->point_value }}</td>
                                <td class="border px-6 py-4">{{ optional($option->nextQuestion)->question_text }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.tests.questions.answerOptions.edit', [$test, $question, $option]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.tests.questions.answerOptions.destroy', [$test, $question, $option]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот вариант ответа?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($answerOptions->isEmpty())
                            <tr>
                                <td colspan="5" class="px-6 py-4 text-center">Варианты ответов не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>
```

##### **9.6.2. Представление создания варианта ответа `create.blade.php`**

Файл: `resources/views/admin/answerOptions/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вариант ответа к вопросу: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.answerOptions.store', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea name="option_text" class="w-full px-4 py-2 border rounded" required>{{ old('option_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" name="option_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" name="point_value" value="{{ old('point_value') }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select name="next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}" {{ old('next_question_id') == $nextQuestion->id ? 'selected' : '' }}>{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.answerOptions.index', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

##### **9.6.3. Представление редактирования варианта ответа `edit.blade.php`**

Файл: `resources/views/admin/answerOptions/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вариант ответа для вопроса: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.answerOptions.update', [$test, $question, $answerOption]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea name="option_text" class="w-full px-4 py-2 border rounded" required>{{ old('option_text', $answerOption->option_text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" name="option_image" class="w-full px-4 py-2 border rounded">
                    @if($answerOption->option_image)
                        <img src="{{ asset('storage/' . $answerOption->option_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" name="point_value" value="{{ old('point_value', $answerOption->point_value) }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select name="next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}" {{ old('next_question_id', $answerOption->next_question_id) == $nextQuestion->id ? 'selected' : '' }}>{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.answerOptions.index', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```
Для того чтобы можно было добавлять и редактировать `AnswerOption` (варианты ответов) одновременно с созданием или редактированием вопросов (`Question`), давайте обновим контроллеры, маршруты и представления для поддержки этого функционала.

### **Шаг 11: Обновление функционала создания и редактирования вопросов**

#### **11.1. Обновление контроллера `QuestionController`**

Мы обновим методы `create` и `edit`, чтобы они могли работать с вариантами ответов.

##### **Метод `create` для отображения формы создания вопроса с вариантами ответов:**

```php
public function create(Test $test)
{
    return view('admin.questions.create', compact('test'));
}
```

##### **Метод `store` для сохранения нового вопроса и его вариантов ответов:**

```php
public function store(Request $request, Test $test)
{
    $request->validate([
        'question_text' => 'required|string',
        'question_image' => 'nullable|image',
        'question_type' => 'required|in:single_choice,multiple_choice',
        'order' => 'nullable|integer',
        'answer_options' => 'required|array',
        'answer_options.*.option_text' => 'required|string',
        'answer_options.*.option_image' => 'nullable|image',
        'answer_options.*.point_value' => 'required|integer',
        'answer_options.*.next_question_id' => 'nullable|exists:questions,id',
    ]);

    $data = $request->all();

    // Обработка загрузки изображения вопроса (если есть)
    if ($request->hasFile('question_image')) {
        $path = $request->file('question_image')->store('questions', 'public');
        $data['question_image'] = $path;
    }

    $question = $test->questions()->create($data);

    // Создание вариантов ответов
    foreach ($data['answer_options'] as $option) {
        if (isset($option['option_image']) && $option['option_image']->isValid()) {
            $path = $option['option_image']->store('answer_options', 'public');
            $option['option_image'] = $path;
        }
        $question->answerOptions()->create($option);
    }

    return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос и варианты ответов успешно добавлены.');
}
```

##### **Метод `edit` для отображения формы редактирования вопроса с вариантами ответов:**

```php
public function edit(Test $test, Question $question)
{
    return view('admin.questions.edit', compact('test', 'question'));
}
```

##### **Метод `update` для сохранения изменений в вопросе и его вариантах ответов:**

```php
public function update(Request $request, Test $test, Question $question)
{
    $request->validate([
        'question_text' => 'required|string',
        'question_image' => 'nullable|image',
        'question_type' => 'required|in:single_choice,multiple_choice',
        'order' => 'nullable|integer',
        'answer_options' => 'required|array',
        'answer_options.*.option_text' => 'required|string',
        'answer_options.*.option_image' => 'nullable|image',
        'answer_options.*.point_value' => 'required|integer',
        'answer_options.*.next_question_id' => 'nullable|exists:questions,id',
    ]);

    $data = $request->all();

    // Обработка загрузки изображения вопроса (если есть)
    if ($request->hasFile('question_image')) {
        $path = $request->file('question_image')->store('questions', 'public');
        $data['question_image'] = $path;
    }

    $question->update($data);

    // Обновление вариантов ответов
    $question->answerOptions()->delete();
    foreach ($data['answer_options'] as $option) {
        if (isset($option['option_image']) && $option['option_image']->isValid()) {
            $path = $option['option_image']->store('answer_options', 'public');
            $option['option_image'] = $path;
        }
        $question->answerOptions()->create($option);
    }

    return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос и варианты ответов успешно обновлены.');
}
```

#### **11.2. Обновление маршрутов**

В файле `routes/web.php` обновите маршруты для управления вопросами:

```php
use App\Http\Controllers\Admin\QuestionController;

Route::middleware(['auth', 'isAdmin'])->group(function () {
    Route::resource('admin/tests', TestController::class);
    Route::resource('admin/tests.questions', QuestionController::class);
});
```

Для интеграции Livewire с функцией добавления и редактирования вариантов ответов, мы будем использовать Livewire-компоненты. Это позволит нам динамически управлять вариантами ответов без необходимости перезагрузки страницы.

### **Шаг 12: Интеграция Livewire**

#### **12.1. Установка Livewire**

Если Livewire еще не установлен в вашем проекте, установите его с помощью Composer:

```bash
composer require livewire/livewire
```

Добавьте директиву Livewire в файл `resources/views/layouts/app.blade.php`:

```blade
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <!-- Fonts -->
    <link rel="stylesheet" href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" />

    <!-- Scripts -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
    @livewireStyles
</head>
<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100">
        @include('layouts.navigation')

        <!-- Page Heading -->
        @if (isset($header))
            <header class="bg-white shadow">
                <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                    {{ $header }}
                </div>
            </header>
        @endif

        <!-- Page Content -->
        <main>
            {{ $slot }}
        </main>
    </div>

    @livewireScripts
</body>
</html>
```

#### **12.2. Создание Livewire-компонента для управления вариантами ответов**

Создайте Livewire-компонент:

```bash
php artisan make:livewire AnswerOptions
```

Это создаст компонент `AnswerOptions` с двумя файлами: `AnswerOptions.php` и `answer-options.blade.php`.

#### **12.3. Реализация Livewire-компонента**

Откройте файл `app/Http/Livewire/AnswerOptions.php` и добавьте следующую реализацию:

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = $test;
        $this->question = $question;
        $this->answerOptions = $question->answerOptions->toArray();
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        $this->question->answerOptions()->delete();

        foreach ($this->answerOptions as $option) {
            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $option['option_image'] = $option['option_image']->store('answer_options', 'public');
            }
            $this->question->answerOptions()->create($option);
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

#### **12.4. Реализация шаблона Livewire-компонента**

Откройте файл `resources/views/livewire/answer-options.blade.php` и добавьте следующую реализацию:

```blade
<div>
    @if (session()->has('message'))
        <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
            {{ session('message') }}
        </div>
    @endif

    <form wire:submit.prevent="save">

        @foreach ($answerOptions as $index => $option)
            <div class="answer-option mb-4">
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea wire:model.lazy="answerOptions.{{ $index }}.option_text" class="w-full px-4 py-2 border rounded" required></textarea>
                    @error('answerOptions.' . $index . '.option_text') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" wire:model.lazy="answerOptions.{{ $index }}.option_image" class="w-full px-4 py-2 border rounded">
                    @if (isset($option['option_image']) && is_string($option['option_image']))
                        <img src="{{ asset('storage/' . $option['option_image']) }}" class="mt-2">
                    @endif
                    @error('answerOptions.' . $index . '.option_image') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" wire:model.lazy="answerOptions.{{ $index }}.point_value" class="w-full px-4 py-2 border rounded" required>
                    @error('answerOptions.' . $index . '.point_value') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select wire:model.lazy="answerOptions.{{ $index }}.next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}">{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                    @error('answerOptions.' . $index . '.next_question_id') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <button type="button" wire:click="removeAnswerOption({{ $index }})" class="remove-answer-option bg-red-500 text-white px-4 py-2 rounded">Удалить вариант ответа</button>
            </div>
        @endforeach

        <button type="button" wire:click="addAnswerOption" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить вариант ответа</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
        </div>
    </form>
</div>
```

#### **12.5. Обновление представлений для вопросов**

Теперь обновим представления `create.blade.php` и `edit.blade.php` для использования Livewire-компонента `AnswerOptions`.

##### **Обновление представления создания вопроса `create.blade.php`**

Файл: `resources/views/admin/questions/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                </div>

                <hr class="my-4">

                @livewire('answer-options', ['test' => $test->id, 'question' => null])

                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

##### **Обновление представления редактирования вопроса `edit.blade.php`**

Файл: `resources/views/admin/questions/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вопрос для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.update', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text', $question->question_text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                    @if($question->question_image)
                        <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type', $question->question_type) == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type', $question->question_type) == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order', $question->order) }}" class="w-full px-4 py-2 border rounded">
                </div>

                <hr class="my-4">

                @livewire('answer-options', ['test' => $test->id, 'question' => $question->id])

                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

Похоже, что при монтировании компонента Livewire вы передаете идентификатор вопроса вместо объекта вопроса. Давайте исправим это, чтобы компонент получал правильные данные.

### **Шаг 12: Исправление метода `mount` в Livewire-компоненте**

#### **12.1. Обновление метода `mount` в `AnswerOptions.php`**

Мы исправим метод `mount`, чтобы загружать объект вопроса по его идентификатору. Также добавим проверку на случай, если вопрос еще не создан.

Откройте файл `app/Http/Livewire/AnswerOptions.php` и обновите его следующим образом:

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if ($this->question->exists) {
            $this->question->answerOptions()->delete();
        } else {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        foreach ($this->answerOptions as $option) {
            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $option['option_image'] = $option['option_image']->store('answer_options', 'public');
            }
            $this->question->answerOptions()->create($option);
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

#### **12.2. Обновление представлений для вопросов**

Теперь обновим представления `create.blade.php` и `edit.blade.php` для использования Livewire-компонента `AnswerOptions`.

##### **Обновление представления создания вопроса `create.blade.php`**

Файл: `resources/views/admin/questions/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                </div>

                <hr class="my-4">

                @livewire('answer-options', ['test' => $test->id, 'question' => null])

                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

##### **Обновление представления редактирования вопроса `edit.blade.php`**

Файл: `resources/views/admin/questions/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вопрос для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.update', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text', $question->question_text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                    @if($question->question_image)
                        <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type', $question->question_type) == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type', $question->question_type) == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order', $question->order) }}" class="w-full px-4 py-2 border rounded">
                </div>

                <hr class="my-4">

                @livewire('answer-options', ['test' => $test->id, 'question' => $question->id])

                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

Для того чтобы визуально улучшить отображение вариантов ответов и выделить этот блок, мы можем использовать стилизацию с помощью Tailwind CSS. Также добавим функциональность по умолчанию для перехода к следующему вопросу, если не выбран следующий шаг после ответа.

### **Шаг 13: Улучшение отображения и функциональности AnswerOptions**

#### **13.1. Обновление компонента Livewire `AnswerOptions`**

Откройте файл `app/Http/Livewire/AnswerOptions.php` и добавьте функциональность для перехода к следующему вопросу по порядку, если не выбран следующий шаг.

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if ($this->question->exists) {
            $this->question->answerOptions()->delete();
        } else {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        foreach ($this->answerOptions as &$option) {
            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $option['option_image'] = $option['option_image']->store('answer_options', 'public');
            }
            if (is_null($option['next_question_id'])) {
                $nextQuestion = $this->test->questions()->where('order', '>', $this->question->order)->first();
                $option['next_question_id'] = $nextQuestion ? $nextQuestion->id : null;
            }
            $this->question->answerOptions()->create($option);
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

#### **13.2. Обновление шаблона Livewire-компонента**

Откройте файл `resources/views/livewire/answer-options.blade.php` и обновите его, чтобы улучшить визуальное отображение с помощью Tailwind CSS.

```blade
<div class="bg-white shadow-md rounded-lg p-6 mb-4">
    @if (session()->has('message'))
        <div class="bg-green-100 border-t border-b border-green-500 text-green-700 px-4 py-3 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">Варианты ответов</h3>

    <form wire:submit.prevent="save">

        @foreach ($answerOptions as $index => $option)
            <div class="answer-option mb-6 p-4 border rounded-lg bg-gray-50">
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea wire:model.lazy="answerOptions.{{ $index }}.option_text" class="w-full px-4 py-2 border rounded" required></textarea>
                    @error('answerOptions.' . $index . '.option_text') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" wire:model.lazy="answerOptions.{{ $index }}.option_image" class="w-full px-4 py-2 border rounded">
                    @if (isset($option['option_image']) && is_string($option['option_image']))
                        <img src="{{ asset('storage/' . $option['option_image']) }}" class="mt-2">
                    @endif
                    @error('answerOptions.' . $index . '.option_image') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" wire:model.lazy="answerOptions.{{ $index }}.point_value" class="w-full px-4 py-2 border rounded" required>
                    @error('answerOptions.' . $index . '.point_value') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select wire:model.lazy="answerOptions.{{ $index }}.next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}">{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                    @error('answerOptions.' . $index . '.next_question_id') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <button type="button" wire:click="removeAnswerOption({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить вариант ответа</button>
            </div>
        @endforeach

        <button type="button" wire:click="addAnswerOption" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить вариант ответа</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
        </div>
    </form>
</div>
```

#### **13.3. Обновление представлений для вопросов**

Теперь обновим представления `create.blade.php` и `edit.blade.php` для использования Livewire-компонента `AnswerOptions`.

##### **Обновление представления создания вопроса `create.blade.php`**

Файл: `resources/views/admin/questions/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                </div>

                <hr class="my-4">

                @livewire('answer-options', ['test' => $test->id, 'question' => null])

                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>


##### **Обновление представления редактирования вопроса `edit.blade.php`**

Файл: `resources/views/admin/questions/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вопрос для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.update', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text', $question->question_text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                    @if($question->question_image)
                        <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type', $question->question_type) == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type', $question->question_type) == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order', $question->order) }}" class="w-full px-4 py-2 border rounded">
                </div>

                <hr class="my-4">

                @livewire('answer-options', ['test' => $test->id, 'question' => $question->id])

                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```
route web

Route::middleware(['auth', 'isAdmin'])->group(function () {
    // Маршруты для тестов и вопросов
    Route::resource('admin/tests', TestController::class)->names([
        'index' => 'admin.tests.index',
        'create' => 'admin.tests.create',
        'store' => 'admin.tests.store',
        'show' => 'admin.tests.show',
        'edit' => 'admin.tests.edit',
        'update' => 'admin.tests.update',
        'destroy' => 'admin.tests.destroy'
    ]);
    
    // Маршруты для вопросов, вложенные в тесты
    Route::resource('admin/tests.questions', QuestionController::class)->names([
        'index' => 'admin.questions.index',
        'create' => 'admin.questions.create',
        'store' => 'admin.questions.store',
        'show' => 'admin.questions.show',
        'edit' => 'admin.questions.edit',
        'update' => 'admin.questions.update',
        'destroy' => 'admin.questions.destroy'
    ]);

    // Маршруты для управления ответами
    Route::get('admin/tests/{test}/questions/{question}/answers/create', [QuestionController::class, 'createAnswer'])->name('admin.questions.answers.create');
    Route::post('admin/tests/{test}/questions/{question}/answers', [QuestionController::class, 'storeAnswer'])->name('admin.questions.answers.store');
    Route::get('admin/tests/{test}/questions/{question}/answers/{answer}/edit', [QuestionController::class, 'editAnswer'])->name('admin.questions.answers.edit');
    Route::put('admin/tests/{test}/questions/{question}/answers/{answer}', [QuestionController::class, 'updateAnswer'])->name('admin.questions.answers.update');
    Route::delete('admin/tests/{test}/questions/{question}/answers/{answer}', [QuestionController::class, 'destroyAnswer'])->name('admin.questions.answers.destroy');

    // Маршруты для управления AnswerOption
    Route::resource('admin/tests.questions.answerOptions', AnswerOptionController::class)->except(['show'])->names([
        'index' => 'admin.tests.questions.answerOptions.index',
        'create' => 'admin.tests.questions.answerOptions.create',
        'store' => 'admin.tests.questions.answerOptions.store',
        'edit' => 'admin.tests.questions.answerOptions.edit',
        'update' => 'admin.tests.questions.answerOptions.update',
        'destroy' => 'admin.tests.questions.answerOptions.destroy'
    ]);

});



### **Шаг 14: Реализация выполнения тестов через Livewire**

Для этого мы создадим Livewire-компоненты, которые будут управлять процессом выполнения тестов пользователями.

#### **14.1. Создание Livewire-компонента для выполнения тестов**

Создайте Livewire-компонент:

```bash
php artisan make:livewire UserTest
```

#### **14.2. Реализация Livewire-компонента**

Откройте файл `app/Http/Livewire/UserTest.php` и добавьте следующую реализацию:

```php
namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Test;
use App\Models\Question;
use App\Models\UserTestResult;
use App\Models\UserAnswer;

class UserTest extends Component
{
    public $test;
    public $currentQuestion;
    public $userTestResult;
    public $selectedOptionIds = [];
    public $currentOrder = 0;

    public function mount($testId)
    {
        $this->test = Test::findOrFail($testId);
        $this->userTestResult = UserTestResult::create([
            'user_id' => auth()->id(),
            'test_id' => $this->test->id,
        ]);
        $this->loadNextQuestion();
    }

    public function loadNextQuestion()
    {
        $this->currentQuestion = $this->test->questions()->where('order', '>', $this->currentOrder)->orderBy('order')->first();
        if ($this->currentQuestion) {
            $this->currentOrder = $this->currentQuestion->order;
        } else {
            $this->completeTest();
        }
    }

    public function submitAnswer()
    {
        $this->validate([
            'selectedOptionIds' => 'required|array',
        ]);

        $pointsEarned = $this->calculatePoints($this->currentQuestion, $this->selectedOptionIds);

        UserAnswer::create([
            'user_test_result_id' => $this->userTestResult->id,
            'question_id' => $this->currentQuestion->id,
            'selected_option_ids' => $this->selectedOptionIds,
            'points_earned' => $pointsEarned,
        ]);

        $this->userTestResult->total_score += $pointsEarned;
        $this->userTestResult->save();

        $this->selectedOptionIds = [];
        $this->loadNextQuestion();
    }

    public function completeTest()
    {
        $this->userTestResult->completed_at = now();
        $this->userTestResult->interpretResult();
        return redirect()->route('user.tests.result', ['test' => $this->test->id, 'result' => $this->userTestResult->id]);
    }

    private function calculatePoints(Question $question, array $selectedOptionIds)
    {
        return $question->answerOptions()->whereIn('id', $selectedOptionIds)->sum('point_value');
    }

    public function render()
    {
        return view('livewire.user-test');
    }
}
```

#### **14.3. Реализация шаблона Livewire-компонента**

Откройте файл `resources/views/livewire/user-test.blade.php` и добавьте следующую реализацию:

```blade
<div>
    @if ($currentQuestion)
        <div class="bg-white shadow-md rounded-lg p-6 mb-4">
            <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">{{ $currentQuestion->question_text }}</h3>

            @if ($currentQuestion->question_image)
                <img src="{{ asset('storage/' . $currentQuestion->question_image) }}" class="mt-2 mb-4">
            @endif

            <form wire:submit.prevent="submitAnswer">
                @foreach ($currentQuestion->answerOptions as $option)
                    <div class="mb-4">
                        <input type="{{ $currentQuestion->question_type == 'single_choice' ? 'radio' : 'checkbox' }}"
                               wire:model.lazy="selectedOptionIds"
                               value="{{ $option->id }}"
                               id="option_{{ $option->id }}"
                               class="rounded">
                        <label for="option_{{ $option->id }}">{{ $option->option_text }}</label>
                        @if ($option->option_image)
                            <img src="{{ asset('storage/' . $option->option_image) }}" class="mt-2">
                        @endif
                    </div>
                @endforeach

                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Далее</button>
            </form>
        </div>
    @else
        <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
            Тест завершен. Ваш результат обрабатывается.
        </div>
    @endif
</div>
```

#### **14.4. Обновление маршрутов**

Добавьте маршрут для выполнения теста с использованием Livewire-компонента.

В файле `routes/web.php` добавьте следующий маршрут:

```php
use App\Http\Livewire\UserTest;

Route::middleware('auth')->group(function () {
    Route::get('tests/{test}/take', UserTest::class)->name('user.tests.take');
});
```

#### **14.5. Обновление представления списка тестов**

Обновите представление `resources/views/user/tests/index.blade.php`, чтобы добавить ссылку на выполнение теста.

```blade
<div class="py-12">
    <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
        <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
                @foreach($tests as $test)
                    <div class="bg-gray-100 p-4 rounded-lg shadow-md">
                        <h3 class="text-lg font-semibold">{{ $test->title }}</h3>
                        <p class="mt-2">{{ $test->description }}</p>
                        <a href="{{ route('user.tests.take', $test) }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                            Пройти тест
                        </a>
                    </div>
                @endforeach
                @if($tests->isEmpty())
                    <div class="col-span-full text-center text-gray-500">
                        Тесты не найдены.
                    </div>
                @endif
            </div>
        </div>
    </div>
</div>
```

### **Шаг 1: Проверка консоли браузера**

Откройте DevTools в вашем браузере (чаще всего это можно сделать с помощью клавиши F12 или Ctrl+Shift+I) и перейдите на вкладку "Консоль" (Console). Нажмите на кнопку "Сохранить" и проверьте, есть ли какие-либо ошибки или предупреждения в консоли. Они могут предоставить полезную информацию о том, что пошло не так.

### **Шаг 2: Проверка формы**

Убедитесь, что форма правильно настроена и отправляется на правильный маршрут. Откройте файл `resources/views/admin/questions/create.blade.php` и убедитесь, что форма настроена правильно:

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст вопроса</label>
                    <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                    <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Тип вопроса</label>
                    <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                        <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                        <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Порядок (необязательно)</label>
                    <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                </div>

                <hr class="my-4">

                @livewire('answer-options', ['test' => $test->id, 'question' => null])

                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>
```

### **Шаг 3: Проверка маршрутов**

Убедитесь, что маршрут для сохранения вопроса правильно настроен. Откройте файл `routes/web.php` и убедитесь, что маршруты для `QuestionController` настроены правильно:

```php
use App\Http\Controllers\Admin\QuestionController;

Route::middleware(['auth', 'isAdmin'])->group(function () {
    Route::resource('admin/tests', TestController::class);
    Route::resource('admin/tests.questions', QuestionController::class);
});
```

### **Шаг 4: Проверка контроллера**

Проверьте метод `store` в `QuestionController`, чтобы убедиться, что он правильно обрабатывает входные данные и сохраняет вопрос:

```php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use App\Models\Question;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function store(Request $request, Test $test)
    {
        $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
            'order' => 'nullable|integer',
        ]);

        $data = $request->all();

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $data['question_image'] = $path;
        }

        $question = $test->questions()->create($data);

        return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос успешно добавлен.');
    }
}
```

### **Шаг 5: Проверка Livewire-компонента**

Если вы используете Livewire-компонент для управления вариантами ответов или вопросами, убедитесь, что компонент правильно настроен и работает.

Откройте файл `app/Http/Livewire/AnswerOptions.php` и убедитесь, что метод `save` настроен правильно:

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if ($this->question->exists) {
            $this->question->answerOptions()->delete();
        } else {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        foreach ($this->answerOptions as &$option) {
            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $option['option_image'] = $option['option_image']->store('answer_options', 'public');
            }
            if (is_null($option['next_question_id'])) {
                $nextQuestion = $this->test->questions()->where('order', '>', $this->question->order)->first();
                $option['next_question_id'] = $nextQuestion ? $nextQuestion->id : null;
            }
            $this->question->answerOptions()->create($option);
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

### **Шаг 6: Проверка JavaScript**

Если у вас есть пользовательский JavaScript, убедитесь, что он не блокирует отправку формы. Проверьте все скрипты, которые могут быть подключены на странице.

### **Шаг 7: Проверка CSRF-токена**

Убедитесь, что CSRF-токен правильно настроен и добавлен в форму. В Laravel это обычно делается с помощью директивы `@csrf`:

```blade
<form action="{{ route('admin.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
    @csrf
    <!-- остальные поля формы -->
    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
</form>
```
Давайте рассмотрим обе проблемы и решим их по очереди.

### **Проблема 1: Поле `answer options` обязательно при редактировании**

Эта ошибка обычно указывает на то, что данные о вариантах ответов не передаются или не валидируются правильно при редактировании. Убедитесь, что данные передаются и валидируются правильно в методе `save` Livewire-компонента и контроллере.

### **Проблема 2: Поле "Следующий вопрос" должно быть независимым для каждого варианта ответа**

Для того чтобы каждое поле "Следующий вопрос" работало независимо для каждого варианта ответа, необходимо убедиться, что они правильно связываются и передаются как отдельные элементы массива.

Давайте начнем с исправления обоих проблем.

### **Шаг 1: Обновление метода `save` в Livewire-компоненте**

Обновим метод `save` в Livewire-компоненте, чтобы убедиться, что данные валидируются и сохраняются правильно.

#### Обновление метода `mount` и `save` в `AnswerOptions.php`

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->map(function($option) {
                return [
                    'id' => $option->id,
                    'option_text' => $option->option_text,
                    'option_image' => $option->option_image,
                    'point_value' => $option->point_value,
                    'next_question_id' => $option->next_question_id,
                ];
            })->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'id' => null,
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if (!$this->question->exists) {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        // Удаление старых вариантов ответов, если они существуют
        $this->question->answerOptions()->delete();

        foreach ($this->answerOptions as $option) {
            $data = [
                'option_text' => $option['option_text'],
                'point_value' => $option['point_value'],
                'next_question_id' => $option['next_question_id'],
            ];

            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $data['option_image'] = $option['option_image']->store('answer_options', 'public');
            } else {
                $data['option_image'] = $option['option_image'];
            }

            $this->question->answerOptions()->create($data);
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

### **Шаг 2: Обновление шаблона Livewire-компонента**

Теперь обновим шаблон Livewire-компонента, чтобы каждое поле "Следующий вопрос" работало независимо для каждого варианта ответа.

#### Обновление файла `resources/views/livewire/answer-options.blade.php`

```blade
<div class="bg-white shadow-md rounded-lg p-6 mb-4">
    @if (session()->has('message'))
        <div class="bg-green-100 border-t border-b border-green-500 text-green-700 px-4 py-3 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">Варианты ответов</h3>

    <form wire:submit.prevent="save">

        @foreach ($answerOptions as $index => $option)
            <div class="answer-option mb-6 p-4 border rounded-lg bg-gray-50">
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea wire:model.lazy="answerOptions.{{ $index }}.option_text" class="w-full px-4 py-2 border rounded" required></textarea>
                    @error('answerOptions.' . $index . '.option_text') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" wire:model.lazy="answerOptions.{{ $index }}.option_image" class="w-full px-4 py-2 border rounded">
                    @if (isset($option['option_image']) && is_string($option['option_image']))
                        <img src="{{ asset('storage/' . $option['option_image']) }}" class="mt-2">
                    @endif
                    @error('answerOptions.' . $index . '.option_image') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" wire:model.lazy="answerOptions.{{ $index }}.point_value" class="w-full px-4 py-2 border rounded" required>
                    @error('answerOptions.' . $index . '.point_value') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select wire:model.lazy="answerOptions.{{ $index }}.next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}">{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                    @error('answerOptions.' . $index . '.next_question_id') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <button type="button" wire:click="removeAnswerOption({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить вариант ответа</button>
            </div>
        @endforeach

        <button type="button" wire:click="addAnswerOption" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить вариант ответа</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
        </div>
    </form>
</div>
```

### **Шаг 3: Обновление контроллера**

Убедитесь, что контроллер `QuestionController` правильно обрабатывает данные и ошибки валидации.

#### Обновление метода `store` в `QuestionController`

```php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use App\Models\Question;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function store(Request $request, Test $test)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
            'order' => 'nullable|integer',
        ]);

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        $question = $test->questions()->create($validatedData);

        return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос успешно добавлен.');
    }
}
```

### **Шаг 4: Проверка консоли браузера**

Откройте DevTools в вашем браузере (чаще всего это можно сделать с помощью клавиши F12 или Ctrl+Shift+I) и перейдите на вкладку "Консоль" (Console). Нажмите на кнопку "Сохранить" и проверьте, есть ли какие-либо ошибки или предупреждения в консоли. Они могут предоставить полезную информацию о том, что пошло не так.

### **Шаг 5: Проверка логов Laravel**

Проверьте логи Laravel для получения более детальной информации об ошибках. Логи обычно находятся в файле `storage/logs/laravel.log`. Если в логах есть ошибки, они могут помочь выяснить, что именно пошло не так.

### **Шаг 6: Убедитесь, что данные передаются правильно**

Убедитесь, что данные из формы передаются правильно и валидируются. Добавьте отладочные сообщения, чтобы проверить, какие данные приходят на сервер.

### **Шаг 7: Проверка полей формы и их имен**

Убедитесь, что все поля формы имеют правильные имена и соответствуют именам валидации в контроллере и Livewire-компоненте.

### **Пример полного проверенного кода**

#### **1. Livewire-компонент `AnswerOptions.php`**

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->map(function($option) {
                return [
                    'id' => $option->id,
                    'option_text' => $option->option_text,
                    'option_image' => $option->option_image,
                    'point_value' => $option->point_value,
                    'next_question_id' => $option->next_question_id,
                ];
            })->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'id' => null,
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if (!$this->question->exists) {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        // Удаление старых вариантов ответов, если они существуют
        $this->question->answerOptions()->delete();

        foreach ($this->answerOptions as $option) {
            $data = [
                'option_text' => $option['option_text'],
                'point_value' => $option['point_value'],
                'next_question_id' => $option['next_question_id'],
            ];

            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $data['option_image'] = $option['option_image']->store('answer_options', 'public');
            } else {
                $data['option_image'] = $option['option_image'];
            }

            $this->question->answerOptions()->create($data);
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

#### **2. Шаблон Livewire-компонента `answer-options.blade.php`**

```blade
<div class="bg-white shadow-md rounded-lg p-6 mb-4">
    @if (session()->has('message'))
        <div class="bg-green-100 border-t border-b border-green-500 text-green-700 px-4 py-3 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">Варианты ответов</h3>

    <form wire:submit.prevent="save">

        @foreach ($answerOptions as $index => $option)
            <div class="answer-option mb-6 p-4 border rounded-lg bg-gray-50">
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea wire:model.lazy="answerOptions.{{ $index }}.option_text" class="w-full px-4 py-2 border rounded" required></textarea>
                    @error('answerOptions.' . $index . '.option_text') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" wire:model.lazy="answerOptions.{{ $index }}.option_image" class="w-full px-4 py-2 border rounded">
                    @if (isset($option['option_image']) && is_string($option['option_image']))
                        <img src="{{ asset('storage/' . $option['option_image']) }}" class="mt-2">
                    @endif
                    @error('answerOptions.' . $index . '.option_image') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" wire:model.lazy="answerOptions.{{ $index }}.point_value" class="w-full px-4 py-2 border rounded" required>
                    @error('answerOptions.' . $index . '.point_value') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select wire:model.lazy="answerOptions.{{ $index }}.next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}">{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                    @error('answerOptions.' . $index . '.next_question_id') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <button type="button" wire:click="removeAnswerOption({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить вариант ответа</button>
            </div>
        @endforeach

        <button type="button" wire:click="addAnswerOption" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить вариант ответа</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
        </div>
    </form>
</div>
```

#### **3. Контроллер `QuestionController.php`**

```php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use App\Models\Question;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function store(Request $request, Test $test)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
            'order' => 'nullable|integer',
        ]);

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        $question = $test->questions()->create($validatedData);

        return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос успешно добавлен.');
    }
}
```

Давайте разберем и решим ваши задачи по порядку.

### **Задача 1: Сохранение данных вариантов ответов отдельно**

Чтобы кнопка "Сохранить" в Livewire-компоненте сохраняла только данные вариантов ответов, а не всю форму с тестом, изменим шаблон компонента и добавим сохранение при изменении полей.

### **Шаг 1: Обновление Livewire-компонента `answer-options.blade.php`**

#### Обновление шаблона Livewire-компонента

```blade
<div class="bg-white shadow-md rounded-lg p-6 mb-4">
    @if (session()->has('message'))
        <div class="bg-green-100 border-t border-b border-green-500 text-green-700 px-4 py-3 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">Варианты ответов</h3>

    <form wire:submit.prevent="save">
        @foreach ($answerOptions as $index => $option)
            <div class="answer-option mb-6 p-4 border rounded-lg bg-gray-50">
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea wire:model.lazy="answerOptions.{{ $index }}.option_text" class="w-full px-4 py-2 border rounded" required></textarea>
                    @error('answerOptions.' . $index . '.option_text') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" wire:model.lazy="answerOptions.{{ $index }}.option_image" class="w-full px-4 py-2 border rounded">
                    @if (isset($option['option_image']) && is_string($option['option_image']))
                        <img src="{{ asset('storage/' . $option['option_image']) }}" class="mt-2">
                    @endif
                    @error('answerOptions.' . $index . '.option_image') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" wire:model.lazy="answerOptions.{{ $index }}.point_value" class="w-full px-4 py-2 border rounded" required>
                    @error('answerOptions.' . $index . '.point_value') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select wire:model.lazy="answerOptions.{{ $index }}.next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}">{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                    @error('answerOptions.' . $index . '.next_question_id') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <button type="button" wire:click="removeAnswerOption({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить вариант ответа</button>
            </div>
        @endforeach

        <button type="button" wire:click="addAnswerOption" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить вариант ответа</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить варианты ответов</button>
        </div>
    </form>
</div>
```

### **Шаг 2: Обновление Livewire-компонента `AnswerOptions.php`**

#### Обновление метода `save` и использование хуков для автоматического сохранения

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->map(function($option) {
                return [
                    'id' => $option->id,
                    'option_text' => $option->option_text,
                    'option_image' => $option->option_image,
                    'point_value' => $option->point_value,
                    'next_question_id' => $option->next_question_id,
                ];
            })->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'id' => null,
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if (!$this->question->exists) {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        // Удаление старых вариантов ответов, если они существуют
        $this->question->answerOptions()->delete();

        foreach ($this->answerOptions as $option) {
            $data = [
                'option_text' => $option['option_text'],
                'point_value' => $option['point_value'],
                'next_question_id' => $option['next_question_id'],
            ];

            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $data['option_image'] = $option['option_image']->store('answer_options', 'public');
            } else {
                $data['option_image'] = $option['option_image'];
            }

            $this->question->answerOptions()->create($data);
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function updated($propertyName)
    {
        $this->save();
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

### **Задача 2: Полный код файла `QuestionController`**

#### Полный код файла `QuestionController.php`

```php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use App\Models\Question;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function index(Test $test)
    {
        $questions = $test->questions;
        return view('admin.questions.index', compact('test', 'questions'));
    }

    public function create(Test $test)
    {
        return view('admin.questions.create', compact('test'));
    }

    public function store(Request $request, Test $test)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
            'order' => 'nullable|integer',
        ]);

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        $question = $test->questions()->create($validatedData);

        return redirect()->route('admin.questions.index', ['test' => $test->id])->with('success', 'Вопрос успешно добавлен.');
    }

    public function edit(Test $test, Question $question)
    {
        return view('admin.questions.edit', compact('test', 'question'));
    }

    public function update(Request $request, Test $test, Question $question)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
            'order' => 'nullable|integer',
        ]);

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        $question->update($validatedData);

        return redirect()->route('admin.questions.index', ['test' => $test->id])->with('success', 'Вопрос успешно обновлен.');
    }

    public function destroy(Test $test, Question $question)
    {
        $question->delete();
        return redirect()->route('admin.questions.index', ['test' => $test->id])->with('success', 'Вопрос успешно удален.');
    }
}
```

### **Задача 3: Полный код файла шаблона для создания и редактирования Question**

#### Полный код файла шаблона для создания Question (`create.blade.php`)

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if ($errors->any())
                    <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                        <ul class="list-disc list-inside">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif

                <form action="{{ route('admin.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                    @csrf
                    <div class="mb-4">
                        <label class="block text-gray-700">Текст вопроса</label>
                        <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                        <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Тип вопроса</label>
                        <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                            <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                            <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Порядок (необязательно)</label>
                        <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                    </div>

                    <hr class="my-4">

                    @livewire('answer-options', ['test' => $test->id, 'question' => null])

                    <div class="flex items-center">
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                        <a href="{{ route('admin.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>
```

#### Полный код файла шаблона для редактирования Question (`edit.blade.php`)

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вопрос для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if ($errors->any())
                    <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                        <ul class="list-disc list-inside">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif

                <form action="{{ route('admin.questions.update', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                    @csrf
                    @method('PUT')
                    <div class="mb-4">
                        <label class="block text-gray-700">Текст вопроса</label>
                        <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text', $question->question_text) }}</textarea>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                        <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                        @if($question->question_image)
                            <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-2">
                        @endif
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Тип вопроса</label>
                        <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                            <option value="single_choice" {{ old('question_type', $question->question_type) == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                            <option value="multiple_choice" {{ old('question_type', $question->question_type) == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Порядок (необязательно)</label>
                        <input type="number" name="order" value="{{ old('order', $question->order) }}" class="w-full px-4 py-2 border rounded">
                    </div>

                    <hr class="my-4">

                    @livewire('answer-options', ['test' => $test->id, 'question' => $question->id])

                    <div class="flex items-center">
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                        <a href="{{ route('admin.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>
```

Конечно, давайте внесем необходимые изменения.

### **Шаг 1: Обновление Livewire-компонента `AnswerOptions.php`**

#### Удаление кода, который удаляет старые варианты ответов

Удалим код, который удаляет старые варианты ответов, и обновим логику сохранения данных.

```php
namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->map(function($option) {
                return [
                    'id' => $option->id,
                    'option_text' => $option->option_text,
                    'option_image' => $option->option_image,
                    'point_value' => $option->point_value,
                    'next_question_id' => $option->next_question_id,
                ];
            })->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'id' => null,
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        if (isset($this->answerOptions[$index]['id'])) {
            AnswerOption::destroy($this->answerOptions[$index]['id']);
        }
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if (!$this->question->exists) {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        foreach ($this->answerOptions as $option) {
            $data = [
                'question_id' => $this->question->id,
                'option_text' => $option['option_text'],
                'point_value' => $option['point_value'],
                'next_question_id' => $option['next_question_id'],
            ];

            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $data['option_image'] = $option['option_image']->store('answer_options', 'public');
            } else {
                $data['option_image'] = $option['option_image'];
            }

            if (isset($option['id'])) {
                AnswerOption::find($option['id'])->update($data);
            } else {
                AnswerOption::create($data);
            }
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}
```

### **Шаг 2: Обновление шаблона Livewire-компонента для немедленного сохранения изменений**

#### Обновление метода `save` и использования хуков для автоматического сохранения

Мы заменим `wire:model.lazy` на `wire:model` для немедленного сохранения изменений.

```blade
<div class="bg-white shadow-md rounded-lg p-6 mb-4">
    @if (session()->has('message'))
        <div class="bg-green-100 border-t border-b border-green-500 text-green-700 px-4 py-3 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">Варианты ответов</h3>

    <form wire:submit.prevent="save">
        @foreach ($answerOptions as $index => $option)
            <div class="answer-option mb-6 p-4 border rounded-lg bg-gray-50">
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea wire:model="answerOptions.{{ $index }}.option_text" class="w-full px-4 py-2 border rounded" required></textarea>
                    @error('answerOptions.' . $index . '.option_text') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" wire:model="answerOptions.{{ $index }}.option_image" class="w-full px-4 py-2 border rounded">
                    @if (isset($option['option_image']) && is_string($option['option_image']))
                        <img src="{{ asset('storage/' . $option['option_image']) }}" class="mt-2">
                    @endif
                    @error('answerOptions.' . $index . '.option_image') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" wire:model="answerOptions.{{ $index }}.point_value" class="w-full px-4 py-2 border rounded" required>
                    @error('answerOptions.' . $index . '.point_value') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select wire:model="answerOptions.{{ $index }}.next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}">{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                    @error('answerOptions.' . $index . '.next_question_id') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <button type="button" wire:click="removeAnswerOption({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить вариант ответа</button>
            </div>
        @endforeach

        <button type="button" wire:click="addAnswerOption" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить вариант ответа</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить варианты ответов</button>
        </div>
    </form>
</div>
```

Конечно, давайте сделаем это через стандартный контроллер и представление, в котором будет отображаться Livewire-компонент.

### **Шаг 1: Создание контроллера для выполнения тестов**

Создадим новый контроллер для отображения страницы выполнения теста.

```bash
php artisan make:controller UserTestController
```

#### Полный код файла `UserTestController.php`

```php
namespace App\Http\Controllers;

use App\Models\Test;
use Illuminate\Http\Request;

class UserTestController extends Controller
{
    public function take(Test $test)
    {
        return view('user.tests.take', compact('test'));
    }
}
```

### **Шаг 2: Создание представления для выполнения тестов**

Создадим представление, в котором будет отображаться Livewire-компонент.

#### Полный код файла `resources/views/user/tests/take.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Прохождение теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @livewire('user-test', ['testId' => $test->id])
            </div>
        </div>
    </div>
</x-app-layout>
```

### **Шаг 3: Обновление маршрутов**

Обновим маршруты, чтобы использовать новый контроллер и представление.

#### Полный код файла `routes/web.php`

```php
use App\Http\Controllers\UserTestController;

Route::middleware('auth')->group(function () {
    Route::get('tests/{test}/take', [UserTestController::class, 'take'])->name('user.tests.take');
});
```

### **Шаг 4: Обновление Livewire-компонента**

Если у вас еще нет Livewire-компонента для выполнения тестов, создадим его.

```bash
php artisan make:livewire UserTest
```

#### Полный код файла Livewire-компонента `UserTest.php`

```php
namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Test;
use App\Models\Question;
use App\Models\UserTestResult;
use App\Models\UserAnswer;

class UserTest extends Component
{
    public $test;
    public $currentQuestion;
    public $userTestResult;
    public $selectedOptionIds = [];
    public $currentOrder = 0;

    public function mount($testId)
    {
        $this->test = Test::findOrFail($testId);
        $this->userTestResult = UserTestResult::create([
            'user_id' => auth()->id(),
            'test_id' => $this->test->id,
        ]);
        $this->loadNextQuestion();
    }

    public function loadNextQuestion()
    {
        $this->currentQuestion = $this->test->questions()->where('order', '>', $this->currentOrder)->orderBy('order')->first();
        if ($this->currentQuestion) {
            $this->currentOrder = $this->currentQuestion->order;
        } else {
            $this->completeTest();
        }
    }

	public function submitAnswer()
	{
		if ($this->currentQuestion->question_type == 'single_choice') {
			$this->selectedOptionIds = collect([$this->selectedOptionIds])->toArray();
		}

		$this->validate([
			'selectedOptionIds' => 'required|array|min:1',
		]);

		$pointsEarned = $this->calculatePoints($this->currentQuestion, $this->selectedOptionIds);

		UserAnswer::create([
			'user_test_result_id' => $this->userTestResult->id,
			'question_id' => $this->currentQuestion->id,
			'selected_option_ids' => $this->selectedOptionIds,
			'points_earned' => $pointsEarned,
		]);

		$this->userTestResult->total_score += $pointsEarned;
		$this->userTestResult->save();

		$this->selectedOptionIds = [];
		$this->loadNextQuestion();
	}

    public function completeTest()
    {
        $this->userTestResult->completed_at = now();
        $this->userTestResult->interpretResult();
        return redirect()->route('user.tests.result', ['test' => $this->test->id, 'result' => $this->userTestResult->id]);
    }

    private function calculatePoints(Question $question, array $selectedOptionIds)
    {
        return $question->answerOptions()->whereIn('id', $selectedOptionIds)->sum('point_value');
    }

    public function render()
    {
        return view('livewire.user-test');
    }
}
```

#### Полный код файла шаблона Livewire-компонента `user-test.blade.php`

```blade
<div>
    @if ($currentQuestion)
        <div class="bg-white shadow-md rounded-lg p-6 mb-4">
            <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">{{ $currentQuestion->question_text }}</h3>

            @if ($currentQuestion->question_image)
                <img src="{{ asset('storage/' . $currentQuestion->question_image) }}" class="mt-2 mb-4">
            @endif

            <form wire:submit.prevent="submitAnswer">
                @foreach ($currentQuestion->answerOptions as $option)
                    <div class="mb-4">
                        <input type="{{ $currentQuestion->question_type == 'single_choice' ? 'radio' : 'checkbox' }}"
                               wire:model="selectedOptionIds"
                               value="{{ $option->id }}"
                               id="option_{{ $option->id }}"
                               class="rounded">
                        <label for="option_{{ $option->id }}">{{ $option->option_text }}</label>
                        @if ($option->option_image)
                            <img src="{{ asset('storage/' . $option->option_image) }}" class="mt-2">
                        @endif
                    </div>
                @endforeach

                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Далее</button>
            </form>
        </div>
    @else
        <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
            Тест завершен. Ваш результат обрабатывается.
        </div>
    @endif
</div>
```

Теперь у вас есть стандартный контроллер и представление для выполнения теста с использованием Livewire-компонента. Маршрут `/tests/{test}/take` будет отображать страницу с компонентом `UserTest`, который будет управлять процессом выполнения теста.

Для решения проблемы с валидацией `selectedOptionIds`, которая может быть либо одиночным ответом, либо множественным, необходимо обновить валидацию и обработку этих данных. Также добавим вывод ошибок ввода.

### **Шаг 1: Обновление метода `submitAnswer` в Livewire-компоненте**

#### Обновление метода `submitAnswer` для корректной валидации и обработки одиночного и множественного выбора

```php
public function submitAnswer()
{
    $this->validate([
        'selectedOptionIds' => 'required|array|min:1',
    ]);

    $pointsEarned = $this->calculatePoints($this->currentQuestion, $this->selectedOptionIds);

    UserAnswer::create([
        'user_test_result_id' => $this->userTestResult->id,
        'question_id' => $this->currentQuestion->id,
        'selected_option_ids' => $this->selectedOptionIds,
        'points_earned' => $pointsEarned,
    ]);

    $this->userTestResult->total_score += $pointsEarned;
    $this->userTestResult->save();

    $this->selectedOptionIds = [];
    $this->loadNextQuestion();
}
```

### **Шаг 2: Обновление шаблона Livewire-компонента для вывода ошибок ввода**

#### Полный код файла Livewire-компонента `user-test.blade.php`

Добавим вывод ошибок в шаблон компонента.

```blade
<div>
    @if ($currentQuestion)
        <div class="bg-white shadow-md rounded-lg p-6 mb-4">
            <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">{{ $currentQuestion->question_text }}</h3>

            @if ($currentQuestion->question_image)
                <img src="{{ asset('storage/' . $currentQuestion->question_image) }}" class="mt-2 mb-4">
            @endif

            <form wire:submit.prevent="submitAnswer">
                @foreach ($currentQuestion->answerOptions as $option)
                    <div class="mb-4">
                        <input type="{{ $currentQuestion->question_type == 'single_choice' ? 'radio' : 'checkbox' }}"
                               wire:model="selectedOptionIds"
                               value="{{ $option->id }}"
                               id="option_{{ $option->id }}"
                               class="rounded">
                        <label for="option_{{ $option->id }}">{{ $option->option_text }}</label>
                        @if ($option->option_image)
                            <img src="{{ asset('storage/' . $option->option_image) }}" class="mt-2">
                        @endif
                    </div>
                @endforeach

                @error('selectedOptionIds') <span class="text-red-500">{{ $message }}</span> @enderror

                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Далее</button>
            </form>
        </div>
    @else
        <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
            Тест завершен. Ваш результат обрабатывается.
        </div>
    @endif
</div>
```

### **Шаг 3: Обновление метода `calculatePoints`**

Обновим метод `calculatePoints` для корректной обработки одиночного и множественного выбора.

```php
private function calculatePoints(Question $question, array $selectedOptionIds)
{
    return $question->answerOptions()->whereIn('id', $selectedOptionIds)->sum('point_value');
}
```

### **Шаг 4: Полный код файла Livewire-компонента `UserTest.php`

```php
namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Test;
use App\Models\Question;
use App\Models\UserTestResult;
use App\Models\UserAnswer;

class UserTest extends Component
{
    public $test;
    public $currentQuestion;
    public $userTestResult;
    public $selectedOptionIds = [];
    public $currentOrder = 0;

    public function mount($testId)
    {
        $this->test = Test::findOrFail($testId);
        $this->userTestResult = UserTestResult::create([
            'user_id' => auth()->id(),
            'test_id' => $this->test->id,
        ]);
        $this->loadNextQuestion();
    }

    public function loadNextQuestion()
    {
        $this->currentQuestion = $this->test->questions()->where('order', '>', $this->currentOrder)->orderBy('order')->first();
        if ($this->currentQuestion) {
            $this->currentOrder = $this->currentQuestion->order;
        } else {
            $this->completeTest();
        }
    }

    public function submitAnswer()
    {
        $this->validate([
            'selectedOptionIds' => 'required|array|min:1',
        ]);

        $pointsEarned = $this->calculatePoints($this->currentQuestion, $this->selectedOptionIds);

        UserAnswer::create([
            'user_test_result_id' => $this->userTestResult->id,
            'question_id' => $this->currentQuestion->id,
            'selected_option_ids' => $this->selectedOptionIds,
            'points_earned' => $pointsEarned,
        ]);

        $this->userTestResult->total_score += $pointsEarned;
        $this->userTestResult->save();

        $this->selectedOptionIds = [];
        $this->loadNextQuestion();
    }

    public function completeTest()
    {
        $this->userTestResult->completed_at = now();
        $this->userTestResult->interpretResult();
        return redirect()->route('user.tests.result', ['test' => $this->test->id, 'result' => $this->userTestResult->id]);
    }

    private function calculatePoints(Question $question, array $selectedOptionIds)
    {
        return $question->answerOptions()->whereIn('id', $selectedOptionIds)->sum('point_value');
    }

    public function render()
    {
        return view('livewire.user-test');
    }
}
```

Теперь валидация для `selectedOptionIds`, которые могут быть либо одиночным, либо множественным выбором, должна работать корректно. Также добавлен вывод ошибок ввода в шаблон компонента.

Ошибка "Call to a member function format() on string" указывает на то, что `completed_at` не является объектом `Carbon` (или другим объектом даты), а обычной строкой. Это может происходить, если атрибут `completed_at` не кастуется автоматически в объект `Carbon`.

### **Решение**

1. Убедитесь, что атрибут `completed_at` кастуется в объект `Carbon` в модели `UserTestResult`.
2. Проверьте, что значение `completed_at` действительно установлено и является датой.

### **Шаг 1: Обновление модели `UserTestResult`**

Убедитесь, что атрибут `completed_at` кастуется в объект `Carbon` в модели `UserTestResult`.

#### Полный код файла `UserTestResult.php`

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Carbon;

class UserTestResult extends Model
{
    use HasFactory;

    protected $fillable = ['user_id', 'test_id', 'total_score', 'interpretation', 'recommendations', 'completed_at'];

    protected $dates = ['completed_at'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function test()
    {
        return $this->belongsTo(Test::class);
    }

    public function userAnswers()
    {
        return $this->hasMany(UserAnswer::class);
    }

    public function interpretResult()
    {
        // Пример интерпретации на основе диапазона баллов
        if ($this->total_score > 80) {
            $this->interpretation = 'Вы набрали высокий балл, что означает...';
            $this->recommendations = 'Рекомендуется...';
        } elseif ($this->total_score > 50) {
            $this->interpretation = 'Вы набрали средний балл, что означает...';
            $this->recommendations = 'Рекомендуется...';
        } else {
            $this->interpretation = 'Вы набрали низкий балл, что означает...';
            $this->recommendations = 'Рекомендуется...';
        }

        $this->save();
    }

    public function getCompletedAtAttribute($value)
    {
        return Carbon::parse($value);
    }
}
```

### **Шаг 2: Обновление шаблона**

Теперь можно использовать `format` в шаблоне, так как `completed_at` будет объектом `Carbon`.

#### Полный код файла `resources/views/profile/tests/index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Мои результаты тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if($testResults->isEmpty())
                    <p>Вы еще не проходили тесты.</p>
                @else
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50">Название теста</th>
                                <th class="px-6 py-3 bg-gray-50">Общий балл</th>
                                <th class="px-6 py-3 bg-gray-50">Дата прохождения</th>
                                <th class="px-6 py-3 bg-gray-50">Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($testResults as $result)
                                <tr>
                                    <td class="border px-6 py-4">{{ $result->test->title }}</td>
                                    <td class="border px-6 py-4">{{ $result->total_score }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at->format('d.m.Y') }}</td>
                                    <td class="border px-6 py-4">
                                        <a href="{{ route('user.tests.result.show', $result) }}" class="text-blue-500">Просмотреть</a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>
```

### **Шаг 3: Проверка данных в базе**

Убедитесь, что в базе данных значения `completed_at` являются корректными датами.

### **Шаг 4: Полный код файла `UserTestResultController.php`

Для полноты картины, вот код контроллера, который используется для отображения результатов тестов.

```php
namespace App\Http\Controllers;

use App\Models\UserTestResult;
use Illuminate\Support\Facades\Auth;

class UserTestResultController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $testResults = UserTestResult::where('user_id', $user->id)->get();
        return view('profile.tests.index', compact('testResults'));
    }

    public function show(UserTestResult $result)
    {
        $this->authorize('view', $result);
        return view('profile.tests.show', compact('result'));
    }
}
```

Теперь ваш шаблон `index.blade.php` в директории `profile/tests` должен корректно отображать даты прохождения тестов, используя метод `format` объекта `Carbon`.


Давайте по порядку внесем все необходимые правки и доработки.

### **Шаг 1: Присваивание порядкового номера при создании вопроса**

#### Обновление метода `store` в `QuestionController`

```php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use App\Models\Question;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function index(Test $test)
    {
        $questions = $test->questions;
        return view('admin.questions.index', compact('test', 'questions'));
    }

    public function create(Test $test)
    {
        return view('admin.questions.create', compact('test'));
    }

    public function store(Request $request, Test $test)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
        ]);

        // Получаем максимальный порядок вопросов для данного теста и увеличиваем его на 1
        $maxOrder = $test->questions()->max('order');
        $order = $maxOrder ? $maxOrder + 1 : 1;

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        $validatedData['order'] = $order;

        $question = $test->questions()->create($validatedData);

        return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос успешно добавлен.');
    }

    public function edit(Test $test, Question $question)
    {
        return view('admin.questions.edit', compact('test', 'question'));
    }

    public function update(Request $request, Test $test, Question $question)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
        ]);

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        $question->update($validatedData);

        return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос успешно обновлен.');
    }

    public function destroy(Test $test, Question $question)
    {
        $question->delete();
        return redirect()->route('admin.tests.questions.index', $test)->with('success', 'Вопрос успешно удален.');
    }
}
```

### **Шаг 2: Вывод порядкового номера в админке**

#### Обновление шаблона списка вопросов `index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопросы теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.questions.create', $test) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый вопрос</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">Порядковый номер</th>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Тип вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($questions as $question)
                            <tr>
                                <td class="border px-6 py-4">{{ $question->order }}</td>
                                <td class="border px-6 py-4">{{ $question->id }}</td>
                                <td class="border px-6 py-4">{{ $question->question_text }}</td>
                                <td class="border px-6 py-4">{{ $question->question_type == 'single_choice' ? 'Одиночный выбор' : 'Множественный выбор' }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.questions.edit', [$test, $question]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.questions.destroy', [$test, $question]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот вопрос?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($questions->isEmpty())
                            <tr>
                                <td colspan="5" class="px-6 py-4 text-center">Вопросы не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>
```

### **Шаг 3: Пометка множественного выбора для пользователя**

#### Обновление шаблона для вывода вопроса пользователю `user-test.blade.php`

```blade
<div>
    @if ($currentQuestion)
        <div class="bg-white shadow-md rounded-lg p-6 mb-4">
            <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">{{ $currentQuestion->question_text }}</h3>
            <p class="text-sm text-gray-500 mb-2">
                Тип вопроса: {{ $currentQuestion->question_type == 'multiple_choice' ? 'Множественный выбор' : 'Одиночный выбор' }}
            </p>

            @if ($currentQuestion->question_image)
                <img src="{{ asset('storage/' . $currentQuestion->question_image) }}" class="mt-2 mb-4">
            @endif

            <form wire:submit.prevent="submitAnswer">
                @foreach ($currentQuestion->answerOptions as $option)
                    <div class="mb-4">
                        <input type="{{ $currentQuestion->question_type == 'single_choice' ? 'radio' : 'checkbox' }}"
                               wire:model="selectedOptionIds"
                               value="{{ $option->id }}"
                               id="option_{{ $option->id }}"
                               class="rounded">
                        <label for="option_{{ $option->id }}">{{ $option->option_text }}</label>
                        @if ($option->option_image)
                            <img src="{{ asset('storage/' . $option->option_image) }}" class="mt-2">
                        @endif
                    </div>
                @endforeach

                @error('selectedOptionIds') <span class="text-red-500">{{ $message }}</span> @enderror

                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Далее</button>
            </form>
        </div>
    @else
        <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
            Тест завершен. Ваш результат обрабатывается.
        </div>
    @endif
</div>
```

### **Шаг 4: Настройка критериев интерпретации и рекомендаций**

Создадим новую страницу для настройки критериев интерпретации и рекомендаций с использованием Livewire-компонента.

#### Создание контроллера для настройки критериев

Создадим новый контроллер:

```bash
php artisan make:controller TestInterpretationController
```

#### Полный код файла `TestInterpretationController.php`

```php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use Illuminate\Http\Request;

class TestInterpretationController extends Controller
{
    public function edit(Test $test)
    {
        return view('admin.tests.interpretation', compact('test'));
    }
}
```

#### Создание Livewire-компонента для настройки интерпретации

Создадим новый Livewire-компонент:

```bash
php artisan make:livewire TestInterpretation
```

### **Шаг 4: Настройка критериев интерпретации и рекомендаций (продолжение)**

#### Полный код файла `TestInterpretation.php` (продолжение)

```php
namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Test;

class TestInterpretation extends Component
{
    public $test;
    public $interpretations = [];

    public function mount($testId)
    {
        $this->test = Test::findOrFail($testId);
        $this->interpretations = $this->test->interpretations ?? [];
    }

    public function addInterpretation()
    {
        $this->interpretations[] = ['range' => '', 'interpretation' => '', 'recommendations' => ''];
    }

    public function removeInterpretation($index)
    {
        unset($this->interpretations[$index]);
        $this->interpretations = array_values($this->interpretations);
    }

    public function save()
    {
        $this->test->interpretations = $this->interpretations;
        $this->test->save();
        session()->flash('message', 'Критерии интерпретации и рекомендации успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.test-interpretation');
    }
}
```

#### Полный код файла шаблона Livewire-компонента `test-interpretation.blade.php`

```blade
<div>
    @if (session()->has('message'))
        <div class="bg-green-100 border-green-500 text-green-800 px-4 py-2 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <form wire:submit.prevent="save">
        @foreach($interpretations as $index => $interpretation)
            <div class="mb-4 p-4 border rounded-lg bg-gray-50">
                <div class="mb-4">
                    <label class="block text-gray-700">Диапазон баллов</label>
                    <input type="text" wire:model="interpretations.{{ $index }}.range" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Интерпретация</label>
                    <textarea wire:model="interpretations.{{ $index }}.interpretation" class="w-full px-4 py-2 border rounded"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Рекомендации</label>
                    <textarea wire:model="interpretations.{{ $index }}.recommendations" class="w-full px-4 py-2 border rounded"></textarea>
                </div>
                <button type="button" wire:click="removeInterpretation({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить</button>
            </div>
        @endforeach

        <button type="button" wire:click="addInterpretation" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить новый критерий</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить критерии интерпретации</button>
        </div>
    </form>
</div>
```

#### Полный код файла шаблона `interpretation.blade.php`

Создадим файл представления для настройки критериев интерпретации и рекомендаций.

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Настройка критериев интерпретации и рекомендаций для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @livewire('test-interpretation', ['testId' => $test->id])
            </div>
        </div>
    </div>
</x-app-layout>
```

#### Обновление маршрутов

Добавим маршрут для настройки критериев интерпретации и рекомендаций.

```php
use App\Http\Controllers\Admin\TestInterpretationController;

Route::middleware('auth')->group(function () {
    Route::get('admin/tests/{test}/interpretation', [TestInterpretationController::class, 'edit'])->name('admin.tests.interpretation.edit');
});
```

#### Обновление модели `Test`

Добавим поле для хранения критериев интерпретации и рекомендаций в модель `Test`.

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Test extends Model
{
    use HasFactory;

    protected $fillable = ['title', 'description', 'interpretations'];

    protected $casts = [
        'interpretations' => 'array',
    ];

    public function questions()
    {
        return $this->hasMany(Question::class);
    }
}
```

#### Обновление метода `interpretResult` в модели `UserTestResult`

Теперь будем использовать настраиваемые критерии интерпретации и рекомендации.

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class UserTestResult extends Model
{
    use HasFactory;

    protected $fillable = ['user_id', 'test_id', 'total_score', 'interpretation', 'recommendations', 'completed_at'];

    protected $dates = ['completed_at'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function test()
    {
        return $this->belongsTo(Test::class);
    }

    public function userAnswers()
    {
        return $this->hasMany(UserAnswer::class);
    }

    public function interpretResult()
    {
        $interpretations = $this->test->interpretations;

        foreach ($interpretations as $interpretation) {
            list($min, $max) = explode('-', $interpretation['range']);
            if ($this->total_score >= $min && $this->total_score <= $max) {
                $this->interpretation = $interpretation['interpretation'];
                $this->recommendations = $interpretation['recommendations'];
                break;
            }
        }

        $this->save();
    }
}
```

### **Шаг 5: Пометка тестов в процессе для пользователя**

#### Обновление метода `index` в `UserTestResultController`

```php
namespace App\Http\Controllers;

use App\Models\UserTestResult;
use Illuminate\Support\Facades\Auth;

class UserTestResultController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $testResults = UserTestResult::where('user_id', $user->id)->get();
        return view('profile.tests.index', compact('testResults'));
    }

    public function show(UserTestResult $result)
    {
        $this->authorize('view', $result);
        return view('profile.tests.show', compact('result'));
    }
}
```

#### Обновление шаблона списка тестов `index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Мои результаты тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if($testResults->isEmpty())
                    <p>Вы еще не проходили тесты.</p>
                @else
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50">Название теста</th>
                                <th class="px-6 py-3 bg-gray-50">Общий балл</th>
                                <th class="px-6 py-3 bg-gray-50">Дата прохождения</th>
                                <th class="px-6 py-3 bg-gray-50">Статус</th>
                                <th class="px-6 py-3 bg-gray-50">Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($testResults as $result)
                                <tr>
                                    <td class="border px-6 py-4">{{ $result->test->title }}</td>
                                    <td class="border px-6 py-4">{{ $result->total_score }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at ? $result->completed_at->format('d.m.Y H:i') : 'В процессе' }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at ? 'Завершен' : 'В процессе' }}</td>
                                    <td class="border px-6 py-4">
                                        @if($result->completed_at)
                                            <a href="{{ route('user.tests.result.show', $result) }}" class="text-blue-500">Просмотреть</a>
                                        @else
                                            <a href="{{ route('user.tests.take', $result->test) }}" class="text-blue-500">Продолжить</a>
                                        @endif
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>


### **Шаг 6: Пометка тестов в процессе для пользователя при выводе доступных тестов**

#### Обновление метода `index` в контроллере, который отвечает за вывод доступных тестов

```php
namespace App\Http\Controllers;

use App\Models\Test;
use Illuminate\Support\Facades\Auth;

class TestController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $tests = Test::all();
        $testResultsInProgress = UserTestResult::where('user_id', $user->id)->whereNull('completed_at')->get()->pluck('test_id')->toArray();

        return view('tests.index', compact('tests', 'testResultsInProgress'));
    }
}
```

#### Обновление шаблона списка доступных тестов `index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Доступные тесты') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if($tests->isEmpty())
                    <p>Тесты не найдены.</p>
                @else
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50">Название теста</th>
                                <th class="px-6 py-3 bg-gray-50">Описание</th>
                                <th class="px-6 py-3 bg-gray-50">Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($tests as $test)
                                <tr>
                                    <td class="border px-6 py-4">{{ $test->title }}</td>
                                    <td class="border px-6 py-4">{{ $test->description }}</td>
                                    <td class="border px-6 py-4">
                                        @if(in_array($test->id, $testResultsInProgress))
                                            <span class="text-yellow-500">В процессе</span>
                                            <a href="{{ route('user.tests.take', $test) }}" class="text-blue-500 ml-2">Продолжить</a>
                                        @else
                                            <a href="{{ route('user.tests.take', $test) }}" class="text-blue-500">Начать</a>
                                        @endif
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>
```

### **Шаг 7: Пометка тестов в процессе для пользователя при выводе списка пройденных тестов**

#### Обновление метода `index` в `UserTestResultController` для вывода списка пройденных тестов с пометкой "Завершен" или "В процессе"

```php
namespace App\Http\Controllers;

use App\Models\UserTestResult;
use Illuminate\Support\Facades\Auth;

class UserTestResultController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $testResults = UserTestResult::where('user_id', $user->id)->get();
        return view('profile.tests.index', compact('testResults'));
    }

    public function show(UserTestResult $result)
    {
        $this->authorize('view', $result);
        return view('profile.tests.show', compact('result'));
    }
}
```

#### Обновление шаблона списка пройденных тестов `index.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Мои результаты тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if($testResults->isEmpty())
                    <p>Вы еще не проходили тесты.</p>
                @else
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50">Название теста</th>
                                <th class="px-6 py-3 bg-gray-50">Общий балл</th>
                                <th class="px-6 py-3 bg-gray-50">Дата прохождения</th>
                                <th class="px-6 py-3 bg-gray-50">Статус</th>
                                <th class="px-6 py-3 bg-gray-50">Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($testResults as $result)
                                <tr>
                                    <td class="border px-6 py-4">{{ $result->test->title }}</td>
                                    <td class="border px-6 py-4">{{ $result->total_score }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at ? $result->completed_at->format('d.m.Y H:i') : 'В процессе' }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at ? 'Завершен' : 'В процессе' }}</td>
                                    <td class="border px-6 py-4">
                                        @if($result->completed_at)
                                            <a href="{{ route('user.tests.result.show', $result) }}" class="text-blue-500">Просмотреть</a>
                                        @else
                                            <a href="{{ route('user.tests.take', $result->test) }}" class="text-blue-500">Продолжить</a>
                                        @endif
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>
```

### **Шаг 8: Полный код файла Livewire-компонента `UserTest.php`**

#### Полный код файла `UserTest.php`

```php
namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Test;
use App\Models\Question;
use App\Models\UserTestResult;
use App\Models\UserAnswer;

class UserTest extends Component
{
    public $test;
    public $currentQuestion;
    public $userTestResult;
    public $selectedOptionIds = [];
    public $currentOrder = 0;

    public function mount($testId)
    {
        $this->test = Test::findOrFail($testId);
        $this->userTestResult = UserTestResult::firstOrCreate([
            'user_id' => auth()->id(),
            'test_id' => $this->test->id,
        ]);
        $this->loadNextQuestion();
    }

    public function loadNextQuestion()
    {
        $this->currentQuestion = $this->test->questions()->where('order', '>', $this->currentOrder)->orderBy('order')->first();
        if ($this->currentQuestion) {
            $this->currentOrder = $this->currentQuestion->order;
        } else {
            $this->completeTest();
        }
    }

    public function submitAnswer()
    {
        if ($this->currentQuestion->question_type == 'single_choice') {
            $this->selectedOptionIds = collect([$this->selectedOptionIds])->toArray();
        }

        $this->validate([
            'selectedOptionIds' => 'required|array|min:1',
        ]);

        $pointsEarned = $this->calculatePoints($this->currentQuestion, $this->selectedOptionIds);

        UserAnswer::create([
            'user_test_result_id' => $this->userTestResult->id,
            'question_id' => $this->currentQuestion->id,
            'selected_option_ids' => $this->selectedOptionIds,
            'points_earned' => $pointsEarned,
        ]);

        $this->userTestResult->total_score += $pointsEarned;
        $this->userTestResult->save();

        $this->selectedOptionIds = [];
        $this->loadNextQuestion();
    }

    public function completeTest()
    {
        $this->userTestResult->completed_at = now();
        $this->userTestResult->interpretResult();
        return redirect()->route('user.tests.result.show', ['result' => $this->userTestResult->id]);
    }

    private function calculatePoints(Question $question, array $selectedOptionIds)
    {
        return $question->answerOptions()->whereIn('id', $selectedOptionIds)->sum('point_value');
    }

    public function render()
    {
        return view('livewire.user-test');
    }
}
```

Теперь вы имеете полный код для реализации всех требуемых изменений, включая управление критериями интерпретации и рекомендаций, пометку тестов в процессе и обновление списка пройденных тестов.

Понял. Давайте решим обе проблемы и добавим необходимые функциональности.

### **Шаг 1: Исправление ошибки при создании нового теста**

Ошибка `Undefined variable $test` указывает на то, что переменная `$test` не передается в шаблон. Убедимся, что контроллер передает эту переменную.

#### Обновление методов `create` и `edit` в `TestController`

```php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use Illuminate\Http\Request;

class TestController extends Controller
{
    public function index()
    {
        $tests = Test::all();
        return view('admin.tests.index', compact('tests'));
    }

    public function create()
    {
        $test = new Test(); // Создаем пустой объект Test
        return view('admin.tests.create', compact('test'));
    }

    public function edit(Test $test)
    {
        return view('admin.tests.edit', compact('test'));
    }

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        Test::create($validatedData);

        return redirect()->route('admin.tests.index')->with('success', 'Тест успешно создан.');
    }

    public function update(Request $request, Test $test)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        $test->update($validatedData);

        return redirect()->route('admin.tests.index')->with('success', 'Тест успешно обновлен.');
    }

    public function destroy(Test $test)
    {
        $test->delete();
        return redirect()->route('admin.tests.index')->with('success', 'Тест успешно удален.');
    }
}
```

#### Обновление шаблона `create.blade.php` и `edit.blade.php`

Убедимся, что оба шаблона используют переменную `$test`.

##### `resources/views/admin/tests/create.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Создать новый тест') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <form action="{{ route('admin.tests.store') }}" method="POST">
                    @csrf
                    <div class="mb-4">
                        <label class="block text-gray-700">Название теста</label>
                        <input type="text" name="title" class="w-full px-4 py-2 border rounded" value="{{ old('title', $test->title) }}" required>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Описание теста</label>
                        <textarea name="description" class="w-full px-4 py-2 border rounded">{{ old('description', $test->description) }}</textarea>
                    </div>
                    <div class="flex items-center">
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                        <a href="{{ route('admin.tests.index') }}" class="ml-4 text-gray-700">Отмена</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>
```

##### `resources/views/admin/tests/edit.blade.php`

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать тест') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <form action="{{ route('admin.tests.update', $test) }}" method="POST">
                    @csrf
                    @method('PUT')
                    <div class="mb-4">
                        <label class="block text-gray-700">Название теста</label>
                        <input type="text" name="title" class="w-full px-4 py-2 border rounded" value="{{ old('title', $test->title) }}" required>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Описание теста</label>
                        <textarea name="description" class="w-full px-4 py-2 border rounded">{{ old('description', $test->description) }}</textarea>
                    </div>
                    <div class="flex items-center">
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                        <a href="{{ route('admin.tests.index') }}" class="ml-4 text-gray-700">Отмена</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>
```

### **Шаг 2: Добавление кнопки для перехода на страницу параметров интерпретации в админке**

#### Обновление шаблона списка тестов `index.blade.php`

Добавим кнопку для перехода на страницу настройки параметров интерпретации.

```blade
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Список тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.tests.create') }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый тест</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Название</th>
                            <th class="px-6 py-3 bg-gray-50">Описание</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($tests as $test)
                            <tr>
                                <td class="border px-6 py-4">{{ $test->id }}</td>
                                <td class="border px-6 py-4">{{ $test->title }}</td>
                                <td class="border px-6 py-4">{{ $test->description }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.tests.edit', $test) }}" class="text-blue-500">Редактировать</a>
                                    <a href="{{ route('admin.tests.interpretation.edit', $test) }}" class="text-green-500 ml-4">Параметры интерпретации</a>
                                    <form action="{{ route('admin.tests.destroy', $test) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот тест?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($tests->isEmpty())
                            <tr>
                                <td colspan="4" class="px-6 py-4 text-center">Тесты не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>
```

Теперь у вас должны быть:
1. Исправлена ошибка при создании нового теста.
2. Добавлена кнопка для перехода на страницу настройки параметров интерпретации в админке.