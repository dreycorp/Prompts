d**Техническое задание (ТЗ) на разработку функционала создания психологических тестов**

---

### **Общая информация**

**Проект**: Веб-сайт для прохождения психологических тестов и получения результатов.

**Технологии**: PHP, Laravel, Livewire, Tailwind CSS.

**Цель разработки**: Создать гибкий функционал для создания и прохождения психологических тестов различных типов, включая квизы, с возможностью подсчета баллов, интерпретации результатов и предоставления рекомендаций.

---

### **1. Требования к функционалу**

#### **1.1. Типы тестов и вопросов**

- **Типы тестов**:
  - Линейные тесты (стандартная последовательность вопросов).
  - Тесты с условной логикой (ветвление в зависимости от ответов пользователя).
  - Тесты с подсчетом очков и интерпретацией результатов.
  
- **Типы вопросов**:
  - Выбор одного ответа.
  - Выбор нескольких ответов.
  - Вопросы с изображениями (вопрос содержит изображение или варианы ответов с изображениями).
  - Открытый ответ (при необходимости в будущем).

#### **1.2. Создание и управление тестами**

- **Создание тестов**:
  - Тесты создаются исключительно администратором (пользователь с `user_id = 1`).
  - Интерфейс создания тестов должен быть удобным, интуитивно понятным и поддерживать гибкую настройку.

- **Редактирование и обновление тестов**:
  - Администратор может редактировать и обновлять существующие тесты.
  - Изменения в тестах не должны влиять на ранее сохраненные результаты пользователей.

#### **1.3. Прохождение тестов пользователями**

- **Доступность тестов**:
  - Все зарегистрированные пользователи имеют доступ ко всем тестам.
  
- **Интерфейс прохождения тестов**:
  - Интуитивно понятный и адаптивный дизайн, поддерживающий устройства с различными разрешениями экранов.
  - Отображение прогресса прохождения теста (например, номер текущего вопроса из общего количества).
  - Возможность отображения изображений в вопросах и вариантах ответов.
  - Поддержка условной логики (переход к определенным вопросам в зависимости от ответов пользователя).

- **Результаты тестов**:
  - Отображение общего результата после прохождения теста.
  - Детальный анализ ответов пользователя.
  - Интерпретация результатов с учетом набранных баллов.
  - Предоставление рекомендаций на основе результатов теста.

#### **1.4. Административная панель**

- **Статистика и отчеты**:
  - Просмотр списка всех прохождений тестов пользователями.
  - Возможность просмотра ответов и результатов каждого пользователя.
  - Статистические данные по каждому тесту (количество прохождений, средний результат и т.д.).

- **Управление тестами**:
  - Создание, редактирование и удаление тестов.
  - Настройка SEO параметров для каждого теста (заголовки, мета-описания, ключевые слова).

- **Управление контентом**:
  - Возможность добавления и редактирования описаний тестов.
  - Управление изображениями, используемыми в тестах.

#### **1.5. Пользовательский интерфейс и опыт**

- **Каталог тестов**:
  - Отображение списка доступных тестов с кратким описанием каждого.
  - Возможность сортировки и фильтрации тестов по категориям или темам (при необходимости в будущем).

- **Страница теста**:
  - Подробное описание теста.
  - SEO-оптимизация страницы теста (заголовки, мета-данные).
  - Кнопка для начала прохождения теста.

- **Адаптивный дизайн**:
  - Обеспечить корректное отображение на компьютерах, планшетах и мобильных устройствах.
  - Использование Tailwind CSS для быстрой и эффективной стилизации.

- **Настройка интерфейса администратором**:
  - Администратор может настраивать элементы интерфейса (например, тексты приветствия, инструкции, оформление страниц).

#### **1.6. Будущие расширения**

- **Игровые элементы**:
  - Заложить возможность добавления в будущем игровых элементов (баллы, рейтинги, достижения).
  
- **Многоязычность**:
  - В текущем этапе многоязычность не требуется, но архитектура системы должна позволять ее внедрение в будущем при необходимости.

---

### **2. Нефункциональные требования**

#### **2.1. Безопасность и доступ**

- **Роли пользователей**:
  - Две роли: администратор (`user_id = 1`) и пользователи.
  - Разграничение доступа к административным функциям.

- **Конфиденциальность данных**:
  - Обеспечить безопасность хранения персональных данных пользователей и их результатов тестов.
  - Соответствие требованиям законодательства о защите персональных данных.

#### **2.2. Производительность**

- **Загрузка страниц**:
  - Оптимизация загрузки страниц для обеспечения быстрого отклика.
  
- **Масштабируемость**:
  - Возможность поддержки увеличения числа пользователей и тестов без существенной потери производительности.

#### **2.3. Технологические требования**

- **Фреймворки и библиотеки**:
  - Использовать Laravel для серверной части.
  - Использовать Livewire для реализации динамического интерфейса без перезагрузки страниц.
  - Tailwind CSS для стилизации и обеспечения адаптивного дизайна.

- **База данных**:
  - Проектирование структуры БД с учетом хранения тестов, вопросов, ответов пользователей и результатов.
  - Обеспечение целостности и оптимизации запросов к БД.

---

---

### **3. Технические детали реализации**

#### **3.3. Интерфейс и пользовательский опыт**

- **Каталог тестов**:
  - **Страница списка тестов**:
    - Отображение всех доступных тестов с краткими описаниями.
    - Использование карточной компоновки для визуальной привлекательности.
    - Для каждого теста отображать:
      - Название теста.
      - Краткое описание.
      - Изображение (если есть).
      - Кнопку "Начать тест".
    - Поиск (при необходимости в будущем) и сортировка тестов по различным критериям.

- **Страница теста**:
  - **Описание теста**:
    - Подробное описание целей и особенностей теста.
    - SEO оптимизация страницы с использованием предоставленных администратором мета-данных.
  - **Начало теста**:
    - Кнопка для начала прохождения теста.
    - При необходимости отображение инструкции или предупреждений перед началом.

- **Интерфейс прохождения теста**:
  - **Вопросы**:
    - Отображение вопроса и вариантов ответов в понятном и удобном формате.
    - Поддержка отображения изображений в вопросах и ответах.
    - Адаптация интерфейса под различные типы вопросов (одиночный выбор, множественный выбор).
    - Реализация прогресс-бара или индикатора прогресса.
  - **Навигация**:
    - Кнопки "Далее", "Назад" (если разрешено возвращаться к предыдущим вопросам).
    - Предотвращение возможности пропустить обязательный вопрос без ответа.
  - **Условная логика**:
    - Переход к конкретным вопросам в зависимости от выбранных ответов.
    - Обработка ветвления внутри теста без заметных задержек для пользователя.
  - **Отображение ошибок**:
    - Валидация ответов пользователей в реальном времени (при необходимости).
    - Понятные сообщения об ошибках или недопустимых действиях.

- **Результаты теста**:
  - **Отображение результатов**:
    - Общий балл, набранный пользователем.
    - Графическое отображение результатов (гистограммы, диаграммы).
    - Текстовая интерпретация результатов в зависимости от диапазона баллов.
    - Персональные рекомендации на основе результатов.
  - **Детальный отчет**:
    - Возможность для пользователя просмотреть свои ответы и сравнить их с правильными (если применимо).
    - Отображение баллов за каждый вопрос.
  - **Сохранение результатов**:
    - Автоматическое сохранение результатов в личном кабинете пользователя.
    - Возможность повторного просмотра результатов в любое время.

- **Личный кабинет пользователя**:
  - **Мои тесты**:
    - Список пройденных тестов с датами прохождения и набранными баллами.
    - Быстрый переход к детальному отчету по каждому тесту.
  - **Профиль пользователя**:
    - Возможность редактирования личных данных (имя, email).
    - Отображение общей статистики (количество пройденных тестов, средний балл и т.д.).
  
- **Адаптивный дизайн**:
  - **Мобильные устройства**:
    - Оптимизация интерфейса для корректного отображения на смартфонах и таблетах.
    - Удобная навигация и читабельность на небольших экранах.
  - **Десктопные устройства**:
    - Полноценный интерфейс с использованием большого экрана для отображения дополнительной информации.

- **Доступность**:
  - **UI/UX принципы**:
    - Использование контрастных цветов для лучшей видимости.
    - Размеры элементов интерфейса достаточные для удобного взаимодействия.
  - **Accessibility**:
    - Поддержка навигации с клавиатуры.
    - Семантическая разметка для поддержки экранных читалок.

#### **3.4. Технологии и инструменты**

- **Backend**:
  - **Laravel**:
    - Использование функционала фреймворка для разработки RESTful контроллеров.
    - Встроенные средства аутентификации и авторизации.
    - Использование ORM Eloquent для работы с базой данных.

- **Frontend**:
  - **Livewire**:
    - Реализация интерактивных компонентов без необходимости писать JavaScript.
    - Обеспечение динамического обновления интерфейса при взаимодействии пользователя.
  - **Tailwind CSS**:
    - Использование утилитарных классов для быстрой и адаптивной верстки.
    - Создание консистентного и современного дизайна.

- **База данных**:
  - **MySQL/PostgreSQL**:
    - Выбор реляционной базы данных для надежного хранения данных.
    - Оптимизация запросов для повышения производительности.

- **Дополнительные инструменты**:
  - **Composer**: управление зависимостями PHP проекта.
  - **NPM/Yarn**: управление пакетами JavaScript для сборки фронтенда.
  - **Git**: контроль версий и совместная работа над кодом.
  - **Testing Frameworks**:
    - **PHPUnit** для тестирования backend.
    - **Laravel Dusk** для автоматизированного тестирования интерфейса (при необходимости).

#### **3.5. Безопасность**

- **Аутентификация и авторизация**:
  - Использование встроенных средств Laravel для обеспечения безопасности.
  - Хеширование паролей пользователей.
  - Защита административных маршрутов через middleware.

- **Валидация данных**:
  - Серверная валидация входящих данных от пользователей.
  - Предотвращение SQL-инъекций и XSS-атак.

- **SSL/HTTPS**:
  - Использование защищенного протокола для передачи данных.

- **Защита персональных данных**:
  - Соблюдение требований законодательства о защите персональных данных.
  - Оповещение пользователей о сборе и использовании их данных (политика конфиденциальности).

#### **3.6. Производительность и оптимизация**

- **Кэширование**:
  - Использование встроенных механизмов кэширования Laravel для ускорения загрузки страниц.
  - Кэширование часто запрашиваемых данных (например, списков тестов).

- **Оптимизация загрузки файлов**:
  - Минификация CSS и JavaScript.
  - Использование отложенной загрузки изображений (lazy loading).

- **Оптимизация базы данных**:
  - Создание индексов для ускорения запросов.
  - Нормализация схемы базы данных.

#### **3.7. Развертывание и инфраструктура**

- **Сервер**:
  - Выбор надежного хостинга с поддержкой необходимых версий PHP и других технологий.
  
- **CI/CD**:
  - Настройка континуальной интеграции и деплоя для быстрого и безопасного развертывания обновлений.

- **Резервное копирование**:
  - Регулярное создание бэкапов базы данных и важных файлов.
  - План восстановления в случае сбоев.

---
Давай начнем разработку. Я понимаю в программировании, но не профессионально. Пиши что именно делать, куда что писать и как создавать. Сделаем весь функционал.
---

# Разработка уже начата

вот что сделано



---

### **Шаг 1: Проектирование базы данных**

Начнем с создания моделей и миграций для базы данных. Это позволит нам определить структуру данных, с которыми мы будем работать.

Мы создадим следующие модели и миграции:

1. `Test` – тесты.
2. `Question` – вопросы, связанные с тестами.
3. `AnswerOption` – варианты ответов на вопросы.
4. `UserTestResult` – результаты прохождения тестов пользователями.
5. `UserAnswer` – ответы пользователей на вопросы.

---

#### **1.1. Создание модели и миграции для `Test`**

Выполните в терминале команду:

```bash
php artisan make:model Test -m
```

Это создаст модель `Test` и миграцию для таблицы `tests`.

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_tests_table.php`

Замените содержимое метода `up()` на следующее:

```php
public function up()
{
    Schema::create('tests', function (Blueprint $table) {
        $table->id();
        $table->string('title');
        $table->text('description')->nullable();
        $table->string('seo_title')->nullable();
        $table->text('seo_description')->nullable();
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `title` – название теста.
- `description` – описание теста.
- `seo_title` и `seo_description` – для SEO оптимизации.

---

#### **1.2. Создание модели и миграции для `Question`**

Выполните команду:

```bash
php artisan make:model Question -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_questions_table.php`

Замените метод `up()`:

```php
public function up()
{
    Schema::create('questions', function (Blueprint $table) {
        $table->id();
        $table->foreignId('test_id')->constrained()->onDelete('cascade');
        $table->text('question_text');
        $table->string('question_image')->nullable();
        $table->enum('question_type', ['single_choice', 'multiple_choice']);
        $table->integer('order')->default(0);
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `test_id` – связь с тестом.
- `question_text` – текст вопроса.
- `question_image` – изображение вопроса (если есть).
- `question_type` – тип вопроса (одиночный или множественный выбор).
- `order` – порядок отображения вопросов.

---

#### **1.3. Создание модели и миграции для `AnswerOption`**

Выполните команду:

```bash
php artisan make:model AnswerOption -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_answer_options_table.php`

Метод `up()`:

```php
public function up()
{
    Schema::create('answer_options', function (Blueprint $table) {
        $table->id();
        $table->foreignId('question_id')->constrained()->onDelete('cascade');
        $table->text('option_text')->nullable();
        $table->string('option_image')->nullable();
        $table->integer('point_value')->default(0);
        $table->foreignId('next_question_id')->nullable()->constrained('questions')->onDelete('set null');
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `question_id` – связь с вопросом.
- `option_text` – текст варианта ответа.
- `option_image` – изображение варианта ответа (если есть).
- `point_value` – количество баллов за ответ.
- `next_question_id` – для условной логики (если после этого ответа нужно перейти к конкретному вопросу).

---

#### **1.4. Создание модели и миграции для `UserTestResult`**

Выполните команду:

```bash
php artisan make:model UserTestResult -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_user_test_results_table.php`

Метод `up()`:

```php
public function up()
{
    Schema::create('user_test_results', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->foreignId('test_id')->constrained()->onDelete('cascade');
        $table->integer('total_score')->default(0);
        $table->text('interpretation')->nullable();
        $table->text('recommendations')->nullable();
        $table->timestamp('completed_at')->nullable();
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `user_id` – связь с пользователем.
- `test_id` – связь с тестом.
- `total_score` – общий набранный балл.
- `interpretation` – интерпретация результата на основе общего балла.
- `recommendations` – рекомендации для пользователя.
- `completed_at` – время завершения теста.

#### **1.5. Создание модели и миграции для `UserAnswer`**

Выполните команду:

```bash
php artisan make:model UserAnswer -m
```

**Откройте файл миграции:** `database/migrations/XXXX_XX_XX_create_user_answers_table.php`

Метод `up()`:

```php
public function up()
{
    Schema::create('user_answers', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_test_result_id')->constrained()->onDelete('cascade');
        $table->foreignId('question_id')->constrained()->onDelete('cascade');
        $table->json('selected_option_ids')->nullable();
        $table->integer('points_earned')->default(0);
        $table->timestamps();
    });
}
```

**Объяснение полей:**

- `user_test_result_id` – связь с результатом теста пользователя.
- `question_id` – связь с вопросом.
- `selected_option_ids` – выбранные варианты ответов (может быть один или несколько, хранятся в формате JSON).
- `points_earned` – количество баллов, полученных за ответ на вопрос.

---

Уже реализованные файлы в проекте и их содержимое.

---

// routes/web.php
<?php

use App\My\SessionSteps;
use App\Models\SessionStep;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\DiagController;
use App\Http\Controllers\PostController;
use App\Http\Controllers\AdminController;
use App\Http\Controllers\AdminTelegramController;
use App\Http\Controllers\HistoryController;
use App\Http\Controllers\SessionController;
use App\Http\Middleware\VerifyTarif;
use App\Http\Controllers\Admin\TestController;
use App\Http\Controllers\Admin\QuestionController;
//use App\Http\Controllers\TestController;
//use App\Http\Controllers\QuestionController;
use App\Http\Controllers\UserTestResultController;
use App\Http\Controllers\Admin\AnswerOptionController;
use App\Http\Controllers\Admin\TestInterpretationController;
use App\Http\Controllers\UserTestController;
/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::get('/', function () {
    return view('welcome');
});

Route::get('/kontakty', function () {
    return view('kontakty');
})->name('kontakty');


Route::get('/temp', function () {
    exit;
    $steps = SessionSteps::$steps[2];
    dump($steps);
    $idd = 10;

    /*
    'id'=> 1,
    'view' => 'session.part.step_def',
    'view_filled' => 'session.part.step_def_filled',
    'next' => 2,
    'save_session' => ['answer'=>'zapros'],
    //'var_to_next' => ['chuvstvo_before'=>'chuvstvo'],
    'validate' => [
        'step'=>'required|int',
        'answer' => 'required|max:250',
    ],
    'data' => [
        'content' => 'С чем <b>конкретно</b> вы хотите поработать?',
        'input'=>[
            //'label' => false
        ]
    ]
    */

    foreach($steps as $item){
        $id = $item['id']+$idd;
        $stepModel = new SessionStep();
        $stepModel->id = $id;
        $stepModel->view = $item['view'];
        $stepModel->session_type_id = 2;
        $stepModel->content = $item['data']['content'];
        $stepModel->next_id = $id+1;

        if (isset($item['save_session']))
            $stepModel->save_session = $item['save_session'];

        $stepModel->validate = $item['validate'];

        if (isset($item['data']['input']))
            $stepModel->data = ['input'=>$item['data']['input']];

        $stepModel->save();

        //dd($stepModel);
    }

});
Route::get('/for-masha', [DiagController::class, 'formasha'])->name('formasha');
Route::get('/about-balls', [DiagController::class, 'balls'])->name('balls');
Route::get('/user_data/{id}/{key}', [DiagController::class, 'user_data'])->name('user_data');
/*
Route::get('/about-balls', function () {
    return view('kontakty');
})->name('balls');
*/

Route::get('/dashboard', [DiagController::class, 'dashboard'])->middleware(VerifyTarif::class)->name('dashboard');

Route::get('/present/{id}', [DiagController::class, 'present'])->name('present');

Route::get('/tariffs', [DiagController::class, 'tariffs'])->name('tariffs');
Route::get('/shared/{id}/{key}', [DiagController::class, 'shared'])->name('shared');

Route::get('/page/', [PostController::class, 'index'])->name('pagelist');
Route::get('/page/{slug}', [PostController::class, 'page'])->name('page');

Route::prefix('diag')->middleware(['auth', 'verified'])->group(function () {
    Route::get('/', [DiagController::class, 'index'])->middleware(VerifyTarif::class)->name('diag');
    Route::get('/{sessionType}', [DiagController::class, 'start'])->name('diag_start');
    Route::get('/steps/{session}', [DiagController::class, 'steps'])->name('diag_steps');
});

Route::prefix('session')->middleware(['auth', 'verified'])->group(function () {
    Route::get('/history', [SessionController::class, 'history'])->middleware(VerifyTarif::class)->name('session_history');
    Route::get('/', [SessionController::class, 'index'])->middleware(VerifyTarif::class)->name('session');
    Route::get('/{sessionType}', [SessionController::class, 'start'])->name('session_start');
    Route::post('/{sessionType}', [SessionController::class, 'start'])->name('session_start_form');
    Route::get('/steps/{session}', [SessionController::class, 'steps'])->name('session_steps');
    Route::post('/step/{session}', [SessionController::class, 'step'])->name('session_step');
});


Route::prefix('tests')->middleware(['auth', 'verified'])->group(function () {
    Route::get('/', [App\Http\Controllers\TestController::class, 'index'])->name('user.tests.index');
    Route::get('/{test}', [App\Http\Controllers\TestController::class, 'show'])->name('user.tests.show');
    Route::post('/{test}/start', [App\Http\Controllers\QuestionController::class, 'start'])->name('user.tests.start');
    Route::get('/{test}/questions/{question}', [App\Http\Controllers\QuestionController::class, 'show'])->name('user.questions.show');
    Route::post('/{test}/questions/{question}', [App\Http\Controllers\QuestionController::class, 'answer'])->name('user.questions.answer');


    Route::get('/{test}/results/{result}', [App\Http\Controllers\TestController::class, 'result'])->name('user.tests.result');

    Route::get('{test}/take', [UserTestController::class, 'take'])->name('user.tests.take');

});

Route::prefix('profile')->middleware(['auth', 'verified'])->group(function () {
    // Маршруты для результатов тестов в личном кабинете
    Route::get('/tests', [UserTestResultController::class, 'index'])->name('user.tests.results');
    Route::get('/tests/{result}', [UserTestResultController::class, 'show'])->name('user.tests.result.show');

});







Route::prefix('admin')->middleware(['auth', 'verified','can:is_admin'])->group(function () {
    Route::get('/', [AdminController::class, 'index'])->name('admin');
    Route::get('/steplist/{sessionType}', [AdminController::class, 'steplist'])->name('steplist');

    Route::get('/page/', [AdminController::class, 'pagelist'])->name('admin_pagelist');
    Route::get('/page/new', [AdminController::class, 'pagenew'])->name('admin_pagenew');
    Route::get('/page/{Post}', [AdminController::class, 'page'])->name('admin_page'); 
    Route::get('/page/view/{Post}', [AdminController::class, 'pageview'])->name('admin_pageview');    

    Route::get('/page/field/link', [AdminController::class, 'pagefieldlink'])->name('admin_pagefield_link'); 
    Route::any('/page/field/file', [AdminController::class, 'pagefieldfile'])->name('admin_pagefield_file');
    Route::any('/page/field/image', [AdminController::class, 'pagefieldimage'])->name('admin_pagefield_image'); 
    

    Route::post('/page/save/{Post?}', [AdminController::class, 'pagesave'])->name('admin_pagesave');   
    Route::any('/page/img/{Post}', [AdminController::class, 'pageimgsave'])->name('admin_pageimgsave');

    
    Route::get('/tariffsession/', [AdminController::class, 'tariffsession'])->name('admin_tariffsession');

    Route::get('/users/', [AdminController::class, 'users'])->name('admin_users');
    Route::get('/user/tariff/{id}', [AdminController::class, 'usertariff'])->name('admin_user_tariff');
    Route::get('/user/auth/{id}', [AdminController::class, 'userauth'])->name('admin_user_auth');

    Route::get('/telegram', [AdminTelegramController::class, 'index'])->name('admin_telegram_dashbord');
    Route::get('/telegram/blocks/{id}', [AdminTelegramController::class, 'blocks'])->name('admin_telegram_blocks');
    Route::get('/telegram/steps/{id}', [AdminTelegramController::class, 'steps'])->name('admin_telegram_steps');

});




Route::middleware(['auth', 'isAdmin'])->group(function () {
    // Маршруты для тестов и вопросов
    Route::resource('admin/tests', TestController::class)->names([
        'index' => 'admin.tests.index',
        'create' => 'admin.tests.create',
        'store' => 'admin.tests.store',
        'show' => 'admin.tests.show',
        'edit' => 'admin.tests.edit',
        'update' => 'admin.tests.update',
        'destroy' => 'admin.tests.destroy'
    ]);
    
    // Маршруты для вопросов, вложенные в тесты
    Route::resource('admin/tests.questions', QuestionController::class)->names([
        'index' => 'admin.questions.index',
        'create' => 'admin.questions.create',
        'store' => 'admin.questions.store',
        'show' => 'admin.questions.show',
        'edit' => 'admin.questions.edit',
        'update' => 'admin.questions.update',
        'destroy' => 'admin.questions.destroy'
    ]);

    // Маршруты для управления ответами
    Route::get('admin/tests/{test}/questions/{question}/answers/create', [QuestionController::class, 'createAnswer'])->name('admin.questions.answers.create');
    Route::post('admin/tests/{test}/questions/{question}/answers', [QuestionController::class, 'storeAnswer'])->name('admin.questions.answers.store');
    Route::get('admin/tests/{test}/questions/{question}/answers/{answer}/edit', [QuestionController::class, 'editAnswer'])->name('admin.questions.answers.edit');
    Route::put('admin/tests/{test}/questions/{question}/answers/{answer}', [QuestionController::class, 'updateAnswer'])->name('admin.questions.answers.update');
    Route::delete('admin/tests/{test}/questions/{question}/answers/{answer}', [QuestionController::class, 'destroyAnswer'])->name('admin.questions.answers.destroy');
/*
    // Маршруты для управления AnswerOption
    Route::resource('admin/tests.questions.answerOptions', AnswerOptionController::class)->except(['show'])->names([
        'index' => 'admin.tests.questions.answerOptions.index',
        'create' => 'admin.tests.questions.answerOptions.create',
        'store' => 'admin.tests.questions.answerOptions.store',
        'edit' => 'admin.tests.questions.answerOptions.edit',
        'update' => 'admin.tests.questions.answerOptions.update',
        'destroy' => 'admin.tests.questions.answerOptions.destroy'
    ]);*/

    Route::get('admin/tests/{test}/interpretation', [TestInterpretationController::class, 'edit'])->name('admin.tests.interpretation.edit');

});


require __DIR__.'/auth.php';

// app/Http/Controllers/Admin/AnswerOptionController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class AnswerOptionController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Test $test, Question $question)
    {
        $answerOptions = $question->answerOptions;
        return view('admin.answerOptions.index', compact('test', 'question', 'answerOptions'));
    }
    /**
     * Show the form for creating a new resource.
     */
    public function create(Test $test, Question $question)
    {
        return view('admin.answerOptions.create', compact('test', 'question'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request, Test $test, Question $question)
    {
        $request->validate([
            'option_text' => 'required|string',
            'option_image' => 'nullable|image',
            'point_value' => 'required|integer',
            'next_question_id' => 'nullable|exists:questions,id',
        ]);
    
        $data = $request->all();
    
        // Обработка загрузки изображения (если есть)
        if ($request->hasFile('option_image')) {
            $path = $request->file('option_image')->store('answer_options', 'public');
            $data['option_image'] = $path;
        }
    
        $question->answerOptions()->create($data);
    
        return redirect()->route('admin.tests.questions.answerOptions.index', [$test, $question])->with('success', 'Вариант ответа успешно добавлен.');
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Test $test, Question $question, AnswerOption $answerOption)
    {
        return view('admin.answerOptions.edit', compact('test', 'question', 'answerOption'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Test $test, Question $question, AnswerOption $answerOption)
    {
        $request->validate([
            'option_text' => 'required|string',
            'option_image' => 'nullable|image',
            'point_value' => 'required|integer',
            'next_question_id' => 'nullable|exists:questions,id',
        ]);
    
        $data = $request->all();
    
        // Обработка загрузки изображения (если есть)
        if ($request->hasFile('option_image')) {
            $path = $request->file('option_image')->store('answer_options', 'public');
            $data['option_image'] = $path;
        }
    
        $answerOption->update($data);
    
        return redirect()->route('admin.tests.questions.answerOptions.index', [$test, $question])->with('success', 'Вариант ответа успешно обновлен.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Test $test, Question $question, AnswerOption $answerOption)
    {
        $answerOption->delete();
    
        return redirect()->route('admin.tests.questions.answerOptions.index', [$test, $question])->with('success', 'Вариант ответа успешно удален.');
    }
}

// app/Http/Controllers/Admin/QuestionController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use App\Models\Question;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function index(Test $test)
    {
        $questions = $test->questions;
        return view('admin.questions.index', compact('test', 'questions'));
    }

    public function create(Test $test)
    {
        return view('admin.questions.create', compact('test'));
    }

    public function store(Request $request, Test $test)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
            'order' => 'nullable|int',
        ]);

        if (empty($validatedData['order'])) {
            // Получаем максимальный порядок вопросов для данного теста и увеличиваем его на 1
            $maxOrder = $test->questions()->max('order');
            $order = $maxOrder ? $maxOrder + 1 : 1;
            $validatedData['order'] = $order;
        }


        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        $question = $test->questions()->create($validatedData);

        return redirect()->route('admin.questions.index', $test)->with('success', 'Вопрос успешно добавлен.');
    }

    public function edit(Test $test, Question $question)
    {
        return view('admin.questions.edit', compact('test', 'question'));
    }

    public function update(Request $request, Test $test, Question $question)
    {
        $validatedData = $request->validate([
            'question_text' => 'required|string',
            'question_image' => 'nullable|image',
            'question_type' => 'required|in:single_choice,multiple_choice',
            'order' => 'nullable|int',
        ]);

        // Обработка загрузки изображения вопроса (если есть)
        if ($request->hasFile('question_image')) {
            $path = $request->file('question_image')->store('questions', 'public');
            $validatedData['question_image'] = $path;
        }

        if (empty($validatedData['order'])) {
            // Получаем максимальный порядок вопросов для данного теста и увеличиваем его на 1
            $maxOrder = $test->questions()->max('order');
            $order = $maxOrder ? $maxOrder + 1 : 1;
            $validatedData['order'] = $order;
        }

        $question->update($validatedData);

        return redirect()->route('admin.questions.index', $test)->with('success', 'Вопрос успешно обновлен.');
    }

    public function destroy(Test $test, Question $question)
    {
        $question->delete();
        return redirect()->route('admin.questions.index', ['test' => $test->id])->with('success', 'Вопрос успешно удален.');
    }
}

// app/Http/Controllers/Admin/TestController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test;
use Illuminate\Http\Request;

class TestController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $tests = Test::all();
        return view('admin.tests.index', compact('tests'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $test = new Test(); // Создаем пустой объект Test
        return view('admin.tests.create', compact('test'));
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'seo_title' => 'nullable|string|max:255',
            'seo_description' => 'nullable|string',
            'call_to_action' => 'nullable|string',
            'full_description' => 'nullable|string',
            'introduction' => 'nullable|string',
            'test_image' => 'nullable|image|max:2048',
        ]);
    
        $data = $request->all();
    
        // Обработка загрузки изображения (если есть)
        if ($request->hasFile('test_image')) {
            $path = $request->file('test_image')->store('test_images', 'public');
            $data['test_image'] = $path;
        }
    
        $test = Test::create($data);
    
        return redirect()->route('admin.questions.index', $test)->with('success', 'Тест успешно создан.');
    }

    /**
     * Display the specified resource.
     *
     * @param \App\Models\Test $test
     * @return \Illuminate\Http\Response
     */
    public function show(Test $test)
    {
        return view('admin.tests.show', compact('test'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param \App\Models\Test $test
     * @return \Illuminate\Http\Response
     */
    public function edit(Test $test)
    {
        return view('admin.tests.edit', compact('test'));
    }


    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param \App\Models\Test $test
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Test $test)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'seo_title' => 'nullable|string|max:255',
            'seo_description' => 'nullable|string',
        ]);

        $test->update($request->all());

        return redirect()->route('admin.tests.index')->with('success', 'Тест успешно обновлен.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param \App\Models\Test $test
     * @return \Illuminate\Http\Response
     */
    public function destroy(Test $test)
    {
        $test->delete();

        return redirect()->route('admin.tests.index')->with('success', 'Тест успешно удален.');
    }
}

// app/Http/Controllers/Admin/TestInterpretationController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Test; 
use Illuminate\Http\Request;

class TestInterpretationController extends Controller
{
    public function edit(Test $test)
    {
        return view('admin.tests.interpretation', compact('test'));
    }
}

// app/Http/Controllers/QuestionController.php
<?php

namespace App\Http\Controllers;

use App\Models\Test;
use App\Models\Question;
use App\Models\UserTestResult;
use App\Models\UserAnswer;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function start(Request $request, Test $test)
    {
        // Создание записи о прохождении теста
        $userTestResult = UserTestResult::create([
            'user_id' => auth()->id(),
            'test_id' => $test->id,
        ]);

        // Перенаправление к первому вопросу
        return redirect()->route('user.questions.show', ['test' => $test->id, 'question' => $test->questions()->first()->id]);
    }

    public function show(Test $test, Question $question)
    {
        return view('user.questions.show', compact('test', 'question'));
    }

    public function answer(Request $request, Test $test, Question $question)
    {
        // Валидация ответа
        $validatedData = $request->validate([
            'selected_option_ids' => 'required|array',
        ]);
    
        // Сохранение ответа пользователя
        $userTestResult = UserTestResult::find($request->user_test_result_id);
    
        $pointsEarned = $this->calculatePoints($question, $validatedData['selected_option_ids']);
        $userAnswer = UserAnswer::create([
            'user_test_result_id' => $userTestResult->id,
            'question_id' => $question->id,
            'selected_option_ids' => $validatedData['selected_option_ids'],
            'points_earned' => $pointsEarned,
        ]);
    
        // Обновление общего количества баллов
        $userTestResult->total_score += $pointsEarned;
        $userTestResult->save();
    
        // Перенаправление к следующему вопросу или завершение теста
        $nextQuestion = $this->getNextQuestion($test, $question, $validatedData['selected_option_ids']);
        if ($nextQuestion) {
            return redirect()->route('user.questions.show', ['test' => $test->id, 'question' => $nextQuestion->id]);
        } else {
            $userTestResult->completed_at = now();
            $userTestResult->interpretResult();
            return redirect()->route('user.tests.result', ['test' => $test->id, 'result' => $userTestResult->id]);
        }
    }

    private function calculatePoints(Question $question, array $selectedOptionIds)
    {
        // Рассчитать количество баллов за ответ
        return AnswerOption::whereIn('id', $selectedOptionIds)->sum('point_value');
    }

    private function getNextQuestion(Test $test, Question $question, array $selectedOptionIds)
    {
        // Определить следующий вопрос на основе условной логики
        $nextQuestionId = AnswerOption::whereIn('id', $selectedOptionIds)->pluck('next_question_id')->first();
        if ($nextQuestionId) {
            return Question::find($nextQuestionId);
        }

        return $test->questions()->where('order', '>', $question->order)->first();
    }
}

// app/Http/Controllers/TestController.php
<?php

namespace App\Http\Controllers;

use App\Models\Test;
use App\Models\UserTestResult;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class TestController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $tests = Test::all();
        $testResultsInProgress = UserTestResult::where('user_id', $user->id)->whereNull('completed_at')->get()->pluck('test_id')->toArray();

        return view('user.tests.index', compact('tests', 'testResultsInProgress'));

    }

    public function show(Test $test)
    {
        return view('user.tests.show', compact('test'));
    }

    public function result(Test $test, UserTestResult $result)
    {
        return view('user.tests.result', compact('test', 'result'));
    }
}

// app/Http/Controllers/UserTestController.php
<?php

namespace App\Http\Controllers;

use App\Models\Test;
use Illuminate\Http\Request;

class UserTestController extends Controller
{
    public function take(Test $test)
    {
        return view('user.tests.take', compact('test'));
    }
}

// app/Http/Controllers/UserTestResultController.php
<?php

namespace App\Http\Controllers;

use App\Models\UserTestResult;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class UserTestResultController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $testResults = UserTestResult::where('user_id', $user->id)->get();
        return view('profile.tests.index', compact('testResults'));
    }

    public function show(UserTestResult $result)
    {
        $this->authorize('view', $result);
        return view('profile.tests.show', compact('result'));
    }
}

// app/Http/Livewire/AnswerOptions.php
<?php

namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\AnswerOption;
use App\Models\Test;
use App\Models\Question;

class AnswerOptions extends Component
{
    use WithFileUploads;

    public $test;
    public $question;
    public $answerOptions = [];

    public function mount($test, $question)
    {
        $this->test = Test::findOrFail($test);

        if (is_int($question)) {
            $this->question = Question::findOrFail($question);
            $this->answerOptions = $this->question->answerOptions->map(function($option) {
                return [
                    'id' => $option->id,
                    'option_text' => $option->option_text,
                    'option_image' => $option->option_image,
                    'point_value' => $option->point_value,
                    'next_question_id' => $option->next_question_id,
                ];
            })->toArray();
        } else {
            $this->question = new Question();
        }
    }

    public function addAnswerOption()
    {
        $this->answerOptions[] = [
            'id' => null,
            'option_text' => '',
            'option_image' => null,
            'point_value' => 0,
            'next_question_id' => null,
        ];
    }

    public function removeAnswerOption($index)
    {
        if (isset($this->answerOptions[$index]['id'])) {
            AnswerOption::destroy($this->answerOptions[$index]['id']);
        }
        unset($this->answerOptions[$index]);
        $this->answerOptions = array_values($this->answerOptions);
    }

    public function save()
    {
        $this->validate([
            'answerOptions.*.option_text' => 'required|string',
            'answerOptions.*.option_image' => 'nullable|image',
            'answerOptions.*.point_value' => 'required|integer',
            'answerOptions.*.next_question_id' => 'nullable|exists:questions,id',
        ]);

        if (!$this->question->exists) {
            $this->question->test_id = $this->test->id;
            $this->question->save();
        }

        foreach ($this->answerOptions as $option) {
            $data = [
                'question_id' => $this->question->id,
                'option_text' => $option['option_text'],
                'point_value' => $option['point_value'],
                'next_question_id' => $option['next_question_id'],
            ];

            if (isset($option['option_image']) && is_object($option['option_image'])) {
                $data['option_image'] = $option['option_image']->store('answer_options', 'public');
            } else {
                $data['option_image'] = $option['option_image'];
            }

            if (isset($option['id'])) {
                AnswerOption::find($option['id'])->update($data);
            } else {
                AnswerOption::create($data);
            }
        }

        session()->flash('message', 'Варианты ответов успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.answer-options');
    }
}

// app/Http/Livewire/StepView.php
<?php

namespace App\Http\Livewire;

use Livewire\Component;

class StepView extends Component
{
    public function render()
    {
        return view('livewire.step-view');
    }
}

// app/Http/Livewire/TestInterpretation.php
<?php

namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Test;

class TestInterpretation extends Component
{
    public $test;
    public $interpretations = [];

    public function mount($testId)
    {
        $this->test = Test::findOrFail($testId);
        $this->interpretations = $this->test->interpretations ?? [];
    }

    public function addInterpretation()
    {
        $this->interpretations[] = ['range' => '', 'interpretation' => '', 'recommendations' => ''];
    }

    public function removeInterpretation($index)
    {
        unset($this->interpretations[$index]);
        $this->interpretations = array_values($this->interpretations);
    }

    public function save()
    {
        $this->test->interpretations = $this->interpretations;
        $this->test->save();
        session()->flash('message', 'Критерии интерпретации и рекомендации успешно сохранены.');
    }

    public function render()
    {
        return view('livewire.test-interpretation');
    }
}

// app/Http/Livewire/UserTest.php
<?php

namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Test;
use App\Models\Question;
use App\Models\UserTestResult;
use App\Models\UserAnswer;

class UserTest extends Component
{
    public $test;
    public $currentQuestion;
    public $userTestResult;
    public $selectedOptionIds = [];
    public $currentOrder = 0;

    public function mount($testId)
    {
        $this->test = Test::findOrFail($testId);
        $this->userTestResult = UserTestResult::firstOrCreate([
            'user_id' => auth()->id(),
            'test_id' => $this->test->id,
        ]);
        $this->loadNextQuestion();
    }

    public function loadNextQuestion()
    {
        $this->currentQuestion = $this->test->questions()->where('order', '>', $this->currentOrder)->orderBy('order')->first();
        if ($this->currentQuestion) {
            $this->currentOrder = $this->currentQuestion->order;
        } else {
            $this->completeTest();
        }
    }

    public function submitAnswer()
    {
        if ($this->currentQuestion->question_type == 'single_choice') {
            $this->selectedOptionIds = collect([$this->selectedOptionIds])->toArray();
        }

        $this->validate([
            'selectedOptionIds' => 'required|array|min:1',
        ]);

        $pointsEarned = $this->calculatePoints($this->currentQuestion, $this->selectedOptionIds);

        UserAnswer::create([
            'user_test_result_id' => $this->userTestResult->id,
            'question_id' => $this->currentQuestion->id,
            'selected_option_ids' => $this->selectedOptionIds,
            'points_earned' => $pointsEarned,
        ]);

        $this->userTestResult->total_score += $pointsEarned;
        $this->userTestResult->save();

        $this->selectedOptionIds = [];
        $this->loadNextQuestion();
    }

    public function completeTest()
    {
        $this->userTestResult->completed_at = now();
        $this->userTestResult->interpretResult();
        return redirect()->route('user.tests.result.show', ['result' => $this->userTestResult->id]);
    }

    private function calculatePoints(Question $question, array $selectedOptionIds)
    {
        return $question->answerOptions()->whereIn('id', $selectedOptionIds)->sum('point_value');
    }

    public function render()
    {
        return view('livewire.user-test');
    }
}

// app/Models/AnswerOption.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AnswerOption extends Model
{
    use HasFactory;

    protected $fillable = ['question_id', 'option_text', 'option_image', 'point_value', 'next_question_id'];

    public function question()
    {
        return $this->belongsTo(Question::class);
    }

    public function nextQuestion()
    {
        return $this->belongsTo(Question::class, 'next_question_id');
    }
}

// app/Models/Answer.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Answer extends Model
{
    use HasFactory;
}

// app/Models/Question.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Question extends Model
{
    use HasFactory;


    protected $fillable = ['test_id', 'question_text', 'question_image', 'question_type', 'order'];

    public function test()
    {
        return $this->belongsTo(Test::class);
    }

    public function answerOptions()
    {
        return $this->hasMany(AnswerOption::class);
    }

    public function answers()
    {
        return $this->hasMany(Answer::class);
    }
}

// app/Models/Test.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Test extends Model
{
    use HasFactory;

    protected $fillable = [
        'title', 'description', 'seo_title', 'seo_description', 'call_to_action', 'full_description', 'introduction', 'test_image', 'interpretations'
    ];

    protected $casts = [
        'interpretations' => 'array',
    ];

    public function questions()
    {
        return $this->hasMany(Question::class);
    }

    public function userTestResults()
    {
        return $this->hasMany(UserTestResult::class);
    }
}

// app/Models/UserAnswer.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class UserAnswer extends Model
{
    use HasFactory;

    protected $fillable = ['user_test_result_id', 'question_id', 'selected_option_ids', 'points_earned'];

    protected $casts = [
        'selected_option_ids' => 'array',
    ];

    public function userTestResult()
    {
        return $this->belongsTo(UserTestResult::class);
    }

    public function question()
    {
        return $this->belongsTo(Question::class);
    }
}

// app/Models/UserTestResult.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Carbon;

class UserTestResult extends Model
{
    use HasFactory;

    protected $fillable = ['user_id', 'test_id', 'total_score', 'interpretation', 'recommendations', 'completed_at'];

    protected $dates = ['completed_at'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function test()
    {
        return $this->belongsTo(Test::class);
    }

    public function userAnswers()
    {
        return $this->hasMany(UserAnswer::class);
    }

    public function interpretResult()
    {
        $interpretations = $this->test->interpretations;

        foreach ($interpretations as $interpretation) {
            list($min, $max) = explode('-', $interpretation['range']);
            if ($this->total_score >= $min && $this->total_score <= $max) {
                $this->interpretation = $interpretation['interpretation'];
                $this->recommendations = $interpretation['recommendations'];
                break;
            }
        }

        $this->save();
    }

    public function getCompletedAtAttribute($value)
    {
        return Carbon::parse($value);
    }
}

// database/migrations/2024_09_15_082848_create_tests_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('tests', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('description')->nullable();
            $table->string('seo_title')->nullable();
            $table->text('seo_description')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('tests');
    }
};

// database/migrations/2024_09_15_082859_create_questions_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('questions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('test_id')->constrained()->onDelete('cascade');
            $table->text('question_text');
            $table->string('question_image')->nullable();
            $table->enum('question_type', ['single_choice', 'multiple_choice']);
            $table->integer('order')->default(0);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('questions');
    }
};

// database/migrations/2024_09_15_082908_create_answer_options_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('answer_options', function (Blueprint $table) {
            $table->id();
            $table->foreignId('question_id')->constrained()->onDelete('cascade');
            $table->text('option_text')->nullable();
            $table->string('option_image')->nullable();
            $table->integer('point_value')->default(0);
            $table->foreignId('next_question_id')->nullable()->constrained('questions')->onDelete('set null');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('answer_options');
    }
};

// database/migrations/2024_09_15_082916_create_user_test_results_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('user_test_results', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('test_id')->constrained()->onDelete('cascade');
            $table->integer('total_score')->default(0);
            $table->text('interpretation')->nullable();
            $table->text('recommendations')->nullable();
            $table->timestamp('completed_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('user_test_results');
    }
};

// database/migrations/2024_09_15_082938_create_user_answers_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('user_answers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_test_result_id')->constrained()->onDelete('cascade');
            $table->foreignId('question_id')->constrained()->onDelete('cascade');
            $table->json('selected_option_ids')->nullable();
            $table->integer('points_earned')->default(0);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('user_answers');
    }
};

// database/migrations/2024_09_15_135840_add_new_fields_to_tests_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('tests', function (Blueprint $table) {
            $table->text('call_to_action')->nullable();
            $table->text('full_description')->nullable();
            $table->text('introduction')->nullable();
            $table->string('test_image')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('tests', function (Blueprint $table) {
            $table->dropColumn(['call_to_action', 'full_description', 'introduction', 'test_image']);
        });
    }
};

// database/migrations/2024_09_15_155303_create_answers_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('answers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('question_id')->constrained()->onDelete('cascade');
            $table->string('text');
            $table->boolean('is_correct')->default(false);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('answers');
    }
};

// resources/views/admin/answerOptions/create.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вариант ответа к вопросу: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.questions.answerOptions.store', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea name="option_text" class="w-full px-4 py-2 border rounded" required>{{ old('option_text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" name="option_image" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" name="point_value" value="{{ old('point_value') }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select name="next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}" {{ old('next_question_id') == $nextQuestion->id ? 'selected' : '' }}>{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.answerOptions.index', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

// resources/views/admin/answerOptions/edit.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вариант ответа для вопроса: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.tests.questions.answerOptions.update', [$test, $question, $answerOption]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст варианта ответа</label>
                    <textarea name="option_text" class="w-full px-4 py-2 border rounded" required>{{ old('option_text', $answerOption->option_text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                    <input type="file" name="option_image" class="w-full px-4 py-2 border rounded">
                    @if($answerOption->option_image)
                        <img src="{{ asset('storage/' . $answerOption->option_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Баллы за ответ</label>
                    <input type="number" name="point_value" value="{{ old('point_value', $answerOption->point_value) }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                    <select name="next_question_id" class="w-full px-4 py-2 border rounded">
                        <option value="">Выберите следующий вопрос</option>
                        @foreach($test->questions as $nextQuestion)
                            <option value="{{ $nextQuestion->id }}" {{ old('next_question_id', $answerOption->next_question_id) == $nextQuestion->id ? 'selected' : '' }}>{{ $nextQuestion->question_text }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.questions.answerOptions.index', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

// resources/views/admin/answerOptions/index.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Варианты ответов для вопроса: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.tests.questions.answerOptions.create', [$test, $question]) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый вариант ответа</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст варианта ответа</th>
                            <th class="px-6 py-3 bg-gray-50">Баллы</th>
                            <th class="px-6 py-3 bg-gray-50">Следующий вопрос</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($answerOptions as $option)
                            <tr>
                                <td class="border px-6 py-4">{{ $option->id }}</td>
                                <td class="border px-6 py-4">{{ $option->option_text }}</td>
                                <td class="border px-6 py-4">{{ $option->point_value }}</td>
                                <td class="border px-6 py-4">{{ optional($option->nextQuestion)->question_text }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.tests.questions.answerOptions.edit', [$test, $question, $option]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.tests.questions.answerOptions.destroy', [$test, $question, $option]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот вариант ответа?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($answerOptions->isEmpty())
                            <tr>
                                <td colspan="5" class="px-6 py-4 text-center">Варианты ответов не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/answers/create.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить ответ к вопросу') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.questions.answers.store', [$test, $question]) }}" method="POST" class="bg-white p-6 rounded shadow-md">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700">Текст ответа</label>
                    <textarea name="text" class="w-full px-4 py-2 border rounded" required>{{ old('text') }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Правильный ответ</label>
                    <input type="checkbox" name="is_correct" value="1" {{ old('is_correct') ? 'checked' : '' }} class="rounded">
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.questions.show', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

// resources/views/admin/answers/edit.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать ответ') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ route('admin.questions.answers.update', [$test, $question, $answer]) }}" method="POST" class="bg-white p-6 rounded shadow-md">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700">Текст ответа</label>
                    <textarea name="text" class="w-full px-4 py-2 border rounded" required>{{ old('text', $answer->text) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Правильный ответ</label>
                    <input type="checkbox" name="is_correct" value="1" {{ old('is_correct', $answer->is_correct) ? 'checked' : '' }} class="rounded">
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.questions.show', [$test, $question]) }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

// resources/views/admin/index.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Админка
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Телеграм -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Телеграм</h3>
                    <a href="{{ route('admin_telegram_dashbord') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление Телеграм</a>
                </div>

                <!-- Список страниц -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Список страниц</h3>
                    <a href="{{ route('admin_pagelist') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление страницами</a>
                </div>

                <!-- Пользователи -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Пользователи</h3>
                    <a href="{{ route('admin_users') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление пользователями</a>
                </div>

                <!-- Тарифы -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Тарифы</h3>
                    <a href="{{ route('admin_tariffsession') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление тарифами</a>
                </div>

                <!-- Типы сессий -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Типы сессий</h3>
                    @livewire('admin.add-session-type')
                </div>

                <!-- Тесты -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold mb-4">Тесты</h3>
                    <a href="{{ route('admin.tests.index') }}" class="btn bg-blue-500 text-white px-4 py-2 rounded">Управление тестами</a>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/page.blade copy.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           "{{ $post->name }}"
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">

        </div>
    </div>
 
    <div id="editorjs" class="border p-2 mb-3 bg-white"></div>

    <div><a href="#" class="btn bg-born-brown no-underline text-born-white mt-3" id="savepage" >Сохранить</a></div>
    
    @push('scripts')
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script>
    <script>
        
        var editorData = {{ Js::from($post->content) }};

        function getEditorData(){
            return editorData;
        }

        document.getElementById('savepage').addEventListener("click", savepage);


        function savepage(event) {
            event.preventDefault();

            editor.save().then((outputData) => {
                console.log('Article data: ', outputData);

                    axios.post('{{ route("admin_pagesave",["Post"=>1]) }}', {
                        content: outputData,
                        
                    })
                    .then(function (response) {
                        console.log(response);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            }).catch((error) => {
                console.log('Saving failed: ', error)
            });
        }


    </script>
    @vite(['resources/js/editorjs.js'])
    
    @endpush
</x-app-layout>

// resources/views/admin/page.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           "{{ $post->name }}"
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="my-2">
                <input type="text" id="name" placeholder="Название" value="{{$post->name}}" required>
            </div>
            <div class="my-2">
                <input type="text" id="slug" placeholder="slug" value="{{$post->slug}}" required>
            </div>
            <div class="my-2">
                <label for="is_active">Активен</label>
                <input type="checkbox" name="is_active" id="is_active" value="1" @checked($post->is_active)>
            </div>
            <div class="my-2">
                <label for="img">Изображение</label>
                <input type="file" name="img" id="img">
                @if ($post->img)
                    <img src="{{$post->img}}" class="w-48" alt="">
                @endif
                <div class="mt-3"><a href="#" class="btn bg-born-brown no-underline text-born-white pt-3" id="saveimg" >Сохранить изображение</a></div>
            </div>
        </div>
    </div>


    <div id="editorjs" class="border p-2 mb-3 bg-white"></div>

    <div><a href="#" class="btn bg-born-brown no-underline text-born-white mt-3" id="savepage" >Сохранить</a></div>
    
    @push('scripts')
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script>
    <script>
        
        var editorData = {{ Js::from($post->content) }};

        function getEditorData(){
            return editorData;
        }

        document.getElementById('savepage').addEventListener("click", savepage);
        document.getElementById('saveimg').addEventListener("click", saveimg);

        function saveimg(event){
            event.preventDefault();

            var formData = new FormData();
            var imagefile = document.getElementById('img');
            formData.append("file", imagefile.files[0]);
            axios.post('{{ route("admin_pageimgsave",["Post"=>$post->id ?? 0]) }}', formData, {
                headers: {
                'Content-Type': 'multipart/form-data'
                }
            })
            .then(function (response) {
            console.log(response);
                if (response.data.redirect) {
                    document.location.href = response.data.redirect;
                }
            })
            .catch(function (error) {
            console.log(error);
            });


        }

        function savepage(event) {
            event.preventDefault();

            editor.save().then((outputData) => {
                console.log('Article data: ', outputData);

                var form = {
                    content: outputData,
                    name: document.getElementById('name').value,
                    slug: document.getElementById('slug').value,
                    is_active: document.getElementById('is_active').checked,
                }
                console.log('form data: ', form);

                    axios.post('{{ route("admin_pagesave",["Post"=>$post->id]) }}', form )
                    .then(function (response) {


                        console.log(response);
                        if (response.data.redirect) {
                            document.location.href = response.data.redirect;
                        }

                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            }).catch((error) => {
                console.log('Saving failed: ', error)
            });
        }


    </script>
    @vite(['resources/js/editorjs.js'])
    
    @endpush
</x-app-layout>

// resources/views/admin/pagelist.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Список страниц
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="py-3">
                <a href="{{route('admin_pagenew')}}" class="btn bg-born-brown text-born-white">Создать новую</a>
            </div>
            @foreach ($list as $post)
            <div class="flex justify-between">
                <div># {{$post->id }} <a href="{{route('admin_page',['Post'=>$post->id])}}">{{$post->name}}</a></div>
                <div><a href="{{route('admin_pageview',['Post'=>$post->id])}}">Посмотреть</a></div>
            </div>
                
            @endforeach
        </div>
    </div>
</x-app-layout>

// resources/views/admin/pageview.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           "{{ $post->name }}"
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-8 lg:px-11 px-3 bg-white">
            {!! editorRender($post->content['blocks']) !!}
        </div>
    </div>
 
    
</x-app-layout>

// resources/views/admin/questions/create.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Добавить вопрос к тесту: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if ($errors->any())
                    <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                        <ul class="list-disc list-inside">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif

                <form action="{{ route('admin.questions.store', $test) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                    @csrf
                    <div class="mb-4">
                        <label class="block text-gray-700">Текст вопроса</label>
                        <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text') }}</textarea>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                        <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Тип вопроса</label>
                        <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                            <option value="single_choice" {{ old('question_type') == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                            <option value="multiple_choice" {{ old('question_type') == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Порядок (необязательно)</label>
                        <input type="number" name="order" value="{{ old('order') }}" class="w-full px-4 py-2 border rounded">
                    </div>

                    <hr class="my-4">

                    @livewire('answer-options', ['test' => $test->id, 'question' => null])

                    <div class="flex items-center">
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                        <a href="{{ route('admin.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/questions/edit.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Редактировать вопрос для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if ($errors->any())
                    <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                        <ul class="list-disc list-inside">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif

                <form action="{{ route('admin.questions.update', [$test, $question]) }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                    @csrf
                    @method('PUT')
                    <div class="mb-4">
                        <label class="block text-gray-700">Текст вопроса</label>
                        <textarea name="question_text" class="w-full px-4 py-2 border rounded" required>{{ old('question_text', $question->question_text) }}</textarea>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Изображение вопроса (необязательно)</label>
                        <input type="file" name="question_image" class="w-full px-4 py-2 border rounded">
                        @if($question->question_image)
                            <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-2">
                        @endif
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Тип вопроса</label>
                        <select name="question_type" class="w-full px-4 py-2 border rounded" required>
                            <option value="single_choice" {{ old('question_type', $question->question_type) == 'single_choice' ? 'selected' : '' }}>Одиночный выбор</option>
                            <option value="multiple_choice" {{ old('question_type', $question->question_type) == 'multiple_choice' ? 'selected' : '' }}>Множественный выбор</option>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Порядок (необязательно)</label>
                        <input type="number" name="order" value="{{ old('order', $question->order) }}" class="w-full px-4 py-2 border rounded">
                    </div>

                    <hr class="my-4">

                    @livewire('answer-options', ['test' => $test->id, 'question' => $question->id])

                    <div class="flex items-center">
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                        <a href="{{ route('admin.questions.index', $test) }}" class="ml-4 text-gray-700">Отмена</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/questions/index.blade.php
@php
    $Parsedown = new Parsedown();
@endphp

<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопросы теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.questions.create', $test) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый вопрос</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">Порядковый номер</th>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Тип вопроса</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($questions as $question)
                            <tr>
                                <td class="border px-6 py-4">{{ $question->order }}</td>
                                <td class="border px-6 py-4">{{ $question->id }}</td>
                                <td class="border px-6 py-4">{!! $Parsedown->text($question->question_text) !!}</td>
                                <td class="border px-6 py-4">{{ $question->question_type == 'single_choice' ? 'Одиночный выбор' : 'Множественный выбор' }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.questions.edit', [$test, $question]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.questions.destroy', [$test, $question]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот вопрос?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($questions->isEmpty())
                            <tr>
                                <td colspan="5" class="px-6 py-4 text-center">Вопросы не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/questions/show.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопрос: ') . $question->question_text }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.tests.questions.answers.create', [$test, $question]) }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый ответ</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Текст ответа</th>
                            <th class="px-6 py-3 bg-gray-50">Правильный</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($question->answers as $answer)
                            <tr>
                                <td class="border px-6 py-4">{{ $answer->id }}</td>
                                <td class="border px-6 py-4">{{ $answer->text }}</td>
                                <td class="border px-6 py-4">{{ $answer->is_correct ? 'Да' : 'Нет' }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.tests.questions.answers.edit', [$test, $question, $answer]) }}" class="text-blue-500">Редактировать</a>
                                    <form action="{{ route('admin.tests.questions.answers.destroy', [$test, $question, $answer]) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот ответ?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($question->answers->isEmpty())
                            <tr>
                                <td colspan="4" class="px-6 py-4 text-center">Ответы не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/steplist.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Шаги "{{ $sessionType->name }}"
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <div class="mb-5">
                <h3 class="font-bold text-md">Подсказки</h3>
                <div><b>start_situation</b> - просто переменная, будет заменена</div>
                <div><b>#loop_start_current#</b> - переменная, будет заменена перед заменой всех простых переменных и массивов. например для <i>loop_start.#loop_start_current#.body</i> будет <i>loop_start.0.body</i> если <i>loop_start_current = 0</i></div>
                <div><b>loop_start.#loop_start_current#.strah</b> - Просто возьмет элемент массива</div>
                <div><b>{loop_start.#loop_start_current#.opastnost|-2}</b> - Возьмет -2 элемент масива. т.е предпоследний</div>
                <div><b>[loop_start.#loop_start_current#.opastnost|"|А после этого |< br >] </b> - сделает foreach элементов масива. в данном случае обернет каждый элмент в кавычки. вначале добавит надпись и в конце перевод строки</div>
                <div><b>@34,35,36,37,38,39,40,41,42,43,44|checks||- < b >|</ b >< br >@ </b> - аналогично предыдущему, но работает с данными из пользовательских ответов. <i>id из ид в списке ниже</i> <i>checks масив из ответов</i></div>
                <div><b>$67, 68, 69|answer||- |< br >$ </b> - Достает ответ по ИД шага </div>
                
            </div>
            @livewire('admin.step-list', ['sessionType'=>$sessionType])
        </div>
    </div>

    
    @push('scripts')
    <script src="/js/myeditor.js"></script>
    <script>
        myeditor('content'); 
        document.addEventListener('livewire:update', function () {
            myeditor('content'); 
        })

    </script>
    @endpush
</x-app-layout>

// resources/views/admin/tariffsession.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Тарифы
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            @livewire('admin.tariff-session')
        </div>
    </div>
</x-app-layout>

// resources/views/admin/telegram/blocks.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Блоки {{$Bot->name}}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            @livewire('admin.telegram.add-block',['bot'=>$Bot])
            
        </div>
    </div>

</x-app-layout>

// resources/views/admin/telegram/index.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Телеграм
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            <h2>Боты</h2>
            @foreach ($bots as $item)
                <div class="flex">
                    <div>{{ $item->id}}</div>
                    <div class="ml-3">{{ $item->name}}</div>
                    <div class="ml-3"><a href="{{ route('admin_telegram_blocks',['id'=>$item->id])}}">Блоки</a></div>
                </div>
            @endforeach


            <div  class="mt-5">
                <a class="btn" href="{{route('admin_telegram_dashbord')}}">Телеграм</a>
            </div>
            
        </div>
    </div>

</x-app-layout>

// resources/views/admin/telegram/steps.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Шаги для блока {{$Block->name}}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            @livewire('admin.telegram.add-step',['block'=>$Block])
        </div>
    </div>
    <script>

        var m = document.getElementsByClassName('draggable-head');
        

        const d = document.getElementsByClassName("draggable-head");
        
        for (let i = 0; i < d.length; i++) {
            d[i].style.position = "relative";
        }
        
       

        function filter(e) {
            let target = e.target;
            
            if (!target.classList.contains("draggable-head")) {
                return true;
            }
            target = target.parentElement.parentElement.parentElement.parentElement;
            
            target.moving = true;

            //NOTICE THIS 👇 Check if Mouse events exist on users' device
            if (e.clientX) {
                target.oldX = e.clientX; // If they exist then use Mouse input
                target.oldY = e.clientY;
            } 
            target.oldLeft = window.getComputedStyle(target).getPropertyValue('left').split('px')[0] * 1;
            target.oldTop = window.getComputedStyle(target).getPropertyValue('top').split('px')[0] * 1;

            document.onmousemove = dr;
            //NOTICE THIS 👇
            document.ontouchmove = dr;
            //NOTICE THIS 👆

            function dr(event) {
                event.preventDefault();

                if (!target.moving) {
                return;
                }
                //NOTICE THIS 👇
                if (event.clientX) {
                target.distX = event.clientX - target.oldX;
                target.distY = event.clientY - target.oldY;
                } else {
                target.distX = event.touches[0].clientX - target.oldX;
                target.distY = event.touches[0].clientY - target.oldY;
                }
                //NOTICE THIS 👆

                target.style.left = target.oldLeft + target.distX + "px";
                target.style.top = target.oldTop + target.distY + "px";
            }

            function endDrag() {
                target.moving = false;
            }
            target.onmouseup = endDrag;
            //NOTICE THIS 👇
            target.ontouchend = endDrag;
            //NOTICE THIS 👆
        }
        document.onmousedown = filter;

    </script>
</x-app-layout>

// resources/views/admin/telegram/step_blocks/message.blade.php
<div class="p-2">
            
    @foreach ($commands as $index => $command)
        <div class="mb-3 mt-3 border rounded "  wire:key="commands-field-{{ $command->id }}">
            <div class="bg-orange-300 p-2 rounded flex">
                <select class="text-xs py-1" name="" id="" wire:model.defer = "commands.{{ $index }}.type">
                    @foreach ($command_types as $type)
                        <option value="{{ $type }}">{{ $type }}</option>
                    @endforeach
                </select>
                <div class="ml-3 mr-3">Порядок</div>
                <input class="w-6" type="text" name="" id="" wire:model.defer = "commands.{{ $index }}.ord">
            </div>
            <div class="p-2">
                <textarea name="" id="" cols="30" rows="10" wire:model.defer="commands.{{ $index }}.data"></textarea>
            </div>
        </div>
    @endforeach
</div>

// resources/views/admin/telegram/step_blocks/type-if.blade.php
<div class="mt-3 px-2">
    <form action="" wire:submit.prevent = "save_if">
        Условия
        
        <textarea name="" id="" cols="30" rows="10"  wire:model.defer = 'if_value'></textarea>
        <button type="submit" class="btn flex bg-cyan-500 text-xs p-1">
            <svg xmlns="http://www.w3.org/2000/svg"  class="mr-2 w-5 h-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9.75v6.75m0 0l-3-3m3 3l3-3m-8.25 6a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z" />
              </svg>
              
            Сохранить</button>  
    </form>
</div>

// resources/views/admin/telegram/step_blocks/type-message.blade.php
<form action="" wire:submit.prevent = "commands_save" enctype="multipart/form-data">
    <div class="px-2 flex">
    <a class="btn mt-6 flex items-center  items-center bg-green-500 text-white p-1 text-xs mr-2" href="#" wire:click.prevent='addCommand'>
        <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 w-5 h-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          
        Добавить команду</a>
        <button type="submit" class="btn flex  items-center bg-cyan-500 text-xs p-1">
            <svg xmlns="http://www.w3.org/2000/svg"  class="mr-2 w-5 h-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9.75v6.75m0 0l-3-3m3 3l3-3m-8.25 6a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z" />
              </svg>
              
            Сохранить команды</button>      
    </div>
<div class="p-2">    
    @foreach ($commands as $index => $command)
    @if ($command->type == 'TEXT' || $command->type == 'VIDEO')
        <div class="mb-3 mt-3 border rounded "  wire:key="commands-field-{{ $command->id }}">
            <div class="bg-orange-300 p-2 rounded flex">
                <select class="text-xs py-1" name="" id="" wire:model.defer = "commands.{{ $index }}.type">
                    @foreach ($command_types as $type)
                        <option value="{{ $type }}">{{ $type }}</option>
                    @endforeach
                </select>
                <div class="ml-3 mr-3">Порядок</div>
                <input class="w-6" type="text" name="" id="" wire:model.defer = "commands.{{ $index }}.ord">
            </div>
            <div class="p-2">
                <textarea name="" id="" class="w-full" wire:model.defer="commands.{{ $index }}.data"></textarea>
            </div>
            
            <div class="p-2">
                Кнопки
                <textarea name="" id="" class="w-full" wire:model.defer="commands.{{ $index }}.buttons"></textarea>
            </div>
        </div>
    @endif

    @if ($command->type == 'PHOTO')
        <div class="mb-3 mt-3 border rounded "  wire:key="commands-field-{{ $command->id }}">
            <div class="p-2">
                @if (!empty($command->data))
                    <img class="w-28" src="{{ Storage::url($command->data) }}" alt="">
                @endif
            </div>
                <input type="file" wire:model.defer="photo.{{ $index }}">
                @error('photo.{{ $index }}') <span class="error">{{ $message }}</span> @enderror
        </div> 
    @endif
    @if ($command->type == 'AUDIO' || $command->type == 'VOICE')
        <div class="mb-3 mt-3 border rounded "  wire:key="commands-field-{{ $command->id }}">
            <div class="p-2">
                @if (!empty($command->data))
                    <audio controls src="{{ Storage::url($command->data) }}"></audio>
                @endif
            </div>
                <input type="file" wire:model.defer="file.{{ $index }}">
                @error('file.{{ $index }}') <span class="error">{{ $message }}</span> @enderror
        </div> 
    @endif
    @if ($command->type == 'TYPING')
        <div class="mb-3 mt-3 border rounded p-2"  wire:key="commands-field-{{ $command->id }}">
            TYPING 5 секунд
        </div> 
    @endif
    @endforeach 
</div>
</form>

// resources/views/admin/telegram/step_blocks/type-timer.blade.php
<div class="mt-3 px-2">
    <form action="" wire:submit.prevent = "save_timer">
        Секунды
        <input type="text" name="" id="" wire:model.defer = 'timer_value'>
        <button type="submit" class="btn flex bg-cyan-500 text-xs p-1">
            <svg xmlns="http://www.w3.org/2000/svg"  class="mr-2 w-5 h-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9.75v6.75m0 0l-3-3m3 3l3-3m-8.25 6a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z" />
              </svg>
              
            Сохранить</button>  
    </form>
</div>

// resources/views/admin/telegram/step_blocks/type-var.blade.php
<div class="mt-3 px-2">
    <form action="" wire:submit.prevent = "save_var">
        Переменные
        
        <textarea name="" id="" class="w-full"  wire:model.defer = 'var_value'></textarea>
        <button type="submit" class="btn flex bg-cyan-500 text-xs p-1">
            <svg xmlns="http://www.w3.org/2000/svg"  class="mr-2 w-5 h-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9.75v6.75m0 0l-3-3m3 3l3-3m-8.25 6a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z" />
              </svg>
              
            Сохранить</button>  
    </form>
</div>

// resources/views/admin/telegram/step_types/message.blade.php
<div class="p-2">
            
    @foreach ($commands as $index => $command)
        <div class="mb-3 mt-3 border rounded "  wire:key="commands-field-{{ $command->id }}">
            <div class="bg-orange-300 p-2 rounded flex">
                <select class="text-xs py-1" name="" id="" wire:model.defer = "commands.{{ $index }}.type">
                    @foreach ($command_types as $type)
                        <option value="{{ $type }}">{{ $type }}</option>
                    @endforeach
                </select>
                <div class="ml-3 mr-3">Порядок</div>
                <input class="w-6" type="text" name="" id="" wire:model.defer = "commands.{{ $index }}.ord">
            </div>
            <div class="p-2">
                <textarea name="" id="" cols="30" rows="10" wire:model.defer="commands.{{ $index }}.data"></textarea>
            </div>
        </div>
    @endforeach
</div>

// resources/views/admin/telegram/step_types/timer.blade.php


// resources/views/admin/tests/create.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ $test->exists ? __('Редактировать тест') : __('Создать новый тест') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ $test->exists ? route('admin.tests.update', $test) : route('admin.tests.store') }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @if($test->exists)
                    @method('PUT')
                @endif
                <div class="mb-4">
                    <label class="block text-gray-700">Название теста</label>
                    <input type="text" name="title" value="{{ old('title', $test->title) }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Описание</label>
                    <textarea name="description" class="w-full px-4 py-2 border rounded">{{ old('description', $test->description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Заголовок</label>
                    <input type="text" name="seo_title" value="{{ old('seo_title', $test->seo_title) }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Описание</label>
                    <textarea name="seo_description" class="w-full px-4 py-2 border rounded">{{ old('seo_description', $test->seo_description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Призыв к действию</label>
                    <textarea name="call_to_action" class="w-full px-4 py-2 border rounded">{{ old('call_to_action', $test->call_to_action) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Полное описание теста</label>
                    <textarea name="full_description" class="w-full px-4 py-2 border rounded">{{ old('full_description', $test->full_description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Вступление перед тестом</label>
                    <textarea name="introduction" class="w-full px-4 py-2 border rounded">{{ old('introduction', $test->introduction) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Картинка теста (необязательно)</label>
                    <input type="file" name="test_image" class="w-full px-4 py-2 border rounded">
                    @if($test->test_image)
                        <img src="{{ asset('storage/' . $test->test_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.index') }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

// resources/views/admin/tests/edit.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ $test->exists ? __('Редактировать тест') : __('Создать новый тест') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            @if ($errors->any())
                <div class="bg-red-100 text-red-800 px-4 py-2 mb-4 rounded">
                    <ul class="list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form action="{{ $test->exists ? route('admin.tests.update', $test) : route('admin.tests.store') }}" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
                @csrf
                @if($test->exists)
                    @method('PUT')
                @endif
                <div class="mb-4">
                    <label class="block text-gray-700">Название теста</label>
                    <input type="text" name="title" value="{{ old('title', $test->title) }}" class="w-full px-4 py-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Описание</label>
                    <textarea name="description" class="w-full px-4 py-2 border rounded">{{ old('description', $test->description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Заголовок</label>
                    <input type="text" name="seo_title" value="{{ old('seo_title', $test->seo_title) }}" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">SEO Описание</label>
                    <textarea name="seo_description" class="w-full px-4 py-2 border rounded">{{ old('seo_description', $test->seo_description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Призыв к действию</label>
                    <textarea name="call_to_action" class="w-full px-4 py-2 border rounded">{{ old('call_to_action', $test->call_to_action) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Полное описание теста</label>
                    <textarea name="full_description" class="w-full px-4 py-2 border rounded">{{ old('full_description', $test->full_description) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Вступление перед тестом</label>
                    <textarea name="introduction" class="w-full px-4 py-2 border rounded">{{ old('introduction', $test->introduction) }}</textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Картинка теста (необязательно)</label>
                    <input type="file" name="test_image" class="w-full px-4 py-2 border rounded">
                    @if($test->test_image)
                        <img src="{{ asset('storage/' . $test->test_image) }}" class="mt-2">
                    @endif
                </div>
                <div class="flex items-center">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    <a href="{{ route('admin.tests.index') }}" class="ml-4 text-gray-700">Отмена</a>
                </div>
            </form>

        </div>
    </div>
</x-app-layout>

// resources/views/admin/tests/index.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Список тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="mb-4">
                <a href="{{ route('admin.tests.create') }}" class="bg-blue-500 text-white px-4 py-2 rounded">Добавить новый тест</a>
            </div>
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50">ID</th>
                            <th class="px-6 py-3 bg-gray-50">Название</th>
                            <th class="px-6 py-3 bg-gray-50">Описание</th>
                            <th class="px-6 py-3 bg-gray-50">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($tests as $test)
                            <tr>
                                <td class="border px-6 py-4">{{ $test->id }}</td>
                                <td class="border px-6 py-4">{{ $test->title }}</td>
                                <td class="border px-6 py-4">{{ $test->description }}</td>
                                <td class="border px-6 py-4">
                                    <a href="{{ route('admin.tests.edit', $test) }}" class="text-blue-500">Редактировать</a>
                                    <a href="{{ route('admin.tests.interpretation.edit', $test) }}" class="text-green-500 ml-4">Параметры интерпретации</a>
                                    <form action="{{ route('admin.tests.destroy', $test) }}" method="POST" class="inline-block" onsubmit="return confirm('Вы уверены, что хотите удалить этот тест?');">
                                        @csrf
                                        @method('DELETE')
                                        <button type="submit" class="text-red-500 ml-2">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                        @if($tests->isEmpty())
                            <tr>
                                <td colspan="4" class="px-6 py-4 text-center">Тесты не найдены.</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/tests/interpretation.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Настройка критериев интерпретации и рекомендаций для теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @livewire('test-interpretation', ['testId' => $test->id])
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/admin/users.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Список Пользователей
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            
            @foreach ($list as $user)
            <div class="flex items-center py-2 border-b-2 flex-wrap">
                <div class="w-2/5"># {{$user->id }} <b>{{ $user->name }}</b> {{ $user->email }}</div>
                <div class="w-1/12 ml-3"><span class="bg-green-500 px-3 text-xs rounded-lg py-1">{{ $user->coin }}</span></div>
                <div class="ml-5"><a href="{{route('admin_user_auth',['id'=>$user->id])}}">Аворизоваться</a></div>
                <div class="ml-5"><a href="{{route('admin_user_tariff',['id'=>$user->id])}}">Тарифы</a> ({{$user->tariff->id}} - {{$user->tariff->name}})</div>
            </div>
                
            @endforeach
        </div>
    </div>
</x-app-layout>

// resources/views/admin/usertariff.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           Права и тарифы пользователя {{ $user->name}} - {{ $user->email}}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 px-2">
            @livewire('admin.user-tariff',['user'=>$user])
            @livewire('admin.tariff-expire',['user'=>$user])
        </div>
    </div>
</x-app-layout>

// resources/views/livewire/answer-options.blade.php
<div class="bg-white shadow-md rounded-lg p-6 mb-4">
    @if (session()->has('message'))
        <div class="bg-green-100 border-t border-b border-green-500 text-green-700 px-4 py-3 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">Варианты ответов</h3>

    @foreach ($answerOptions as $index => $option)
        <div class="answer-option mb-6 p-4 border rounded-lg bg-gray-50">
            <div class="mb-4">
                <label class="block text-gray-700">Текст варианта ответа</label>
                <textarea wire:model="answerOptions.{{ $index }}.option_text" class="w-full px-4 py-2 border rounded" required></textarea>
                @error('answerOptions.' . $index . '.option_text') <span class="text-red-500">{{ $message }}</span> @enderror
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Изображение варианта ответа (необязательно)</label>
                <input type="file" wire:model="answerOptions.{{ $index }}.option_image" class="w-full px-4 py-2 border rounded">
                @if (isset($option['option_image']) && is_string($option['option_image']))
                    <img src="{{ asset('storage/' . $option['option_image']) }}" class="mt-2">
                @endif
                @error('answerOptions.' . $index . '.option_image') <span class="text-red-500">{{ $message }}</span> @enderror
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Баллы за ответ</label>
                <input type="number" wire:model="answerOptions.{{ $index }}.point_value" class="w-full px-4 py-2 border rounded" required>
                @error('answerOptions.' . $index . '.point_value') <span class="text-red-500">{{ $message }}</span> @enderror
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Следующий вопрос (необязательно)</label>
                <select wire:model="answerOptions.{{ $index }}.next_question_id" class="w-full px-4 py-2 border rounded">
                    <option value="">Выберите следующий вопрос</option>
                    @foreach($test->questions as $nextQuestion)
                        <option value="{{ $nextQuestion->id }}">{{ $nextQuestion->question_text }}</option>
                    @endforeach
                </select>
                @error('answerOptions.' . $index . '.next_question_id') <span class="text-red-500">{{ $message }}</span> @enderror
            </div>
            <button type="button" wire:click="removeAnswerOption({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить вариант ответа</button>
        </div>
    @endforeach

    <button type="button" wire:click="addAnswerOption" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить вариант ответа</button>

    <div class="flex items-center">
        <button type="button" wire:click="save" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить варианты ответов</button>
    </div>
</div>

// resources/views/livewire/user-test.blade.php
<div>
    @if ($currentQuestion)
        <div class="bg-white shadow-md rounded-lg p-6 mb-4">
            <h3 class="text-lg font-semibold text-gray-800 leading-tight mb-4">{{ $currentQuestion->question_text }}</h3>
            <p class="text-sm text-gray-500 mb-2">
                Тип вопроса: {{ $currentQuestion->question_type == 'multiple_choice' ? 'Множественный выбор' : 'Одиночный выбор' }}
            </p>

            @if ($currentQuestion->question_image)
                <img src="{{ asset('storage/' . $currentQuestion->question_image) }}" class="mt-2 mb-4">
            @endif

            <form wire:submit.prevent="submitAnswer">
                @foreach ($currentQuestion->answerOptions as $option)
                    <div class="mb-4">
                        <input type="{{ $currentQuestion->question_type == 'single_choice' ? 'radio' : 'checkbox' }}"
                               wire:model="selectedOptionIds"
                               value="{{ $option->id }}"
                               id="option_{{ $option->id }}"
                               class="rounded">
                        <label for="option_{{ $option->id }}">{{ $option->option_text }}</label>
                        @if ($option->option_image)
                            <img src="{{ asset('storage/' . $option->option_image) }}" class="mt-2">
                        @endif
                    </div>
                @endforeach

                @error('selectedOptionIds') <span class="text-red-500">{{ $message }}</span> @enderror

                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Далее</button>
            </form>
        </div>
    @else
        <div class="bg-green-100 text-green-800 px-4 py-2 mb-4 rounded">
            Тест завершен. Ваш результат обрабатывается.
        </div>
    @endif
</div>

// resources/views/livewire/test-interpretation.blade.php
<div>
    @if (session()->has('message'))
        <div class="bg-green-100 border-green-500 text-green-800 px-4 py-2 mb-4 rounded" role="alert">
            <p class="font-bold">{{ session('message') }}</p>
        </div>
    @endif

    <form wire:submit.prevent="save">
        @foreach($interpretations as $index => $interpretation)
            <div class="mb-4 p-4 border rounded-lg bg-gray-50">
                <div class="mb-4">
                    <label class="block text-gray-700">Диапазон баллов</label>
                    <input type="text" wire:model="interpretations.{{ $index }}.range" class="w-full px-4 py-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Интерпретация</label>
                    <textarea wire:model="interpretations.{{ $index }}.interpretation" class="w-full px-4 py-2 border rounded"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Рекомендации</label>
                    <textarea wire:model="interpretations.{{ $index }}.recommendations" class="w-full px-4 py-2 border rounded"></textarea>
                </div>
                <button type="button" wire:click="removeInterpretation({{ $index }})" class="bg-red-500 text-white px-4 py-2 rounded">Удалить</button>
            </div>
        @endforeach

        <button type="button" wire:click="addInterpretation" class="bg-green-500 text-white px-4 py-2 rounded mb-4">Добавить новый критерий</button>

        <div class="flex items-center">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить критерии интерпретации</button>
        </div>
    </form>
</div>

// resources/views/profile/tests/index.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Мои результаты тестов') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if($testResults->isEmpty())
                    <p>Вы еще не проходили тесты.</p>
                @else
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50">Название теста</th>
                                <th class="px-6 py-3 bg-gray-50">Общий балл</th>
                                <th class="px-6 py-3 bg-gray-50">Дата прохождения</th>
                                <th class="px-6 py-3 bg-gray-50">Статус</th>
                                <th class="px-6 py-3 bg-gray-50">Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($testResults as $result)
                                <tr>
                                    <td class="border px-6 py-4">{{ $result->test->title }}</td>
                                    <td class="border px-6 py-4">{{ $result->total_score }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at ? $result->completed_at->format('d.m.Y H:i') : 'В процессе' }}</td>
                                    <td class="border px-6 py-4">{{ $result->completed_at ? 'Завершен' : 'В процессе' }}</td>
                                    <td class="border px-6 py-4">
                                        @if($result->completed_at)
                                            <a href="{{ route('user.tests.result.show', $result) }}" class="text-blue-500">Просмотреть</a>
                                        @else
                                            <a href="{{ route('user.tests.take', $result->test) }}" class="text-blue-500">Продолжить</a>
                                        @endif
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/profile/tests/show.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Результаты теста: ') . $result->test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">Общий балл: {{ $result->total_score }}</h3>
                <p class="mt-2">Интерпретация: {{ $result->interpretation }}</p>
                <p class="mt-2">Рекомендации: {{ $result->recommendations }}</p>

                <h4 class="text-md font-semibold mt-4">Детальные ответы:</h4>
                <ul class="list-disc list-inside mt-2">
                    @foreach($result->userAnswers as $answer)
                        <li>
                            Вопрос: {{ $answer->question->question_text }}<br>
                            Ваши ответы:
                            <ul class="list-disc list-inside ml-4">
                                @foreach($answer->selected_option_ids as $optionId)
                                    <li>{{ \App\Models\AnswerOption::find($optionId)->option_text }}</li>
                                @endforeach
                            </ul>
                            Полученные баллы: {{ $answer->points_earned }}
                        </li>
                    @endforeach
                </ul>

                <a href="{{ route('user.tests.results') }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                    Вернуться к списку результатов
                </a>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/user/questions/show.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Вопрос') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">{{ $question->question_text }}</h3>
                @if($question->question_image)
                    <img src="{{ asset('storage/' . $question->question_image) }}" class="mt-4">
                @endif
                <form action="{{ route('user.questions.answer', ['test' => $test, 'question' => $question]) }}" method="POST" class="mt-4">
                    @csrf
                    @foreach($question->answerOptions as $option)
                        <div class="mb-4">
                            <input type="{{ $question->question_type == 'single_choice' ? 'radio' : 'checkbox' }}" name="selected_option_ids[]" value="{{ $option->id }}" id="option_{{ $option->id }}">
                            <label for="option_{{ $option->id }}">{{ $option->option_text }}</label>
                            @if($option->option_image)
                                <img src="{{ asset('storage/' . $option->option_image) }}" class="mt-2">
                            @endif
                        </div>
                    @endforeach
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">
                        Далее
                    </button>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/user/tests/index.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Доступные тесты') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @if($tests->isEmpty())
                    <p>Тесты не найдены.</p>
                @else
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50">Название теста</th>
                                <th class="px-6 py-3 bg-gray-50">Описание</th>
                                <th class="px-6 py-3 bg-gray-50">Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($tests as $test)
                                <tr>
                                    <td class="border px-6 py-4">{{ $test->title }}</td>
                                    <td class="border px-6 py-4">{{ $test->description }}</td>
                                    <td class="border px-6 py-4">
                                        @if(in_array($test->id, $testResultsInProgress))
                                            <span class="text-yellow-500">В процессе</span>
                                            <a href="{{ route('user.tests.take', $test) }}" class="text-blue-500 ml-2">Продолжить</a>
                                        @else
                                            <a href="{{ route('user.tests.take', $test) }}" class="text-blue-500">Начать</a>
                                        @endif
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/user/tests/result.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Результаты теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">Общий балл: {{ $result->total_score }}</h3>
                <p class="mt-2">Интерпретация: {{ $result->interpretation }}</p>
                <p class="mt-2">Рекомендации: {{ $result->recommendations }}</p>

                <h4 class="text-md font-semibold mt-4">Детальные ответы:</h4>
                <ul class="list-disc list-inside mt-2">
                    @foreach($result->userAnswers as $answer)
                        <li>
                            Вопрос: {{ $answer->question->question_text }}<br>
                            Ваши ответы:
                            <ul class="list-disc list-inside ml-4">
                                @foreach($answer->selected_option_ids as $optionId)
                                    @php
                                        $option = \App\Models\AnswerOption::find($optionId);
                                    @endphp
                                    @if ($option)
                                        <li>{{ $option->option_text }}</li>
                                    @else
                                        <li>Ответ не найден</li>
                                    @endif
                                @endforeach
                            </ul>
                            Полученные баллы: {{ $answer->points_earned }}
                        </li>
                    @endforeach
                </ul>

                <a href="{{ route('user.tests.index') }}" class="mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded">
                    Вернуться к списку тестов
                </a>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/user/tests/show.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                <h3 class="text-lg font-semibold">{{ $test->title }}</h3>
                <p class="mt-2">{{ $test->description }}</p>
                <form action="{{ route('user.tests.start', $test) }}" method="POST" class="mt-4">
                    @csrf
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">
                        Начать тест
                    </button>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

// resources/views/user/tests/take.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Прохождение теста: ') . $test->title }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-6">
                @livewire('user-test', ['testId' => $test->id])
            </div>
        </div>
    </div>
</x-app-layout>

