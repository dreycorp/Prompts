–û—Ç–ª–∏—á–Ω–æ! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é **–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ**. –û–Ω–æ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤:

---

## üìò **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–∞–º–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π**

---

### üéØ **1. –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞**
–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É, –ø–æ–∑–≤–æ–ª—è—é—â—É—é:
- —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ Telegram-–±–æ—Ç–∞–º–∏,
- –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ workflow-—Å—Ü–µ–Ω–∞—Ä–∏–∏ (–°–≤–æ–π –ø–ª–∞–≥–∏–Ω, –∫–∞–∫ Rete.js),
- —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —É—Å–ª–æ–≤–∏—è –≤ –ª–æ–≥–∏–∫–µ,
- —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ Telegram (—Å–æ–æ–±—â–µ–Ω–∏—è, –∫–Ω–æ–ø–∫–∏, –∫–æ–º–∞–Ω–¥—ã),
- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —Ü–µ–ø–æ—á–∫–∞–º –±–ª–æ–∫–æ–≤.

---

### üèóÔ∏è **2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞**
- **–ë—ç–∫–µ–Ω–¥**: Laravel 12
- **–§—Ä–æ–Ω—Ç–µ–Ω–¥**: Livewire, Flux UI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- **UI**: Tailwind CSS
- **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ª–æ–≥–∏–∫–∏**: –°–≤–æ–π –ø–ª–∞–≥–∏–Ω, –∫–∞–∫ Rete.js —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.
- **–ë–î**: MySQL
- **Telegram API**: Webhook-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, polling –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞**: –û–¥–∏–Ω –∞–¥–º–∏–Ω (root), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî —ç—Ç–æ Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≤–æ—à–µ–¥—à–∏–µ –≤ –±–æ—Ç–∞.

---

### üì¶ **3. –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Å–≤—è–∑–∏**

| –°—É—â–Ω–æ—Å—Ç—å         | –û–ø–∏—Å–∞–Ω–∏–µ |
|------------------|----------|
| **Bot**          | Telegram-–±–æ—Ç —Å token, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ |
| **User**         | Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–æ—Ç—É |
| **Workflow**     | –°—Ü–µ–Ω–∞—Ä–∏–π –ª–æ–≥–∏–∫–∏. –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞ –±–æ—Ç–∞ |
| **Node (Block)** | –ë–ª–æ–∫ workflow: –¥–µ–π—Å—Ç–≤–∏–µ, —É—Å–ª–æ–≤–∏–µ, –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä. |
| **Variable**     | –ì–ª–æ–±–∞–ª—å–Ω—ã–µ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –±–æ—Ç–∞) –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ) –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ |
| **WebhookEvent** | –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Telegram |
| **ScenarioState**| –¢–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ |
| **Trigger**      | –£—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è (–∫–æ–º–∞–Ω–¥–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–Ω–æ–ø–∫–∞) |

---

### üîß **4. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª**

#### üîπ **–ë–æ—Ç—ã**
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Telegram-–±–æ—Ç–∞ —Å token.
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook.
- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ.
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, webhook URL –∏ –¥—Ä.).

#### üîπ **Workflow (–°—Ü–µ–Ω–∞—Ä–∏–∏)**
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –±–æ—Ç–∞.
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞.
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ (—É—Å–ª–æ–≤–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ).
- –≠–∫—Å–ø–æ—Ä—Ç / –∏–º–ø–æ—Ä—Ç —Å—Ö–µ–º.
- –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–ª–æ–∫–∞–º (–∫–æ–ª-–≤–æ –∑–∞–ø—É—Å–∫–æ–≤).

#### üîπ **–¢–∏–ø—ã –±–ª–æ–∫–æ–≤ (Nodes)**
1. **–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ**  
   - –¢–µ–∫—Å—Ç, HTML/Markdown  
   - Inline-–∫–Ω–æ–ø–∫–∏ (callback)  
   - –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (ReplyKeyboardMarkup)

2. **–£—Å–ª–æ–≤–∏–µ (If)**  
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (—á–∏—Å–ª–æ, —Å—Ç—Ä–æ–∫–∞)

3. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é**  
   - –ó–∞–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

4. **–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**  
   - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ / –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

5. **–¢–∞–π–º–µ—Ä / –ó–∞–¥–µ—Ä–∂–∫–∞**
   - –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É —á–µ—Ä–µ–∑ X —Å–µ–∫—É–Ω–¥/–º–∏–Ω—É—Ç

6. **Webhook**
   - –ë–ª–æ–∫ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

> ‚ö†Ô∏è –ü–æ–∑–∂–µ: HTTP-–∑–∞–ø—Ä–æ—Å, –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, JS-–±–ª–æ–∫

#### üîπ **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ**
- **–ì–ª–æ–±–∞–ª—å–Ω—ã–µ**: –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
- **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ**: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è/—á–∏—Ç–∞—é—Ç—Å—è –≤ –±–ª–æ–∫–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö

#### üîπ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**
- Telegram ID, –∏–º—è, username, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –º–µ—Ç–∫–∏
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
- –ë—É–¥—É—â–∞—è –∞–¥–º–∏–Ω–∫–∞: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è

---

### üîÑ **5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Telegram**
- Webhook listener –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è: —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥—ã, callback-–∫–Ω–æ–ø–∫–∏
- –ü–æ —Å–æ–±—ã—Ç–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è:
  - –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —à–∞–≥
  - –Ω—É–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π/–±–ª–æ–∫ (–∏–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–ø—É—Å–∫–∞)
- –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow

---

### üß∞ **6. –ê–¥–º–∏–Ω–∫–∞**
- –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–æ–≤
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∫–∞ –±–µ–∑ —Ä–∞—Å—Å—ã–ª–æ–∫)

---

### üîê **7. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**
- –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã (–∞–¥–º–∏–Ω)
- –ß–µ—Ä–µ–∑ Laravel Breeze

---

### üß† **8. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è**
_(–º–æ–∂–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –≤ MVP, –Ω–æ –∑–∞–ª–æ–∂–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ)_
- HTTP-–∑–∞–ø—Ä–æ—Å—ã
- –ë–ª–æ–∫ –∫–æ–¥–∞ JS
- –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞, –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API (Tilda, AmoCRM, Notion –∏ —Ç.–¥.)
- –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

---
// WORKFLOW_SCHEMA.md
# üìÑ Workflow Schema Format (UI + Execution)

## üß© 1. `workflow.definition` ‚Äî —Å—Ö–µ–º–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ UI
–•—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ `workflows`, –≤ –ø–æ–ª–µ `definition` (JSON)

```json
{
  "nodes": [
    {
      "id": 1,
      "type": "message",
      "x": 140,
      "y": 200,
      "meta": {
        "title": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "entryPoints": 1,
        "outputPoints": 1
      }
    },
    {
      "id": 2,
      "type": "if",
      "x": 350,
      "y": 180,
      "meta": {
        "title": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞",
        "entryPoints": 1,
        "outputPoints": 2
      }
    }
  ],
  "connections": [
    {
      "from": { "node": 1, "output": "default" },
      "to":   { "node": 2, "input": "main" }
    },
    {
      "from": { "node": 2, "output": "yes" },
      "to":   { "node": 3, "input": "main" }
    },
    {
      "from": { "node": 2, "output": "no" },
      "to":   { "node": 4, "input": "main" }
    }
  ]
}
```

### üìò –ü—Ä–∞–≤–∏–ª–∞:
- `id`: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ä–∞–º–∫–∞—Ö workflow.
- `type`: —Ç–∏–ø –Ω–æ–¥—ã (`message`, `if`, `http_request`, `switch` –∏ —Ç.–¥.)
- `x`, `y`: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
- `meta`: –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è UI:
  - `title`: –ø–æ–¥–ø–∏—Å—å –Ω–æ–¥—ã.
  - `entryPoints`: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤.
  - `outputPoints`: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ).

---

## ‚öô 2. –¢–∞–±–ª–∏—Ü–∞ `nodes` ‚Äî –ª–æ–≥–∏–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã:

| –ü–æ–ª–µ | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ |
|------|-----|----------|
| id | bigint | –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID |
| workflow_id | bigint | –°–≤—è–∑—å —Å workflow |
| type | string | –¢–∏–ø –Ω–æ–¥—ã (`message`, `if`, ...) |
| data | json | –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–∑–ª–∞ |
| position_x | int | x –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è |
| position_y | int | y |
| created_at / updated_at | timestamps | ‚Äî |

---

## üì¶ –§–æ—Ä–º–∞—Ç –ø–æ–ª—è `nodes.data`

### üîπ Message (–°–æ–æ–±—â–µ–Ω–∏–µ)

```json
{
  "messages": [
    { "type": "text", "content": "–í–∞—à–µ –∏–º—è?" },
    { "type": "image", "url": "https://example.com/image.jpg" },
    { "type": "file", "file_id": "abc123" }
  ],
  "wait_for_reply": true,
  "buttons": [
    { "text": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "value": "continue" }
  ],
  "outputs": [
    { "key": "on_reply", "next_node_id": 3 },
    { "key": "timeout", "next_node_id": 99 }
  ]
}
```

- `messages`: –º–∞—Å—Å–∏–≤ –¥–µ–π—Å—Ç–≤–∏–π/—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
  - `type`: `text`, `image`, `file`, `video`, `audio`, `location`, –∏ –¥—Ä.
  - `content`, `url`, `file_id`: –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞.
- `buttons`: –∫–Ω–æ–ø–∫–∏ (–∏–Ω–ª–∞–π–Ω).
- `outputs`: —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–æ–¥–∞–º–∏.

---

### üîπ If (—É—Å–ª–æ–≤–∏–µ)

```json
{
  "condition": "user.age >= 18",
  "outputs": [
    { "key": "yes", "next_node_id": 4 },
    { "key": "no", "next_node_id": 5 }
  ]
}
```

---

### üîπ HTTP-–∑–∞–ø—Ä–æ—Å

```json
{
  "method": "POST",
  "url": "https://api.example.com/user",
  "headers": {
    "Authorization": "Bearer {{user.token}}"
  },
  "body": {
    "user_id": "{{user.id}}"
  },
  "outputs": [
    { "key": "success", "next_node_id": 8 },
    { "key": "fail", "next_node_id": 9 }
  ]
}
```

---

## ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `workflow.definition` —Ç–æ–ª—å–∫–æ –¥–ª—è UI, –Ω–µ –¥–ª—è –ª–æ–≥–∏–∫–∏.
2. –û—Å–Ω–æ–≤–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ö—Ä–∞–Ω–∏—Ç—å –≤ `nodes.data`.
3. –í—Å–µ –≤—ã—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏: `yes`, `no`, `timeout`, `on_reply`, `error`, –∏ —Ç.–ø.
4. –ü–æ–∑–≤–æ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å `data` –ø–æ —Ç–∏–ø–∞–º.
5. –•—Ä–∞–Ω–∏—Ç—å `position_x/y` –∏ –≤ `nodes` ‚Äî –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
6. –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–∏–ø `group` –∏–ª–∏ `folder` –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º.

---

## üì¶ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ

| id | workflow_id | type | data | x | y |
|----|-------------|------|------|---|---|
| 1 | 5 | message | `{"messages":[{"type":"text","content":"–ü—Ä–∏–≤–µ—Ç!"}], "outputs":[{"key":"default","next_node_id":2}]}` | 140 | 200 |

// routes/web.php
<?php

use App\Livewire\Settings\Profile;
use App\Livewire\Settings\Password;
use App\Livewire\Settings\Appearance;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\BotController;
use App\Http\Controllers\TriggerController;
use App\Http\Controllers\WorkflowController;

Route::get('/', function () {
    return view('welcome');
})->name('home');

Route::view('dashboard', 'dashboard')
    ->middleware(['auth', 'verified'])
    ->name('dashboard');

Route::middleware(['auth'])->group(function () {
    Route::redirect('settings', 'settings/profile');

    Route::get('settings/profile', Profile::class)->name('settings.profile');
    Route::get('settings/password', Password::class)->name('settings.password');
    Route::get('settings/appearance', Appearance::class)->name('settings.appearance');
});

require __DIR__.'/auth.php';


Route::middleware(['auth'])->prefix('bots')->group(function () {
    Route::get('/', [BotController::class, 'index'])->name('bots.index');
    Route::get('/create', [BotController::class, 'create'])->name('bots.create');
    Route::get('/{bot}/edit', [BotController::class, 'edit'])->name('bots.edit');
});


Route::middleware(['auth'])->prefix('bots')->group(function () {

    // Workflows
    Route::get('{bot}/workflows/create', [WorkflowController::class, 'create'])->name('workflows.create');
    Route::post('{bot}/workflows', [WorkflowController::class, 'store'])->name('workflows.store');
    Route::get('{bot}/workflows/{workflow}/edit', [WorkflowController::class, 'edit'])->name('workflows.edit');
    Route::get('{bot}/workflows/{workflow}/editor', [WorkflowController::class, 'editor'])->name('workflows.editor');
});


Route::middleware(['auth'])->prefix('bots/{bot}/triggers')->group(function () {
    Route::get('/', [TriggerController::class, 'index'])->name('triggers.index');
    Route::get('/create', [TriggerController::class, 'create'])->name('triggers.create');
    Route::post('/create', [TriggerController::class, 'store'])->name('triggers.store');
    Route::get('/{trigger}/edit', [TriggerController::class, 'edit'])->name('triggers.edit');
    Route::post('/{trigger}/edit', [TriggerController::class, 'update'])->name('triggers.update');
});

// app/Console/Commands/TelegramPollUpdates.php
<?php

namespace App\Console\Commands;

use App\Models\Bot;
use App\Telegram\UpdateHandler;
use Illuminate\Console\Command;
use App\Services\TelegramService;

class TelegramPollUpdates extends Command
{
    protected $signature = 'telegram:poll {--bot=}';
    protected $description = 'Poll updates from Telegram (useful for local/dev)';

    public function handle()
    {
        $botId = $this->option('bot');
        $bots = $botId
            ? Bot::where('id', $botId)->get()
            : Bot::all();

        foreach ($bots as $bot) {
            $tg = TelegramService::getInstance($bot->token);
        
            $params = [
                'timeout' => 30,
                'allowed_updates' => ['message', 'callback_query'],
            ];
            if ($bot->last_update_offset) {
                $params['offset'] = $bot->last_update_offset;
            }
            echo time();
            $updates = $tg->getUpdates($params);
            echo time();
            foreach ($updates as $update) {
                (new UpdateHandler())->handle($bot, $update);
        
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º offset (+1 ‚Äî –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram)
                if (isset($update['update_id'])) {
                    $bot->last_update_offset = $update['update_id'] + 1;
                    $bot->save();
                }
            }
        }
            
    }

    protected function processUpdate(Bot $bot, $update)
    {
        // –ü–æ–≤—Ç–æ—Ä—è–π —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ webhook
        // –ú–æ–∂–Ω–æ –¥–∞–∂–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å/–∫–ª–∞—Å—Å
        info("Update for bot {$bot->id}: " . json_encode($update));
    }
}

// app/Http/Controllers/BotController.php
<?php

namespace App\Http\Controllers;

use App\Models\Bot;
use Illuminate\Http\Request;

class BotController extends Controller
{
    public function index()
    {
        return view('bots.index');
    }

    public function create()
    {
        return view('bots.create');
    }

    public function edit(Bot $bot)
    {
        return view('bots.edit', compact('bot'));
    }
}

// app/Http/Controllers/TriggerController.php
<?php

namespace App\Http\Controllers;

use App\Models\Bot;
use App\Models\Trigger;
use App\Models\Workflow;
use Illuminate\Http\Request;

class TriggerController extends Controller
{
    public function index(Bot $bot)
    {
        $triggers = $bot->triggers()->with('workflow')->get();
        return view('triggers.index', compact('bot', 'triggers'));
    }

    public function create(Bot $bot)
    {
        $workflows = $bot->workflows()->get();
        $types = [
            'command' => '–ö–æ–º–∞–Ω–¥–∞ (/start)',
            'message' => '–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ',
            'any'     => '–õ—é–±–æ–µ —Å–ª–æ–≤–æ',
        ];
        return view('triggers.create', compact('bot', 'workflows', 'types'));
    }

    public function store(Request $request, Bot $bot)
    {
        $types = ['command', 'message', 'any'];
        $data = $request->validate([
            'type'        => ['required', 'in:' . implode(',', $types)],
            'value'       => ['nullable', 'string', 'max:255'],
            'workflow_id' => ['required', 'exists:workflows,id'],
        ]);
        $data['bot_id'] = $bot->id;
        Trigger::create($data);

        return redirect()->route('triggers.index', $bot)->with('success', '–¢—Ä–∏–≥–≥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!');
    }

    public function edit(Bot $bot, Trigger $trigger)
    {
        $workflows = $bot->workflows()->get();
        $types = [
            'command' => '–ö–æ–º–∞–Ω–¥–∞ (/start)',
            'message' => '–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ',
            'any'     => '–õ—é–±–æ–µ —Å–ª–æ–≤–æ',
        ];
        return view('triggers.edit', compact('bot', 'trigger', 'workflows', 'types'));
    }

    public function update(Request $request, Bot $bot, Trigger $trigger)
    {
        $types = ['command', 'message', 'any'];
        $data = $request->validate([
            'type'        => ['required', 'in:' . implode(',', $types)],
            'value'       => ['nullable', 'string', 'max:255'],
            'workflow_id' => ['required', 'exists:workflows,id'],
        ]);
        $trigger->update($data);

        return redirect()->route('triggers.index', $bot)->with('success', '–¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!');
    }
}

// app/Http/Controllers/WorkflowController.php
<?php

namespace App\Http\Controllers;

use App\Models\Bot;
use App\Models\Workflow;
use Illuminate\Http\Request;

class WorkflowController extends Controller
{
    public function create(Bot $bot)
    {
        return view('workflows.create', compact('bot'));
    }

    public function store(Request $request, Bot $bot)
    {
        $data = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        $workflow = $bot->workflows()->create($data);

        return redirect()->route('workflows.edit', [$bot, $workflow])
            ->with('success', '–°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    public function edit(Bot $bot, Workflow $workflow)
    {
        return view('workflows.edit', compact('bot', 'workflow'));
    }

    public function editor(Bot $bot, Workflow $workflow)
    {
        return view('workflows.editor', compact('bot', 'workflow'));
    }

}

// app/Livewire/Bots/Create.php
<?php

namespace App\Livewire\Bots;

use Livewire\Component;
use App\Models\Bot;
use App\Services\TelegramService;

class Create extends Component
{
    public $name = '';
    public $token = '';
    public $description = '';

    protected $rules = [
        'name' => 'nullable|string|max:255',
        'token' => 'required|string|unique:bots,token',
        'description' => 'nullable|string|max:1024',
    ];

    public function save()
    {
        $this->validate();

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —Ä–∞–±–æ—á–∏–π –ª–∏ —Ç–æ–∫–µ–Ω
        try {
            $me = TelegramService::getMe($this->token);
            $webhook_url = null; // –ú–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å url
        } catch (\Exception $e) {
            $this->addError('token', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram Bot –∏–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        $bot = Bot::create([
            'name' => $this->name ?: ($me['username'] ?? null),
            'token' => $this->token,
            'description' => $this->description,
            'webhook_url' => $webhook_url,
        ]);

        session()->flash('success', '–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
        return redirect()->route('bots.edit', $bot);
    }

    public function render()
    {
        return view('livewire.bots.create');
    }
}

// app/Livewire/Bots/Edit.php
<?php

namespace App\Livewire\Bots;

use Livewire\Component;
use App\Models\Bot;

class Edit extends Component
{
    public Bot $bot;
    public $name;
    public $description;

    protected $rules = [
        'name' => 'nullable|string|max:255',
        'description' => 'nullable|string|max:1024',
    ];

    public function mount(Bot $bot)
    {
        $this->bot = $bot;
        $this->name = $bot->name;
        $this->description = $bot->description;
    }

    public function save()
    {
        $this->validate();

        $this->bot->update([
            'name' => $this->name,
            'description' => $this->description,
        ]);

        session()->flash('success', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å emit('saved') –¥–ª—è –∞–ª–µ—Ä—Ç–∞ –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    }

    public function render()
    {
        return view('livewire.bots.edit');
    }
}

// app/Livewire/Bots/Index.php
<?php

namespace App\Livewire\Bots;

use Livewire\Component;
use App\Models\Bot;

class Index extends Component
{
    public $bots;

    public function mount()
    {
        $this->bots = Bot::with('workflows')->orderByDesc('created_at')->get();
    }

    public function render()
    {
        return view('livewire.bots.index');
    }
}

// app/Livewire/Workflows/Editor.php
<?php

namespace App\Livewire\Workflows;

use App\Models\Node;
use Livewire\Component;
use App\Models\Workflow;
use Livewire\Attributes\On; 
use App\Services\NodeSchemaService;

class Editor extends Component
{
    public Workflow $workflow;
    public $bot;

    // nodes: [{id, type, x, y, data...}], connections: [{from, to}]
    public $nodes = [];
    public $connections = [];

    public $selectedNodeId = null;
    public $selectedNode = null;

    public function mount(Workflow $workflow, $bot = null)
    {
        $this->workflow = $workflow;
        $this->bot = $bot;
    
        // –ó–∞–≥—Ä—É–∂–∞–µ–º nodes –∏–∑ –ë–î
        $this->nodes = $workflow->nodes->map(function($node) {
            return [
                'id'   => $node->id,
                'type' => $node->type,
                'x'    => $node->position_x,
                'y'    => $node->position_y,
                'data' => $node->data,
            ];
        })->toArray();
    
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º connections –Ω–∞ –æ—Å–Ω–æ–≤–µ outputs –≤—Å–µ—Ö nodes
        $connections = [];
        foreach ($this->nodes as $node) {
            // outputs –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ node
            $outputs = $node['data']['outputs'] ?? [];
            $connections = array_merge(
                $connections,
                NodeSchemaService::outputsToConnections($outputs, $node['id'], $node['type'])
            );
        }
        $this->connections = $connections;
    }
    

    #[On('addNode')]
    public function addNode($type)
    {
        // –°–æ–∑–¥–∞—ë–º node –≤ –ë–î —Å –ø–æ–∑–∏—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, X=200, Y=200)
        $node = $this->workflow->nodes()->create([
            'type'        => $type,
            'position_x'  => 200 + rand(-40, 40),
            'position_y'  => 200 + rand(-40, 40),
            'data'        => NodeSchemaService::getDefaultData($type),
        ]);
        // –î–æ–±–∞–≤–ª—è–µ–º node –≤ –º–∞—Å—Å–∏–≤ nodes (–∏—Å–ø–æ–ª—å–∑—É–µ–º id –∏–∑ –ë–î!)
        $this->nodes[] = [
            'id'   => $node->id,
            'type' => $type,
            'x'    => $node->position_x,
            'y'    => $node->position_y,
            'data' => $node->data,
        ];
        $this->selectedNodeId = $node->id;
        $this->selectedNode = $node;
    
        $this->emitRender();
    }

    #[On('addConnection')]
    public function addConnection($from, $to)
    {
        if (!$from || !$to || $from === $to) return;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
        foreach ($this->connections as $c) {
            if ($c['from'] === $from && $c['to'] === $to) return;
        }
    
        $this->connections[] = ['from' => $from, 'to' => $to];

        
        //$this->saveScheme();
        $this->emitRender();
    }

    #[On('loadInspector')]
    public function loadInspector($id, $nodes = [], $connections = [])
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏
        $this->nodes = $nodes;
        $this->connections = $connections;
    
        $this->selectedNodeId = $id;
        $this->selectedNode = Node::find($id);
        
        $this->emitRender(); // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –∏ –Ω–æ–¥—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
    }

    #[On('moveNode')] 
    public function moveNode($id, $x, $y)
    {
        $node = $this->workflow->nodes()->findOrFail($id);
        $node->position_x = $x;
        $node->position_y = $y;
        $node->save();
    
        // –û–±–Ω–æ–≤–∏—Ç—å nodes –º–∞—Å—Å–∏–≤
        foreach ($this->nodes as &$n) {
            if ($n['id'] == $id) {
                $n['x'] = $x;
                $n['y'] = $y;
                break;
            }
        }
        unset($n);
    
        $this->emitRender();
    }
    
    public function emitRender()
    {
        $nodesHtml = ""; //view('workflows.partials.nodes_canvas', ['nodes' => $this->nodes, 'selectedNodeId' => $this->selectedNodeId])->render();
        $arrowsHtml = ''; // –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã SVG —Å—Ç—Ä–µ–ª–∫–∏ ‚Äî —Ç–æ–∂–µ Blade partial

        $this->dispatch('workflow:render', [
            'nodesHtml' => $nodesHtml,
            'arrowsHtml' => '', // –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
            'nodes' => $this->nodes, // –º–∞—Å—Å–∏–≤ —Å id, x, y (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞)
            'connections' => $this->connections,
        ]);
    }
    // –ü–æ–ª—É—á–∏—Ç—å HTML –Ω–æ–¥—ã (AJAX)
    public function renderNodeHtml($node)
    {
        return view("workflows.nodes.{$node['type']}", ['node' => $node])->render();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ (AJAX)
    public function getInspector($nodeId)
    {
        $node = collect($this->nodes)->firstWhere('id', $nodeId);
        if (!$node) return '';
        return view('livewire.workflows.node-inspector', ['node' => $node, 'editor' => $this])->render();
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–¥—ã (AJAX)
    #[On('updateNode')]
    public function updateNode($nodeId, $data)
    {
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        $nodeModel = $this->workflow->nodes()->findOrFail($nodeId);
        $nodeModel->data = $data;
        $nodeModel->save();
    
        // 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤ Livewire-–º–∞—Å—Å–∏–≤–µ $nodes
        foreach ($this->nodes as &$node) {
            if ($node['id'] == $nodeId) {
                $node['data'] = $data;
                break;
            }
        }
        unset($node); // –≤–∞–∂–Ω–æ!
    
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ definition –≤ workflow (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        //$this->saveScheme();
    
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä –Ω–æ–¥—ã –Ω–∞ canvas
        /*$this->dispatch('nodeUpdated', id: $nodeId, nodeHtml: $this->renderNodeHtml([
            'id' => $nodeId,
            'type' => $nodeModel->type,
            'data' => $data,
            'x' => $nodeModel->position_x,
            'y' => $nodeModel->position_y,
        ]));*/
    }
    

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É –≤ Workflow

    public function saveScheme()
    {
        $this->workflow->definition = [
            'nodes' => $this->nodes,
            'connections' => $this->connections,
        ];
        $this->workflow->save();
        session()->flash('success', '–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    }

    #[On('saveFromClient')]
    public function saveFromClient($nodes, $connections)
    {
        $this->nodes = $nodes;
        $this->connections = $connections;
    
        // 1. –°–æ–±–∏—Ä–∞–µ–º id –≤—Å–µ—Ö –Ω–æ–¥ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞
        $nodeIds = collect($nodes)->pluck('id')->filter()->all();
        //dd($nodeIds);
        // 2. –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î —Ç–µ nodes, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ $nodes
        $this->workflow->nodes()
            ->whereNotIn('id', $nodeIds)
            ->delete();
    
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ nodes
        foreach ($nodes as &$node) {
            // 3.1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º outputs –ø–æ connections –¥–ª—è —ç—Ç–æ–π node
            $node['data']['outputs'] = NodeSchemaService::connectionsToOutputs($connections, $node['id'], $node['type']);
    
            // 3.2. –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º node –≤ –ë–î
            if (isset($node['id']) && $this->workflow->nodes()->where('id', $node['id'])->exists()) {
                $dbNode = $this->workflow->nodes()->find($node['id']);
                $dbNode->update([
                    'type'        => $node['type'],
                    'position_x'  => $node['x'],
                    'position_y'  => $node['y'],
                    'data'        => $node['data'] ?? [],
                ]);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç id –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ë–î ‚Äî —Å–æ–∑–¥–∞—ë–º
                $created = $this->workflow->nodes()->create([
                    'type'        => $node['type'],
                    'position_x'  => $node['x'],
                    'position_y'  => $node['y'],
                    'data'        => $node['data'] ?? [],
                ]);
                // –û–±–Ω–æ–≤–ª—è–µ–º id (–º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É)
                $node['id'] = $created->id;
            }
        }
        unset($node);
    
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º definition –≤ workflow (nodes –∏ connections)
        $this->workflow->definition = [
            'nodes' => $this->nodes,
            'connections' => $this->connections,
        ];
        $this->workflow->save();
    
        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ nodes –∏ connections (—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ outputs –∏ id)
        $this->dispatch('workflow:saved', [
            'nodes' => $this->nodes,
            'connections' => $this->connections,
        ]);
    }
    
    

    #[On('saveNodeInspector')]
    public function saveNodeInspector($id, $data)
    {
        $node = $this->workflow->nodes()->findOrFail($id);
        $node->data = $data;
        $node->save();
    
        $this->dispatch('inspector:saved', ['id' => $node->id]);
    }
    

    private function newNodeId()
    {
        return count($this->nodes) ? max(array_column($this->nodes, 'id')) + 1 : 1;
    }

    public function render()
    {
        return view('livewire.workflows.editor');
    }
}

// app/Livewire/Workflows/NodeInspector.php
<?php

namespace App\Livewire\Workflows;

use App\Models\Node;
use Livewire\Component;

class NodeInspector extends Component
{
    public $node; // ['id' => ..., 'type' => ..., 'data' => ...]
    public $messages = [];

    public function mount($node)
    {
        $this->node = $node;
        if ($node->type === 'message') {
            $this->messages = $node->data['messages'] ?? [
                ['type' => 'text', 'content' => '']
            ];
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "text"
    public function addTextMessage()
    {
        $this->messages[] = ['type' => 'text', 'content' => ''];
    }

    // [–ù–∞ –±—É–¥—É—â–µ–µ] –¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ, —Ñ–∞–π–ª, –∑–∞–¥–µ—Ä–∂–∫—É
    public function addAudioMessage() {}
    public function addFileMessage() {}
    public function addDelayMessage() {}

    // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    public function removeMessage($index)
    {
        unset($this->messages[$index]);
        $this->messages = array_values($this->messages);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    public function updatedMessages()
    {
        // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
    }

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
    public function save1()
    {
        $this->dispatch('updateNode', $this->node->id, [
            'messages' => $this->messages,
            // —Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä wait_for_reply –∏ —Ç.–¥.)
        ]);
        session()->flash('success', '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }


    public function save()
    {
        // 1. –ù–∞–π—Ç–∏ node –≤ –ë–î –ø–æ id
        $node = Node::findOrFail($this->node->id);
    
        // 2. –û–±–Ω–æ–≤–∏—Ç—å data (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ messages, –∏–ª–∏ –≤–µ—Å—å data-–æ–±—ä–µ–∫—Ç)
        $data = $node->data ?? [];
        $data['messages'] = $this->messages;
    
        // (–ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –¥–æ–±–∞–≤—å –∏—Ö –≤ $data)
    
        $node->data = $data;
        $node->save();
    
        // 3. (–ù–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å $this->node –≤—Ä—É—á–Ω—É—é)
        $this->node->data = $data;
    
        session()->flash('success', '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    }


    public function render()
    {
        if ($this->node->type === 'message') {
            return view('livewire.workflows.inspectors.message', [
                'messages' => $this->messages
            ]);
        }
        return '';
    }
}

// app/Models/Bot.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Bot extends Model
{

    protected $fillable = [
        'token', 'name', 'description', 'webhook_url', 'settings', 'last_update_offset'
    ];

    public function workflows()
    {
        return $this->hasMany(Workflow::class);
    }

    public function botUsers()
    {
        return $this->hasMany(BotUser::class);
    }

    public function triggers()
    {
        return $this->hasMany(Trigger::class);
    }

}

// app/Models/BotUser.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class BotUser extends Model
{
    protected $fillable = [
        'bot_id',
        'telegram_id',
        'username',
        'first_name',
        'last_name',
        'language_code',
        'extra',
    ];

    protected $casts = [
        'extra' => 'array',
        'is_stopped' => 'boolean',
    ];

    public function bot()
    {
        return $this->belongsTo(Bot::class);
    }

    public static function addOrUpdate($bot_id, $from)
    {
        return self::updateOrCreate(
            [
                'bot_id' => $bot_id,
                'telegram_id' => $from['id'],
            ],
            [
                'username' => $from['username'] ?? null,
                'first_name' => $from['first_name'] ?? null,
                'last_name' => $from['last_name'] ?? null,
                'language_code' => $from['language_code'] ?? null,
                'extra' => json_encode($from),
            ]
        );
    }

}

// app/Models/Node.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Node extends Model
{
    protected $fillable = [
        'workflow_id',
        'type',
        'data',
        'position_x',
        'position_y',
    ];

    protected $casts = [
        'data' => 'array',
    ];

    public function workflow()
    {
        return $this->belongsTo(Workflow::class);
    }
}

// app/Models/ScenarioState.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ScenarioState extends Model
{
    protected $fillable = [
        'bot_user_id',        // bot_user_id! (–ò—Å–ø–æ–ª—å–∑—É–π bot_user_id, –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–µ—à—å –º–∏–≥—Ä–∞—Ü–∏—é)
        'workflow_id',
        'node_id',
        'state_data',
    ];

    protected $casts = [
        'state_data' => 'array',
    ];

    public function user()
    {
        return $this->belongsTo(BotUser::class, 'bot_user_id');
    }

    public function workflow()
    {
        return $this->belongsTo(Workflow::class);
    }

    public function node()
    {
        return $this->belongsTo(Node::class);
    }
}

// app/Models/Trigger.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Trigger extends Model
{
    protected $fillable = [
        'bot_id',
        'workflow_id',
        'type',
        'value',
    ];

    public function bot()
    {
        return $this->belongsTo(Bot::class);
    }

    public function workflow()
    {
        return $this->belongsTo(Workflow::class);
    }
}

// app/Models/User.php
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Str;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];


    /**
     * Get the user's initials
     */
    public function initials(): string
    {
        return Str::of($this->name)
            ->explode(' ')
            ->map(fn (string $name) => Str::of($name)->substr(0, 1))
            ->implode('');
    }

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}

// app/Models/WebhookEvent.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class WebhookEvent extends Model
{
    protected $fillable = [
        'bot_id',
        'payload',

    ];
}

// app/Models/Workflow.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Workflow extends Model
{
    protected $fillable = [
        'name',
        'description',
        'definition',
    ];
    
    protected $casts = [
        'definition' => 'array',
    ];
    

    public function bot()
    {
        return $this->belongsTo(Bot::class);
    }

    public function nodes()
    {
        return $this->hasMany(Node::class);
    }

    public function triggers()
    {
        return $this->hasMany(Trigger::class);
    }
}

// app/Services/NodeSchemaService.php
<?php 

namespace App\Services;

class NodeSchemaService
{
    /**
     * –í–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π data –¥–ª—è node –ø–æ —Ç–∏–ø—É
     */
    public static function getDefaultData(string $type): array
    {
        switch ($type) {
            case 'message':
                return [
                    'messages' => [
                        ['type' => 'text', 'content' => ''],
                    ],
                    'wait_for_reply' => false,
                    'buttons' => [],
                    'outputs' => [
                        // –ö–ª—é—á ‚Äî —Ç–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞, next_node_id –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∑–∂–µ
                        ['key' => 'default', 'next_node_id' => null],
                    ],
                ];
            case 'if':
                return [
                    'condition' => '', // –Ω–∞–ø—Ä–∏–º–µ—Ä: user.age >= 18
                    'outputs' => [
                        ['key' => 'yes', 'next_node_id' => null],
                        ['key' => 'no', 'next_node_id' => null],
                    ],
                ];
            // –î–æ–±–∞–≤–ª—è–π –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã:
            // case 'http_request': ...
            default:
                return [
                    'outputs' => [
                        ['key' => 'default', 'next_node_id' => null],
                    ],
                ];
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å connections (UI) –≤ outputs (data)
     * $connections - –≤—Å–µ connections —Å—Ö–µ–º—ã
     * $nodeId - id —Ç–µ–∫—É—â–µ–π node
     * $type - —Ç–∏–ø node (—á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∏–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–æ–≤)
     */
    public static function connectionsToOutputs(array $connections, int $nodeId, string $type): array
    {
        // –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –Ω–æ–¥—ã
        $outputKeys = self::getOutputKeysByType($type);

        $outputs = [];
        foreach ($outputKeys as $key) {
            // –ù–∞–π—Ç–∏ connection, –≥–¥–µ from = this node, output = $key
            $conn = collect($connections)->first(function ($conn) use ($nodeId, $key) {
                if (is_array($conn['from'])) {
                    // connections —Ñ–æ—Ä–º–∞—Ç–∞ {from: {node, output}, to: {node, input}}
                    return $conn['from']['node'] == $nodeId && $conn['from']['output'] == $key;
                } else {
                    // —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: {from: nodeId, to: nodeId}
                    return $conn['from'] == $nodeId;
                }
            });
            $outputs[] = [
                'key' => $key,
                'next_node_id' => $conn ? (is_array($conn['to']) ? $conn['to']['node'] : $conn['to']) : null,
            ];
        }
        return $outputs;
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å outputs (data) –æ–±—Ä–∞—Ç–Ω–æ –≤ connections (–¥–ª—è UI)
     */
    public static function outputsToConnections(array $outputs, int $nodeId, string $type): array
    {
        $connections = [];
        foreach ($outputs as $output) {
            if (!empty($output['next_node_id'])) {
                $connections[] = [
                    'from' => ['node' => $nodeId, 'output' => $output['key']],
                    'to'   => ['node' => $output['next_node_id'], 'input' => 'main'], // input –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –ª–æ–≥–∏–∫–µ
                ];
            }
        }
        return $connections;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤—ã—Ö–æ–¥–æ–≤ (output keys) –¥–ª—è —Ç–∏–ø–∞ node
     * (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ connections <-> outputs)
     */
    public static function getOutputKeysByType(string $type): array
    {
        switch ($type) {
            case 'message':
                return ['default']; // –∏–ª–∏, –µ—Å–ª–∏ wait_for_reply, —Ç–æ ['on_reply', 'timeout']
            case 'if':
                return ['yes', 'no'];
            case 'http_request':
                return ['success', 'fail'];
            default:
                return ['default'];
        }
    }

    /**
     * –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è UI (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–≤–µ—Ç, –∏–∫–æ–Ω–∫–∞...)
     */
    public static function getMeta(string $type): array
    {
        switch ($type) {
            case 'message': return ['title' => '–°–æ–æ–±—â–µ–Ω–∏–µ', 'color' => 'cyan'];
            case 'if':      return ['title' => '–£—Å–ª–æ–≤–∏–µ', 'color' => 'yellow'];
            default:        return ['title' => $type, 'color' => 'gray'];
        }
    }
}

// app/Services/TelegramService.php
<?php

namespace App\Services;

use Telegram\Bot\Api;

class TelegramService
{
    /**
     * @var array<string, Api>  // –∫–ª—é—á - —Ç–æ–∫–µ–Ω, –∑–Ω–∞—á–µ–Ω–∏–µ - Api-–∏–Ω—Å—Ç–∞–Ω—Å
     */
    protected static array $instances = [];

    /**
     * –ü–æ–ª—É—á–∏—Ç—å singleton –∏–Ω—Å—Ç–∞–Ω—Å Telegram Api –ø–æ —Ç–æ–∫–µ–Ω—É
     *
     * @param string $token
     * @return Api
     */
    public static function getInstance(string $token): Api
    {
        if (!isset(self::$instances[$token])) {
            self::$instances[$token] = new Api($token);
        }
        return self::$instances[$token];
    }

    // –£–¥–æ–±–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤

    public static function sendMessage(string $token, $chatId, $text, $params = [])
    {
        return self::getInstance($token)->sendMessage(array_merge([
            'chat_id' => $chatId,
            'text'    => $text,
        ], $params));
    }

    public static function setWebhook(string $token, $url)
    {
        return self::getInstance($token)->setWebhook(['url' => $url]);
    }

    public static function deleteWebhook(string $token)
    {
        return self::getInstance($token)->removeWebhook();
    }

    public static function getUpdates(string $token, $params = [])
    {
        return self::getInstance($token)->getUpdates($params);
    }

    public static function getMe(string $token)
    {
        return self::getInstance($token)->getMe();
    }
}

// app/Telegram/UpdateHandler.php
<?php

namespace App\Telegram;

use App\Models\Bot;
use App\Models\BotUser;
use App\Models\WebhookEvent;
use App\Services\TelegramService;
use App\Models\Trigger;
use App\Models\ScenarioState;


class UpdateHandler
{
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π update Telegram –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
     */
    public function handle(Bot $bot, $update): void
    {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ (–ª–æ–≥)
        WebhookEvent::create([
            'bot_id'  => $bot->id,
            'payload' => $update,
        ]);

        if (isset($update['message'])) {
            $chatId = $update['message']['chat']['id'];
            $text = trim($update['message']['text'] ?? '');

            // 1. –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º BotUser
            $from = $update['message']['from'] ?? null;
            if (!$from) return;

            $botUser = BotUser::addOrUpdate($bot->id, $from);

            // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if ($text === '/stop') {
                $botUser->is_stopped = true;
                $botUser->save();
                TelegramService::sendMessage($bot->token, $chatId, '–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }

            if ($text === '/start') {
                $botUser->is_stopped = false;
                $botUser->save();
                // –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–µ—Å–ª–∏ –±—ã–ª–æ)
                ScenarioState::where('bot_user_id', $botUser->id)->delete();

                // –ò—â–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —Ç–∏–ø–∞ "command" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º /start (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ /start)
                $trigger = Trigger::where('bot_id', $bot->id)
                    ->where('type', 'command')
                    ->where('value', '/start')
                    ->first();

                if ($trigger) {
                    $this->startWorkflow($bot, $botUser, $trigger->workflow);
                } else {
                    TelegramService::sendMessage($bot->token, $chatId, '–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞—á–∞—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω workflow –ø–æ /start.');
                }
                return;
            }

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ is_stopped ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if ($botUser->is_stopped) {
                return;
            }

            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            $scenario = ScenarioState::where('bot_user_id', $botUser->id)->first();
            if ($scenario) {
                // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, runNodeWithInput)
                // $this->continueScenario($bot, $botUser, $scenario, $text, $update);
                // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                TelegramService::sendMessage($bot->token, $chatId, '–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.');
                return;
            }

            // 5. –ü–æ–∏—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω
           /*$trigger = Trigger::where('bot_id', $bot->id)
                ->where(function($q) use ($text) {
                    $q->where(function($q) use ($text) {
                        $q->where('type', 'command')->where('value', $text);
                    })->orWhere(function($q) use ($text) {
                        $q->where('type', 'message')->where('value', $text);
                    })->orWhere(function($q) {
                        $q->where('type', 'any');
                    });
                })
                ->first();

            if ($trigger) {
                $this->startWorkflow($bot, $botUser, $trigger->workflow);
                return;
            }*/

            // 6. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            TelegramService::sendMessage($bot->token, $chatId, '–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π.');
        }
    }

    protected function startWorkflow(Bot $bot, BotUser $user, $workflow)
    {
        // 1. –ù–∞–π—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π node (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π –ø–æ –ø–æ—Ä—è–¥–∫—É, –∏–ª–∏ —Ç–∏–ø 'message')
        $startNode = $workflow->nodes()->orderBy('id')->first(); // –∏–ª–∏ –ø–æ –¥—Ä—É–≥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é

        if (!$startNode) {
            TelegramService::sendMessage($bot->token, $user->telegram_id, 'Workflow –ø—É—Å—Ç–æ–π');
            return;
        }

        // 2. –°–æ–∑–¥–∞—Ç—å ScenarioState
        $state = ScenarioState::updateOrCreate(
            [
                'bot_user_id' => $user->id,
                'workflow_id' => $workflow->id,
            ],
            [
                'state_data' => [],
            ]
        );

        // 3. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π node
        $this->runNode($bot, $user, $workflow, $startNode, $state);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω node (message, if –∏ —Ç.–¥.)
     */
    protected function runNode(Bot $bot, BotUser $user, $workflow, $node, $state)
    {
        if ($node->type === 'message') {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ node->data['messages']
            foreach ($node->data['messages'] ?? [] as $msg) {
                if ($msg['type'] === 'text') {
                    TelegramService::sendMessage($bot->token, $user->telegram_id, $msg['content']);
                }
                // ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, —Ñ–∞–π–ª—ã)
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å outputs->default, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ –ø–æ —Å—Ö–µ–º–µ
            $default = collect($node->data['outputs'] ?? [])->firstWhere('key', 'default');
            if ($default && $default['next_node_id']) {
                $nextNode = $workflow->nodes()->find($default['next_node_id']);
                if ($nextNode) {
                    // –û–±–Ω–æ–≤–∏—Ç—å ScenarioState –∏ –≤—ã–∑–≤–∞—Ç—å runNode —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ (–∏–ª–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å)
                    $state->node_id = $nextNode->id;
                    $state->save();
                    $this->runNode($bot, $user, $workflow, $nextNode, $state);
                }
            }
        }
        // TODO: if, http_request –∏ —Ç.–¥.
    }


}

// database/migrations/2025_04_29_145952_create_bots_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('bots', function (Blueprint $table) {
            $table->id();
            $table->string('token')->unique();
            $table->string('name')->nullable();
            $table->text('description')->nullable();
            $table->string('webhook_url')->nullable();
            $table->json('settings')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('bots');
    }
};

// database/migrations/2025_04_29_150151_add_telegram_id_and_bot_id_to_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->string('telegram_id')->nullable()->unique();
            $table->foreignId('bot_id')->nullable()->constrained();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn('telegram_id');
            $table->dropColumn('bot_id');
        });
    }
};

// database/migrations/2025_04_29_150235_create_workflows_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('workflows', function (Blueprint $table) {
            $table->id();
            $table->foreignId('bot_id')->constrained();
            $table->string('name')->nullable();
            $table->text('description')->nullable();
            $table->json('definition')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('workflows');
    }
};

// database/migrations/2025_04_29_150327_create_nodes_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('nodes', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workflow_id')->constrained();
            $table->string('type')->nullable();
            $table->json('data')->nullable();
            $table->integer('position_x')->nullable();
            $table->integer('position_y')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('nodes');
    }
};

// database/migrations/2025_04_29_150417_create_variables_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('variables', function (Blueprint $table) {
            $table->id();
            $table->foreignId('bot_id')->constrained();
            $table->foreignId('user_id')->nullable()->constrained();
            $table->string('name');
            $table->text('value')->nullable();
            $table->string('type')->default('string'); // 'string' or 'number'
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('variables');
    }
};

// database/migrations/2025_04_29_150510_create_webhook_events_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('webhook_events', function (Blueprint $table) {
            $table->id();
            $table->foreignId('bot_id')->constrained();
            $table->json('payload');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('webhook_events');
    }
};

// database/migrations/2025_04_29_150545_create_scenario_states_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('scenario_states', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('workflow_id')->constrained();
            $table->foreignId('node_id')->nullable()->constrained();
            $table->json('state_data')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('scenario_states');
    }
};

// database/migrations/2025_04_29_150620_create_triggers_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('triggers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('bot_id')->constrained();
            $table->foreignId('workflow_id')->constrained();
            $table->string('type'); // 'command', 'message', 'button'
            $table->string('value')->nullable(); // The command, message text, or button callback data
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('triggers');
    }
};

// database/migrations/2025_04_29_152008_create_personal_access_tokens_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};

// database/migrations/2025_05_01_093001_add_last_update_offset_to_bots.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('bots', function (Blueprint $table) {
            $table->bigInteger('last_update_offset')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('bots', function (Blueprint $table) {
            //
        });
    }
};

// database/migrations/2025_05_02_172124_create_bot_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('bot_users', function (Blueprint $table) {
            $table->id();
            $table->foreignId('bot_id')->constrained();
            $table->bigInteger('telegram_id'); // Telegram user id (int64)
            $table->string('username')->nullable();
            $table->string('first_name')->nullable();
            $table->string('last_name')->nullable();
            $table->string('language_code', 10)->nullable();
            $table->json('extra')->nullable(); // –¥–ª—è –ª—é–±—ã—Ö —Å–ø–µ—Ü. –¥–∞–Ω–Ω—ã—Ö
            $table->timestamps();

            $table->unique(['bot_id', 'telegram_id']); // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('bot_users');
    }
};

// database/migrations/2025_05_02_175027_add_is_stopped_to_bot_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('bot_users', function (Blueprint $table) {
            $table->boolean('is_stopped')->default(false)->after('language_code');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('bot_users', function (Blueprint $table) {
            //
        });
    }
};

// resources/js/app.js


// resources/js/workflow-editor.js
class WorkflowEditor {
    constructor() {
        this.canvas = document.getElementById('workflow-canvas');
        this.arrows = document.getElementById('canvas-arrows');

        this.nodes = []; // —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–¥
        this.connections = [];

        this.selectedNodeId = null;
        

        this.dragged = false; // <--- –¥–æ–±–∞–≤–∏—Ç—å

        this.initPalette();
        this.initCanvasEvents();

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è Livewire –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        window.addEventListener('workflow:render', (e) => {this.renderFromLivewire(e.detail[0]); console.log(e);});
    }

    // 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã —á–µ—Ä–µ–∑ Livewire
    initPalette() {
        /*document.querySelectorAll('.node-palette-item').forEach(btn => {
            btn.addEventListener('click', () => {
                const x = 120 + Math.random() * 200;
                const y = 120 + Math.random() * 200;
                Livewire.dispatch('addNode', { type: btn.dataset.type});
            });
        });*/
    }

    addNode(type) {
        console.log('addNode', type);
        Livewire.dispatch('addNode', {type});
    }


    // 2. –ö–ª–∏–∫ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ canvas

    initCanvasEvents() {
        this.canvas.addEventListener('mousedown', (e) => {
            // 1. –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const outputDot = e.target.closest('.output-dot');
            if (outputDot) {
                this.startConnection(e, outputDot);
                return; // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¥–∞–ª—å—à–µ!
            }
    
            // 2. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–æ–¥—ã
            const nodeDiv = e.target.closest('.node[data-node-id]');
            if (nodeDiv) {
                this.onNodeMouseDown(e, nodeDiv);
                return; // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¥–∞–ª—å—à–µ!
            }
        });
    
        // –ö–ª–∏–∫ –ø–æ –Ω–æ–¥–µ (–≤—ã–¥–µ–ª–µ–Ω–∏–µ)
        this.canvas.addEventListener('click', (e) => {
            if (this.dragged) {
                this.dragged = false;
                return;
            }
        
            // ‚ùóÔ∏è –ù–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç—è–Ω–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (this.isConnecting) return;
        
            const nodeDiv = e.target.closest('.node[data-node-id]');
            if (nodeDiv) {
                const id = parseInt(nodeDiv.dataset.nodeId);
                console.log("id", id);
                this.selectNode(id);
            } else {
                this.selectNode(null);
            }
        });
    }

    selectNode(id) {
        this.selectedNodeId = id;
        this.updateNodeSelection();

        Livewire.dispatch('loadInspector', {
            id,
            nodes: this.nodes,
            connections: this.connections
        });
    }

    updateNodeSelection() {
        document.querySelectorAll('.node').forEach(div => {
            const nodeId = parseInt(div.dataset.nodeId);
            if (nodeId === this.selectedNodeId) {
                div.classList.add('ring', 'ring-cyan-600');
            } else {
                div.classList.remove('ring', 'ring-cyan-600');
            }
        });
    }

    drawConnections(nodes, connections) {
        const svg = document.getElementById('canvas-arrows');
        svg.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–∏–Ω–∏–∏

        console.log({connections});
    
        connections.forEach(conn => {
            // –ü–æ–∏—Å–∫ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const fromNode = document.querySelector(`.node[data-node-id='${conn.from.node}']`);
            const toNode = document.querySelector(`.node[data-node-id='${conn.to.node}']`);
    
            if (!fromNode || !toNode) return;
    
            // –ù–∞—Ö–æ–¥–∏–º output-dot –∏ input-dot (–∏–ª–∏ —Å–∞–º–∏ –Ω–æ–¥—ã)
            const fromDot = fromNode.querySelector('.output-dot');
            const toDot = toNode.querySelector('.input-dot');
    
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Ü–µ–Ω—Ç—Ä –ø—Ä–∞–≤–æ–≥–æ/–ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –Ω–æ–¥—ã
            const fromRect = fromDot ? fromDot.getBoundingClientRect() : fromNode.getBoundingClientRect();
            const toRect = toDot ? toDot.getBoundingClientRect() : toNode.getBoundingClientRect();
    
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Ç–æ—á–µ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            const fx = fromRect.left + fromRect.width / 2;
            const fy = fromRect.top + fromRect.height / 2;
            const tx = toRect.left + toRect.width / 2;
            const ty = toRect.top + toRect.height / 2;
    
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ SVG (canvas)
            const svgRect = svg.getBoundingClientRect();
            const x1 = fx - svgRect.left;
            const y1 = fy - svgRect.top;
            const x2 = tx - svgRect.left;
            const y2 = ty - svgRect.top;
    
            // –†–∏—Å—É–µ–º –∫—Ä–∏–≤—É—é –ë–µ–∑—å–µ
            const dx = Math.abs(x2 - x1) * 0.6;
            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute('d', `M ${x1},${y1} C ${x1+dx},${y1} ${x2-dx},${y2} ${x2},${y2}`);
            path.setAttribute('stroke', '#f59e42');
            path.setAttribute('stroke-width', 3);
            path.setAttribute('fill', 'none');
            svg.appendChild(path);
        });
    }

    startConnection(e, outputDot) {
        const fromId = outputDot.dataset.nodeId;
        const rect = this.canvas.getBoundingClientRect();

        this.isConnecting = true;
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ outputDot
        const dotRect = outputDot.getBoundingClientRect();
        const startX = dotRect.left + dotRect.width / 2 - rect.left;
        const startY = dotRect.top + dotRect.height / 2 - rect.top;

        const svg = document.getElementById('canvas-arrows');
        let tempLine = document.createElementNS("http://www.w3.org/2000/svg", "path");
        tempLine.setAttribute('stroke', '#f59e42');
        tempLine.setAttribute('stroke-width', 3);
        tempLine.setAttribute('fill', 'none');
        tempLine.setAttribute('pointer-events', 'none');
        svg.appendChild(tempLine);

        const mousemove = (ev) => {
            const mx = ev.clientX - rect.left;
            const my = ev.clientY - rect.top;
            tempLine.setAttribute('d', this.bezierPath(startX, startY, mx, my));
        };

        const mouseup = (ev) => {
            this.isConnecting = false;
        
            window.removeEventListener('mousemove', mousemove);
            window.removeEventListener('mouseup', mouseup);
            tempLine.remove();
        
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª–∏ –ª–∏ –Ω–∞ input-dot
            const el = document.elementFromPoint(ev.clientX, ev.clientY);
            const inputDot = el && el.closest('.input-dot');
            if (inputDot) {
                const toId = inputDot.dataset.nodeId;
                if (fromId !== toId) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –≤—ã—Ö–æ–¥–∞
                    const outputKey = outputDot.dataset.output || 'default';
                    // –ú–æ–∂–Ω–æ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å inputKey, –µ—Å–ª–∏ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è
                    // const inputKey = inputDot.dataset.input || 'main';
        
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    if (!this.connections.some(c =>
                        c.from?.node == fromId &&
                        c.from?.output == outputKey &&
                        c.to?.node == toId
                    )) {
                        this.connections.push({
                            from: { node: Number(fromId), output: outputKey },
                            to:   { node: Number(toId),   input:  'main' }
                        });
                        this.drawConnections(this.nodes, this.connections);
                    }
                }
            }
        };

        window.addEventListener('mousemove', mousemove);
        window.addEventListener('mouseup', mouseup);
    }

    saveToServer() {
        console.log("nodes: this.nodes", this.nodes);
        Livewire.dispatch('saveFromClient', {
            nodes: this.nodes,
            connections: this.connections
        });
    }

    // SVG –ë–µ–∑—å–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
    bezierPath(x1, y1, x2, y2) {
        const dx = Math.abs(x2 - x1) * 0.6;
        return `M ${x1} ${y1} C ${x1 + dx} ${y1}, ${x2 - dx} ${y2}, ${x2} ${y2}`;
    } 

    onNodeMouseDown(e, nodeDiv) {
        const id = nodeDiv.dataset.nodeId;
    
        // –ü–æ–ª—É—á–∞–µ–º canvas –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è
        const canvasRect = this.canvas.getBoundingClientRect();

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
        let origLeft = parseInt(nodeDiv.style.left);
        let origTop = parseInt(nodeDiv.style.top);

        if (isNaN(origLeft) || isNaN(origTop)) {
            const computed = getComputedStyle(nodeDiv);
            origLeft = parseInt(computed.left);
            origTop = parseInt(computed.top);
        }

        // –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
        let startX = e.clientX - canvasRect.left;
        let startY = e.clientY - canvasRect.top;

        let moved = false;

        const mousemove = (ev) => {
            moved = true;
            // –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
            const currentX = ev.clientX - canvasRect.left;
            const currentY = ev.clientY - canvasRect.top;
            const dx = currentX - startX;
            const dy = currentY - startY;
            nodeDiv.style.left = (origLeft + dx) + 'px';
            nodeDiv.style.top = (origTop + dy) + 'px';

            this.drawConnections(this.nodes, this.connections);
        };
        const mouseup = (ev) => {
            window.removeEventListener('mousemove', mousemove);
            window.removeEventListener('mouseup', mouseup);

            if (moved) {
                this.dragged = true; // <--- —Ñ–ª–∞–≥!
            }

            const newLeft = parseInt(nodeDiv.style.left);
            const newTop = parseInt(nodeDiv.style.top);
            console.log({id: id, x: newLeft, y: newTop});
            //Livewire.dispatch('moveNode', {id: id, x: newLeft, y: newTop});

            const node = this.nodes.find(n => n.id == id);
            if (node) {
                node.x = newLeft;
                node.y = newTop;
            }
            this.drawConnections(this.nodes, this.connections);

        };
        window.addEventListener('mousemove', mousemove);
        window.addEventListener('mouseup', mouseup);
    }

    // 3. –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (HTML –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç Livewire)
    renderFromLivewire({nodesHtml, arrowsHtml, nodes, connections }) {
        console.log("s0",  nodesHtml, arrowsHtml, nodes, connections );
        //this.canvas.innerHTML = nodesHtml;
        // arrowsHtml –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω!
        this.nodes = nodes;
        this.connections = connections;

        requestAnimationFrame(() => {
            this.drawConnections(this.nodes, this.connections);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ Livewire –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('livewire:navigated', () => {
    const editor = new WorkflowEditor();

    if (window.__initialNodes && window.__initialConnections) {
        editor.nodes = window.__initialNodes;
        editor.connections = window.__initialConnections;
    }

    window.WorkflowEditorInstance = editor;

    requestAnimationFrame(() => {
        editor.drawConnections(editor.nodes, editor.connections);
    });
});

window.addEventListener('workflow:saved', (e) => {
    const { nodes, connections } = e.detail[0];

    const editor = window.WorkflowEditorInstance;
    editor.nodes = nodes;
    editor.connections = connections;

    requestAnimationFrame(() => {
        editor.drawConnections(nodes, connections);
    });

});

// resources/views/bots/create.blade.php
<x-layouts.app :title="__('–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞')">
    <livewire:bots.create />
</x-layouts.app>

// resources/views/bots/edit.blade.php
<x-layouts.app :title="__('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞')">
    <livewire:bots.edit :bot="$bot" />
</x-layouts.app>

// resources/views/bots/index.blade.php
<x-layouts.app :title="__('–ë–æ—Ç—ã Telegram')">
    <livewire:bots.index />
</x-layouts.app>

// resources/views/components/layouts/app/header.blade.php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-white dark:bg-zinc-800">
        <flux:header container class="border-b border-zinc-200 bg-zinc-50 dark:border-zinc-700 dark:bg-zinc-900">
            <flux:sidebar.toggle class="lg:hidden" icon="bars-2" inset="left" />

            <a href="{{ route('dashboard') }}" class="ms-2 me-5 flex items-center space-x-2 rtl:space-x-reverse lg:ms-0" wire:navigate>
                <x-app-logo />
            </a>

            <flux:navbar class="-mb-px max-lg:hidden">
                <flux:navbar.item icon="layout-grid" :href="route('dashboard')" :current="request()->routeIs('dashboard')" wire:navigate>
                    {{ __('Dashboard') }}
                </flux:navbar.item>
            </flux:navbar>

            <flux:spacer />

            <flux:navbar class="me-1.5 space-x-0.5 rtl:space-x-reverse py-0!">
                <flux:tooltip :content="__('Search')" position="bottom">
                    <flux:navbar.item class="!h-10 [&>div>svg]:size-5" icon="magnifying-glass" href="#" :label="__('Search')" />
                </flux:tooltip>
                <flux:tooltip :content="__('Repository')" position="bottom">
                    <flux:navbar.item
                        class="h-10 max-lg:hidden [&>div>svg]:size-5"
                        icon="folder-git-2"
                        href="https://github.com/laravel/livewire-starter-kit"
                        target="_blank"
                        :label="__('Repository')"
                    />
                </flux:tooltip>
                <flux:tooltip :content="__('Documentation')" position="bottom">
                    <flux:navbar.item
                        class="h-10 max-lg:hidden [&>div>svg]:size-5"
                        icon="book-open-text"
                        href="https://laravel.com/docs/starter-kits#livewire"
                        target="_blank"
                        label="Documentation"
                    />
                </flux:tooltip>
            </flux:navbar>

            <!-- Desktop User Menu -->
            <flux:dropdown position="top" align="end">
                <flux:profile
                    class="cursor-pointer"
                    :initials="auth()->user()->initials()"
                />

                <flux:menu>
                    <flux:menu.radio.group>
                        <div class="p-0 text-sm font-normal">
                            <div class="flex items-center gap-2 px-1 py-1.5 text-start text-sm">
                                <span class="relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg">
                                    <span
                                        class="flex h-full w-full items-center justify-center rounded-lg bg-neutral-200 text-black dark:bg-neutral-700 dark:text-white"
                                    >
                                        {{ auth()->user()->initials() }}
                                    </span>
                                </span>

                                <div class="grid flex-1 text-start text-sm leading-tight">
                                    <span class="truncate font-semibold">{{ auth()->user()->name }}</span>
                                    <span class="truncate text-xs">{{ auth()->user()->email }}</span>
                                </div>
                            </div>
                        </div>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <flux:menu.radio.group>
                        <flux:menu.item :href="route('settings.profile')" icon="cog" wire:navigate>{{ __('Settings') }}</flux:menu.item>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <form method="POST" action="{{ route('logout') }}" class="w-full">
                        @csrf
                        <flux:menu.item as="button" type="submit" icon="arrow-right-start-on-rectangle" class="w-full">
                            {{ __('Log Out') }}
                        </flux:menu.item>
                    </form>
                </flux:menu>
            </flux:dropdown>
        </flux:header>

        <!-- Mobile Menu -->
        <flux:sidebar stashable sticky class="lg:hidden border-e border-zinc-200 bg-zinc-50 dark:border-zinc-700 dark:bg-zinc-900">
            <flux:sidebar.toggle class="lg:hidden" icon="x-mark" />

            <a href="{{ route('dashboard') }}" class="ms-1 flex items-center space-x-2 rtl:space-x-reverse" wire:navigate>
                <x-app-logo />
            </a>

            <flux:navlist variant="outline">
                <flux:navlist.group :heading="__('Platform')">
                    <flux:navlist.item icon="layout-grid" :href="route('dashboard')" :current="request()->routeIs('dashboard')" wire:navigate>
                      {{ __('Dashboard') }}
                    </flux:navlist.item>
                </flux:navlist.group>
            </flux:navlist>

            <flux:spacer />

            <flux:navlist variant="outline">
                <flux:navlist.item icon="folder-git-2" href="https://github.com/laravel/livewire-starter-kit" target="_blank">
                    {{ __('Repository') }}
                </flux:navlist.item>

                <flux:navlist.item icon="book-open-text" href="https://laravel.com/docs/starter-kits#livewire" target="_blank">
                    {{ __('Documentation') }}
                </flux:navlist.item>
            </flux:navlist>
        </flux:sidebar>

        {{ $slot }}

        @fluxScripts
    </body>
</html>

// resources/views/components/layouts/app/sidebar.blade.php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-white dark:bg-zinc-800">
        <flux:sidebar sticky stashable class="border-e border-zinc-200 bg-zinc-50 dark:border-zinc-700 dark:bg-zinc-900">
            <flux:sidebar.toggle class="lg:hidden" icon="x-mark" />

            <a href="{{ route('dashboard') }}" class="me-5 flex items-center space-x-2 rtl:space-x-reverse" wire:navigate>
                <x-app-logo />
            </a>

            <flux:navlist variant="outline">
                <flux:navlist.group :heading="__('Platform')" class="grid">
                    <flux:navlist.item icon="home" :href="route('dashboard')" :current="request()->routeIs('dashboard')" wire:navigate>{{ __('Dashboard') }}</flux:navlist.item>
                    <flux:navlist.item 
                        icon="cpu-chip" 
                        :href="route('bots.index')" 
                        :current="request()->routeIs('bots.*')" 
                        wire:navigate>
                        {{ __('–ë–æ—Ç—ã') }}
                    </flux:navlist.item>
                </flux:navlist.group>
            </flux:navlist>

            <flux:spacer />

            <flux:navlist variant="outline">
                <flux:navlist.item icon="folder-git-2" href="https://github.com/laravel/livewire-starter-kit" target="_blank">
                {{ __('Repository') }}
                </flux:navlist.item>

                <flux:navlist.item icon="book-open-text" href="https://laravel.com/docs/starter-kits#livewire" target="_blank">
                {{ __('Documentation') }}
                </flux:navlist.item>
            </flux:navlist>

            <!-- Desktop User Menu -->
            <flux:dropdown position="bottom" align="start">
                <flux:profile
                    :name="auth()->user()->name"
                    :initials="auth()->user()->initials()"
                    icon-trailing="chevrons-up-down"
                />

                <flux:menu class="w-[220px]">
                    <flux:menu.radio.group>
                        <div class="p-0 text-sm font-normal">
                            <div class="flex items-center gap-2 px-1 py-1.5 text-start text-sm">
                                <span class="relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg">
                                    <span
                                        class="flex h-full w-full items-center justify-center rounded-lg bg-neutral-200 text-black dark:bg-neutral-700 dark:text-white"
                                    >
                                        {{ auth()->user()->initials() }}
                                    </span>
                                </span>

                                <div class="grid flex-1 text-start text-sm leading-tight">
                                    <span class="truncate font-semibold">{{ auth()->user()->name }}</span>
                                    <span class="truncate text-xs">{{ auth()->user()->email }}</span>
                                </div>
                            </div>
                        </div>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <flux:menu.radio.group>
                        <flux:menu.item :href="route('settings.profile')" icon="cog" wire:navigate>{{ __('Settings') }}</flux:menu.item>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <form method="POST" action="{{ route('logout') }}" class="w-full">
                        @csrf
                        <flux:menu.item as="button" type="submit" icon="arrow-right-start-on-rectangle" class="w-full">
                            {{ __('Log Out') }}
                        </flux:menu.item>
                    </form>
                </flux:menu>
            </flux:dropdown>
        </flux:sidebar>

        <!-- Mobile User Menu -->
        <flux:header class="lg:hidden">
            <flux:sidebar.toggle class="lg:hidden" icon="bars-2" inset="left" />

            <flux:spacer />

            <flux:dropdown position="top" align="end">
                <flux:profile
                    :initials="auth()->user()->initials()"
                    icon-trailing="chevron-down"
                />

                <flux:menu>
                    <flux:menu.radio.group>
                        <div class="p-0 text-sm font-normal">
                            <div class="flex items-center gap-2 px-1 py-1.5 text-start text-sm">
                                <span class="relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg">
                                    <span
                                        class="flex h-full w-full items-center justify-center rounded-lg bg-neutral-200 text-black dark:bg-neutral-700 dark:text-white"
                                    >
                                        {{ auth()->user()->initials() }}
                                    </span>
                                </span>

                                <div class="grid flex-1 text-start text-sm leading-tight">
                                    <span class="truncate font-semibold">{{ auth()->user()->name }}</span>
                                    <span class="truncate text-xs">{{ auth()->user()->email }}</span>
                                </div>
                            </div>
                        </div>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <flux:menu.radio.group>
                        <flux:menu.item :href="route('settings.profile')" icon="cog" wire:navigate>{{ __('Settings') }}</flux:menu.item>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <form method="POST" action="{{ route('logout') }}" class="w-full">
                        @csrf
                        <flux:menu.item as="button" type="submit" icon="arrow-right-start-on-rectangle" class="w-full">
                            {{ __('Log Out') }}
                        </flux:menu.item>
                    </form>
                </flux:menu>
            </flux:dropdown>
        </flux:header>

        {{ $slot }}

        @fluxScripts
    </body>
</html>

// resources/views/components/layouts/app.blade.php
<x-layouts.app.sidebar :title="$title ?? null">
    <flux:main>
        {{ $slot }}
    </flux:main>
</x-layouts.app.sidebar>

// resources/views/components/layouts/auth/card.blade.php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-neutral-100 antialiased dark:bg-linear-to-b dark:from-neutral-950 dark:to-neutral-900">
        <div class="bg-muted flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
            <div class="flex w-full max-w-md flex-col gap-6">
                <a href="{{ route('home') }}" class="flex flex-col items-center gap-2 font-medium" wire:navigate>
                    <span class="flex h-9 w-9 items-center justify-center rounded-md">
                        <x-app-logo-icon class="size-9 fill-current text-black dark:text-white" />
                    </span>

                    <span class="sr-only">{{ config('app.name', 'Laravel') }}</span>
                </a>

                <div class="flex flex-col gap-6">
                    <div class="rounded-xl border bg-white dark:bg-stone-950 dark:border-stone-800 text-stone-800 shadow-xs">
                        <div class="px-10 py-8">{{ $slot }}</div>
                    </div>
                </div>
            </div>
        </div>
        @fluxScripts
    </body>
</html>

// resources/views/components/layouts/auth/simple.blade.php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-white antialiased dark:bg-linear-to-b dark:from-neutral-950 dark:to-neutral-900">
        <div class="bg-background flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
            <div class="flex w-full max-w-sm flex-col gap-2">
                <a href="{{ route('home') }}" class="flex flex-col items-center gap-2 font-medium" wire:navigate>
                    <span class="flex h-9 w-9 mb-1 items-center justify-center rounded-md">
                        <x-app-logo-icon class="size-9 fill-current text-black dark:text-white" />
                    </span>
                    <span class="sr-only">{{ config('app.name', 'Laravel') }}</span>
                </a>
                <div class="flex flex-col gap-6">
                    {{ $slot }}
                </div>
            </div>
        </div>
        @fluxScripts
    </body>
</html>

// resources/views/components/layouts/auth/split.blade.php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-white antialiased dark:bg-linear-to-b dark:from-neutral-950 dark:to-neutral-900">
        <div class="relative grid h-dvh flex-col items-center justify-center px-8 sm:px-0 lg:max-w-none lg:grid-cols-2 lg:px-0">
            <div class="bg-muted relative hidden h-full flex-col p-10 text-white lg:flex dark:border-e dark:border-neutral-800">
                <div class="absolute inset-0 bg-neutral-900"></div>
                <a href="{{ route('home') }}" class="relative z-20 flex items-center text-lg font-medium" wire:navigate>
                    <span class="flex h-10 w-10 items-center justify-center rounded-md">
                        <x-app-logo-icon class="me-2 h-7 fill-current text-white" />
                    </span>
                    {{ config('app.name', 'Laravel') }}
                </a>

                @php
                    [$message, $author] = str(Illuminate\Foundation\Inspiring::quotes()->random())->explode('-');
                @endphp

                <div class="relative z-20 mt-auto">
                    <blockquote class="space-y-2">
                        <flux:heading size="lg">&ldquo;{{ trim($message) }}&rdquo;</flux:heading>
                        <footer><flux:heading>{{ trim($author) }}</flux:heading></footer>
                    </blockquote>
                </div>
            </div>
            <div class="w-full lg:p-8">
                <div class="mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]">
                    <a href="{{ route('home') }}" class="z-20 flex flex-col items-center gap-2 font-medium lg:hidden" wire:navigate>
                        <span class="flex h-9 w-9 items-center justify-center rounded-md">
                            <x-app-logo-icon class="size-9 fill-current text-black dark:text-white" />
                        </span>

                        <span class="sr-only">{{ config('app.name', 'Laravel') }}</span>
                    </a>
                    {{ $slot }}
                </div>
            </div>
        </div>
        @fluxScripts
    </body>
</html>

// resources/views/components/layouts/auth.blade.php
<x-layouts.auth.simple :title="$title ?? null">
    {{ $slot }}
</x-layouts.auth.simple>

// resources/views/components/layouts/empty.bladephp
<x-layouts.app.header :title="$title ?? null">
    <flux:main>
        {{ $slot }}
    </flux:main>
</x-layouts.app.header>

// resources/views/livewire/bots/create.blade.php
<div>
    <form wire:submit.prevent="save" class="max-w-lg mx-auto space-y-6 mt-8">
        <flux:heading size="lg">{{ __('–î–æ–±–∞–≤–∏—Ç—å Telegram-–±–æ—Ç–∞') }}</flux:heading>

        <flux:input wire:model="name" :label="__('–ù–∞–∑–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')" placeholder="My Telegram Bot" />

        <flux:input wire:model="token" :label="__('Bot Token')" required placeholder="123456:ABC-DEF..." />

        <flux:textarea wire:model="description" :label="__('–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')" rows="3" />

        @error('token') <flux:text class="text-red-600">{{ $message }}</flux:text> @enderror

        <div class="flex gap-2 justify-end">
            <flux:button as="a" href="{{ route('bots.index') }}" variant="outline">
                {{ __('–û—Ç–º–µ–Ω–∞') }}
            </flux:button>
            <flux:button type="submit" variant="primary">
                {{ __('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å') }}
            </flux:button>
        </div>
    </form>
</div>

// resources/views/livewire/bots/edit.blade.php
<div>
    <form wire:submit.prevent="save" class="max-w-lg mx-auto space-y-6 mt-8">
        <flux:heading size="lg">{{ __('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram-–±–æ—Ç–∞') }}</flux:heading>

        <flux:input wire:model="name" :label="__('–ù–∞–∑–≤–∞–Ω–∏–µ')" />

        <flux:input value="{{ $bot->token }}" :label="__('Bot Token')" readonly />

        <flux:textarea wire:model="description" :label="__('–û–ø–∏—Å–∞–Ω–∏–µ')" rows="3" />

        <div class="text-sm text-neutral-500">Webhook: {{ $bot->webhook_url ?? '‚Äî' }}</div>

        <div class="flex gap-2 justify-end">
            <flux:button as="a" href="{{ route('bots.index') }}" variant="outline">
                {{ __('–ù–∞–∑–∞–¥') }}
            </flux:button>
            <flux:button type="submit" variant="primary">
                {{ __('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å') }}
            </flux:button>
        </div>
    </form>
</div>

// resources/views/livewire/bots/index.blade.php
<div>
<div class="flex justify-between items-center mb-6">
        <flux:heading size="xl">{{ __('–ë–æ—Ç—ã Telegram') }}</flux:heading>
        <flux:button as="a" href="{{ route('bots.create') }}" variant="primary">
            + {{ __('–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞') }}
        </flux:button>
    </div>
    <div class="overflow-x-auto">
        <table class="min-w-full border divide-y divide-neutral-200 dark:divide-neutral-700">
            <thead>
                <tr>
                    <th class="px-4 py-2 text-left">ID</th>
                    <th class="px-4 py-2 text-left">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th class="px-4 py-2 text-left">Token</th>
                    <th class="px-4 py-2 text-left">Webhook</th>
                    <th class="px-4 py-2"></th>
                </tr>
            </thead>
            <tbody>
                @forelse($this->bots as $bot)
                <tr>
                    <td class="px-4 py-2 align-top">{{ $bot->id }}</td>
                    <td class="px-4 py-2 align-top">{{ $bot->name ?? '‚Äî' }}</td>
                    <td class="px-4 py-2 align-top truncate max-w-xs">{{ Str::mask($bot->token, '*', 10) }}</td>
                    <td class="px-4 py-2 align-top">{{ $bot->webhook_url ?? '‚Äî' }}</td>
                    <td class="px-4 py-2 align-top text-right">
                        <flux:button as="a" size="sm" variant="outline" href="{{ route('bots.edit', $bot) }}">
                            {{ __('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å') }}
                        </flux:button>
                    </td>
                </tr>
                <tr>
                    <td colspan="5" class="px-6 pb-4 pt-0 bg-neutral-50 dark:bg-neutral-900">
                        <!-- –°–ø–∏—Å–∫–æ–∫ —Å—Ö–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ -->
                        <div class="flex items-center justify-between mb-1">
                            <span class="font-semibold text-neutral-700 dark:text-neutral-200">–°—Ö–µ–º—ã (workflows):</span>
                            <flux:button as="a"
                                size="xs"
                                variant="primary"
                                href="{{ route('workflows.create', $bot) }}">
                                + –°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É
                            </flux:button>
                        </div>
                        @if($bot->workflows->count())
                            <ul class="flex flex-wrap gap-2">
                                @foreach($bot->workflows as $workflow)
                                    <li class="flex items-center gap-2 px-3 py-1 rounded bg-neutral-100 dark:bg-neutral-800">
                                        <span class="font-medium">{{ $workflow->name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' }}</span>
                                        <flux:button as="a"
                                            size="xs"
                                            variant="outline"
                                            href="{{ route('workflows.edit', [$bot, $workflow]) }}">
                                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                        </flux:button>
                                        <flux:button as="a"
                                            size="xs"
                                            variant="outline"
                                            href="{{ route('workflows.editor', [$bot, $workflow]) }}">
                                            –°—Ö–µ–º–∞
                                        </flux:button>
                                        <flux:button as="a" href="{{ route('triggers.index', $bot) }}" variant="outline">
                                            –¢—Ä–∏–≥–≥–µ—Ä—ã –±–æ—Ç–∞
                                        </flux:button>
                                    </li>
                                @endforeach
                            </ul>
                        @else
                            <span class="text-neutral-400">–ù–µ—Ç —Å—Ö–µ–º</span>
                        @endif
                    </td>
                </tr>
            @empty
                <tr>
                    <td colspan="5" class="px-4 py-4 text-center text-muted">–ù–µ—Ç –±–æ—Ç–æ–≤</td>
                </tr>
            @endforelse
            </tbody>
        </table>
</div>
</div>

// resources/views/livewire/workflows/editor.blade.php
<div class="flex flex-col h-[calc(100vh-3.5rem)] relative">
    {{-- –§–ª–µ—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ --}}
    @if (session()->has('success'))
    <div
        wire:key="success-{{ rand(1,3000) }}"
        x-data="{ show: true }"
        x-init="setTimeout(() => show = false, 3000)"
        x-show="show"
        @click="show = false"
        x-transition
        class="absolute top-4 right-4 z-50 bg-green-600 text-white rounded px-4 py-2 shadow cursor-pointer"
        style="display: none;"
    >
        {{ session('success') }}
    </div>
@endif
    <!-- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å -->
    <div class="flex items-center justify-between bg-cyan-900 text-white px-4 py-2">
        <div class="flex items-center gap-3">
            <flux:button as="a" href="{{ route('bots.edit', $bot) }}" size="sm" variant="ghost" icon="chevron-left" class="text-white" />
            <span class="font-semibold text-lg">{{ $bot->name ?? '–ë–æ—Ç' }}</span>
            <span class="text-sm text-cyan-200">|</span>
            <span class="text-sm">{{ $workflow->name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' }}</span>
            <span class="text-xs text-cyan-100 ml-2">–¶–µ–ø–æ—á–∫–∞ {{ $workflow->updated_at->format('d.m H:i') }}</span>
        </div>
        <div class="flex items-center gap-2">
            <flux:button icon="arrow-path" variant="ghost" size="sm" class="text-white" title="–û–±–Ω–æ–≤–∏—Ç—å" wire:click="$refresh" />
            <flux:button icon="arrow-uturn-left" variant="ghost" size="sm" class="text-white" title="–û—Ç–º–µ–Ω–∏—Ç—å" disabled />
            <flux:button icon="arrow-uturn-right" variant="ghost" size="sm" class="text-white" title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" disabled />
            <flux:button
                variant="primary"
                size="sm"
                class="bg-cyan-700 hover:bg-cyan-800 border-cyan-700"
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                onclick="window.WorkflowEditorInstance.saveToServer()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</flux:button>
            <flux:button icon="x-mark" as="a" href="{{ route('bots.edit', $bot) }}" variant="ghost" size="sm" class="text-white" title="–ó–∞–∫—Ä—ã—Ç—å" />
        </div>
    </div>

    <div class="flex flex-1 min-h-0">
    <!-- –õ–µ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ -->
    <aside class="w-20 bg-neutral-100 border-r flex flex-col items-center py-4 gap-2">
        <flux:button onclick="window.WorkflowEditorInstance.addNode('message')" class="mb-2 p-2 rounded hover:bg-cyan-100" title="–°–æ–æ–±—â–µ–Ω–∏–µ">üí¨</flux:button>
        {{-- ... –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã --}}
    </aside>

    <!-- –ö–∞–Ω–≤–∞—Å -->
    <main id="workflow-canvas-container" class="flex-1 bg-neutral-200 relative overflow-hidden">
        <svg id="canvas-arrows" class="absolute inset-0 w-full h-full pointer-events-none"></svg>
        <div id="workflow-canvas" class="absolute inset-0" style="position: relative;">
            @foreach($nodes as $node)
                <div
                    class="node absolute @if($selectedNodeId == $node['id']) ring-2 ring-cyan-600 @endif"
                    style="left:{{ $node['x'] }}px; top:{{ $node['y'] }}px; min-width:180px; cursor:move;"
                    data-node-id="{{ $node['id'] }}"
                >
                    {!! view("workflows.nodes.{$node['type']}", ['node' => $node]) !!}
                </div>
            @endforeach
        </div>
    </main>

    <!-- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å -->
    @if($selectedNodeId)
    <aside id="node-inspector" class="w-96 bg-white border-l flex flex-col px-4 py-4 overflow-y-auto">
        <livewire:workflows.node-inspector
            :node="$selectedNode"
            :key="$selectedNodeId"
        />
    </aside>
    @endif
    </div>
    <script>

        window.__initialNodes = @json($nodes);
        window.__initialConnections = @json($connections);

    </script>
</div>

// resources/views/livewire/workflows/inspectors/message.blade.php
<div>
    <flux:heading size="md" class="mb-3">–°–æ–æ–±—â–µ–Ω–∏—è</flux:heading>

    <div class="flex flex-col gap-4">
        @foreach($messages as $i => $msg)
            @if($msg['type'] === 'text')
                <div class="flex items-start gap-2">
                    <textarea
                        wire:model="messages.{{ $i }}.content"
                        rows="2"
                        class="border rounded p-1 w-full"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"></textarea>
                    <button type="button" wire:click="removeMessage({{ $i }})"
                        class="px-2 py-1 text-red-500 hover:bg-red-100 rounded text-xs">‚úï</button>
                </div>
            @endif
            {{-- –í –±—É–¥—É—â–µ–º: elseif($msg['type'] === 'audio') ... --}}
        @endforeach
    </div>

    <!-- –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" —Å AlpineJS-–º–µ–Ω—é -->
    <div class="mt-4 relative" x-data="{ showMenu: false }">
        <flux:button type="button"
            size="sm"
            variant="primary"
            @click="showMenu = !showMenu"
            @keydown.escape.window="showMenu = false">
            + –î–æ–±–∞–≤–∏—Ç—å
        </flux:button>

        <div
            x-show="showMenu"
            @click.away="showMenu = false"
            x-transition
            class="absolute z-10 mt-2 w-48 rounded shadow bg-white border p-2"
            style="display: none;"
        >
            <ul class="divide-y">
                <li>
                    <button type="button"
                        wire:click="addTextMessage"
                        @click="showMenu = false"
                        class="block w-full text-left px-2 py-1 hover:bg-cyan-100">
                        –°–æ–æ–±—â–µ–Ω–∏–µ
                    </button>
                </li>
                <li>
                    <button type="button" disabled class="block w-full text-left px-2 py-1 text-gray-400 cursor-not-allowed">
                        –ê—É–¥–∏–æ (—Å–∫–æ—Ä–æ)
                    </button>
                </li>
                <li>
                    <button type="button" disabled class="block w-full text-left px-2 py-1 text-gray-400 cursor-not-allowed">
                        –§–∞–π–ª (—Å–∫–æ—Ä–æ)
                    </button>
                </li>
                <li>
                    <button type="button" disabled class="block w-full text-left px-2 py-1 text-gray-400 cursor-not-allowed">
                        –ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–∫–æ—Ä–æ)
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <div class="mt-6">
        <flux:button type="button" variant="primary" wire:click="save">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</flux:button>
    </div>
</div>

// resources/views/livewire/workflows/node-inspector.blade.php
<div>
    {{-- Be like water. --}}
</div>

// resources/views/triggers/create.blade.php
<x-layouts.app :title="'–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞: ' . ($bot->name ?? $bot->id)">
    <form method="POST" action="{{ route('triggers.store', $bot) }}" class="max-w-md mx-auto space-y-4 mt-8">
        @csrf
        <flux:heading size="lg">–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä</flux:heading>

        <flux:select name="type" label="–¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞" required>
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø...</option>
            @foreach($types as $k => $v)
                <option value="{{ $k }}" @selected(old('type') == $k)>{{ $v }}</option>
            @endforeach
        </flux:select>

        <flux:input name="value" label="–ó–Ω–∞—á–µ–Ω–∏–µ (—Å–ª–æ–≤–æ/–∫–æ–º–∞–Ω–¥–∞)" value="{{ old('value') }}" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: /start –∏–ª–∏ '–æ–ø–ª–∞—Ç–∞'" />

        <flux:select name="workflow_id" label="Workflow" required>
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ workflow...</option>
            @foreach($workflows as $wf)
                <option value="{{ $wf->id }}" @selected(old('workflow_id') == $wf->id)>{{ $wf->name ?? 'ID '.$wf->id }}</option>
            @endforeach
        </flux:select>

        <div class="flex gap-2 justify-end">
            <flux:button as="a" href="{{ route('triggers.index', $bot) }}" variant="outline">–û—Ç–º–µ–Ω–∞</flux:button>
            <flux:button type="submit" variant="primary">–î–æ–±–∞–≤–∏—Ç—å</flux:button>
        </div>
    </form>
</x-layouts.app>

// resources/views/triggers/edit.blade.php
<x-layouts.app :title="'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä: ' . $trigger->id">
    <form method="POST" action="{{ route('triggers.update', [$bot, $trigger]) }}" class="max-w-md mx-auto space-y-4 mt-8">
        @csrf
        <flux:heading size="lg">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä</flux:heading>

        <flux:select name="type" label="–¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞" required>
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø...</option>
            @foreach($types as $k => $v)
                <option value="{{ $k }}" @selected(($trigger->type ?? old('type')) == $k)>{{ $v }}</option>
            @endforeach
        </flux:select>

        <flux:input name="value" label="–ó–Ω–∞—á–µ–Ω–∏–µ (—Å–ª–æ–≤–æ/–∫–æ–º–∞–Ω–¥–∞)" value="{{ old('value', $trigger->value) }}" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: /start –∏–ª–∏ '–æ–ø–ª–∞—Ç–∞'" />

        <flux:select name="workflow_id" label="Workflow" required>
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ workflow...</option>
            @foreach($workflows as $wf)
                <option value="{{ $wf->id }}" @selected(($trigger->workflow_id ?? old('workflow_id')) == $wf->id)>{{ $wf->name ?? 'ID '.$wf->id }}</option>
            @endforeach
        </flux:select>

        <div class="flex gap-2 justify-end">
            <flux:button as="a" href="{{ route('triggers.index', $bot) }}" variant="outline">–û—Ç–º–µ–Ω–∞</flux:button>
            <flux:button type="submit" variant="primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</flux:button>
        </div>
    </form>
</x-layouts.app>

// resources/views/triggers/index.blade.php
<x-layouts.app :title="'–¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –±–æ—Ç–∞: ' . ($bot->name ?? $bot->id)">
    <div class="max-w-2xl mx-auto mt-8">
        <div class="flex justify-between mb-4 items-center">
            <flux:heading size="lg">–¢—Ä–∏–≥–≥–µ—Ä—ã</flux:heading>
            <flux:button as="a" href="{{ route('triggers.create', $bot) }}" variant="primary">
                + –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
            </flux:button>
        </div>
        @if(session('success'))
            <div class="mb-4 text-green-600">{{ session('success') }}</div>
        @endif
        <table class="min-w-full border divide-y">
            <thead>
                <tr>
                    <th class="px-2 py-1">ID</th>
                    <th class="px-2 py-1">–¢–∏–ø</th>
                    <th class="px-2 py-1">–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                    <th class="px-2 py-1">Workflow</th>
                    <th class="px-2 py-1"></th>
                </tr>
            </thead>
            <tbody>
                @foreach($triggers as $trigger)
                    <tr>
                        <td class="px-2">{{ $trigger->id }}</td>
                        <td class="px-2">{{ $trigger->type }}</td>
                        <td class="px-2">{{ $trigger->value }}</td>
                        <td class="px-2">{{ $trigger->workflow->name ?? '-' }}</td>
                        <td class="px-2">
                            <flux:button as="a" href="{{ route('triggers.edit', [$bot, $trigger]) }}" size="sm" variant="outline">
                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </flux:button>
                        </td>
                    </tr>
                @endforeach
            </tbody>
        </table>
    </div>
</x-layouts.app>

// resources/views/workflows/create.blade.php
<x-layouts.app :title="'–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –¥–ª—è –±–æ—Ç–∞: ' . ($bot->name ?: $bot->id)">
    <form method="POST" action="{{ route('bots.workflows.store', $bot) }}" class="max-w-lg mx-auto mt-8 space-y-6">
        @csrf
        <flux:heading size="lg">–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É</flux:heading>
        <flux:input name="name" label="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã" required value="{{ old('name') }}" />
        <flux:textarea name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ" rows="3">{{ old('description') }}</flux:textarea>
        <div class="flex gap-2 justify-end">
            <flux:button as="a" href="{{ route('bots.index') }}" variant="outline">–û—Ç–º–µ–Ω–∞</flux:button>
            <flux:button type="submit" variant="primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</flux:button>
        </div>
    </form>
</x-layouts.app>

// resources/views/workflows/edit.blade.php
<x-layouts.app :title="'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É: ' . ($workflow->name ?: $workflow->id)">
    <div class="max-w-2xl mx-auto mt-8 space-y-6">
        <flux:heading size="lg">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É</flux:heading>
        <div class="p-4 rounded bg-neutral-100 dark:bg-neutral-900">
            <div class="mb-2 text-neutral-700 dark:text-neutral-200">
                <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {{ $workflow->name }}
            </div>
            <div class="mb-2 text-neutral-600 dark:text-neutral-300">
                <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {{ $workflow->description }}
            </div>
            {{-- –¢—É—Ç –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ö–µ–º—ã --}}
            <div class="mt-6 text-neutral-400 text-sm">–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ö–µ–º—ã –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å‚Ä¶</div>
        </div>
        <div>
            <flux:button as="a" href="{{ route('bots.index') }}" variant="outline">–ù–∞–∑–∞–¥ –∫ –±–æ—Ç–∞–º</flux:button>
        </div>
    </div>
</x-layouts.app>

// resources/views/workflows/editor.blade.php
<x-layouts.app.header :title="'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É: ' . ($workflow->name ?: $workflow->id)">
    @vite('resources/js/workflow-editor.js')
    <livewire:workflows.editor :workflow="$workflow" :bot="$bot" />
</x-layouts.app.header>

// resources/views/workflows/nodes/message.blade.php
<div class="relative rounded shadow bg-white border border-cyan-400 p-2"
     data-node-id="{{ $node['id'] }}">
    {{-- –í—Ö–æ–¥ (—Å–ª–µ–≤–∞) --}}
    <div class="absolute left-[-10px] top-1/2 -translate-y-1/2 z-10">
        <div class="input-dot w-4 h-4 rounded-full bg-cyan-500 border-2 border-white shadow cursor-pointer"
             data-io="input"
             data-node-id="{{ $node['id'] }}">
        </div>
    </div>
    {{-- –í—ã—Ö–æ–¥ (—Å–ø—Ä–∞–≤–∞) --}}
    <div class="absolute right-[-10px] top-1/2 -translate-y-1/2 z-10">
        <div class="output-dot w-4 h-4 rounded-full bg-amber-400 border-2 border-white shadow cursor-pointer"
             data-output="default"
             data-node-id="{{ $node['id'] }}">
        </div>
        
    </div>
    {{-- –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–¥—ã --}}
    <div class="flex items-center gap-2 mb-1">
        <span class="rounded-full bg-cyan-600 text-white px-2 text-xs">–°–æ–æ–±—â–µ–Ω–∏–µ</span>
    </div>
    <div class="text-sm text-gray-900">–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</div>
    @if(!empty($node['data']['buttons']))
        <div class="mt-2 flex flex-wrap gap-1">
            @foreach($node['data']['buttons'] as $btn)
                <button class="px-2 py-1 rounded bg-cyan-100 text-cyan-900 text-xs">{{ $btn }}</button>
            @endforeach
        </div>
    @endif
</div>

// resources/views/workflows/partials/nodes_canvas.blade.php
@foreach($nodes as $node)
    <div
        class="node absolute @if($selectedNodeId == $node['id']) ring-2 ring-cyan-600 @endif"
        style="left:{{ $node['x'] }}px; top:{{ $node['y'] }}px; min-width:180px; cursor:move;"
        data-node-id="{{ $node['id'] }}"
    >
        {!! view("workflows.nodes.{$node['type']}", ['node' => $node]) !!}
    </div>
@endforeach

